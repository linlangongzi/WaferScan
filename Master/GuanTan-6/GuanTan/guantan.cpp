#include "guantan.h"
#include <QMessageBox>
#include <tchar.h>
#include "HardwareAddress.h"
#include <QPainter>
#include <QPrinter>
#include <QPrintPreviewDialog>
#include <QDesktopWidget>
#include <QPoint>
#include "ui_ascan.h"
#include <QWidget>
#include "ascan.h"
#include <QDebug>
#include <QtGui>
#include <process.h>
#include <Windows.h>
#include <math.h>
#include <qdesktopwidget.h>
#include <QCursor>
#include <QDir>
#include <QFile>
#include <QFileDialog>
#include <QTime>
#include <QTimer>
#include <QSize>
#include <QDate>
#include <QDateTime>
#include <QPainterPath>
#include <QtCore/QStringList>
#include <QtCore/QFile>
#include <QtCore/QDir>
#include <QtCore/QSettings>
#include <QSettings>
#include "const.h"
#include "..\pci9054_dll\plx_lib_x.h"	// plx_dll.dll PCI卡操作动态链接库
#include "..\pci9054_dll\p9054_lib.h"
#include "DataDefine.h"
#include "GlobalFunction.h"
#include <Qmutex>
#include <qstring.h>
#include "login.h"
#include "traversalfile.h"
#include "DataMonitor.h"

GlobalItemValue g_ItemValue;
HANDLE hOPCInitEvent;
HANDLE hOPCReadEvent;	// OPC读值
HANDLE hOPCWriteEvent;	// OPC写值
QMutex g_ItemCS;
QMutex g_WriteOPCItem;
QMutex g_startMarkMutex;
extern CLSID clsOPCServer;
int nPaintEvnetTime = 1;
extern DWORD g_dwActiveChannel;
extern DWORD g_dwActiveFlawOrBottom;
extern FEATURE_DATA g_stFeatrueInfo[DATA_NUM];
extern QString g_strCurUser;
extern int g_nTestCount;
extern int g_nTestMaxCount;
HANDLE hSaveDMADataEvent = NULL;
QMutex g_csCard;
short g_nWaveSpeed = 5980;	// 声速
extern DataMonitor g_DataMonitor;
WORD g_wStartFlag;			//探伤使能；0，为结束；1，为开始
//using namespace Ui;

GuanTan::GuanTan(QWidget *parent, Qt::WFlags flags)
	: QDialog(parent, flags)
{
	setupUi(this);
	setWindowFlags(Qt::Widget);
	InitVectorLabel();
	WORD nAECNum = m_PLXCommunication.GetAECCardNum();
	m_nThick = 40;
	m_nWaveSpeed = 5980;
	m_fEncipheror_mark = 1;
	m_bEncipherorChange2 = FALSE;
	m_bEncipherorChange3 = FALSE;
	m_bEncipherorChange4 = FALSE;
	m_bEncipherorChange5 = FALSE;
	m_bEncipherorChange6 = FALSE;
	m_nfeatureAverageHighCount = 20;
	m_nfeatureAverageLowCount = 5;
	m_bMark = 0;
	m_fHighCorrect = 0.0f;
	m_fLowCorrect = 0.0f;
	m_fHighCorrect2 = 0.0f;
	m_fLowCorrect2 = 0.0f;
	m_nThickDrawType = 1;
	m_fThickPercent = 0.2f;
	m_nCutNoise = 2;
	m_nCutNoise2 = 2;
	m_bPlateStart = new BOOL[nAECNum];
	m_bPlateEnd = new BOOL[nAECNum];
	::ZeroMemory(m_bPlateStart, sizeof(BOOL) * nAECNum);
	::ZeroMemory(m_bPlateEnd, sizeof(BOOL) * nAECNum);
	m_bPlateStart[0] = FALSE;
	m_bPlateEnd[0] = FALSE;
#if _PLX
#if HAVE_OPC
	hOPCInitEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	m_OPCComponent.StartThread();
	IUnknown* m_pIServer = NULL;
	m_OPCComponent.CreateComponent(clsOPCServer, IID_IOPCServer, &m_pIServer);
	DWORD ret = ::WaitForSingleObject(hOPCInitEvent,INFINITE);
	ResetEvent(hOPCInitEvent);
	m_pIServer->Release();
	::Sleep(10);

	hOPCReadEvent = CreateEvent(NULL, TRUE, FALSE, L"OPCReadValue");
	hOPCWriteEvent = CreateEvent(NULL, TRUE, FALSE, L"OPCWriteValue");
#endif
#endif
	m_nTIMER_THREAD_PROCESSId = startTimer(100);	// 加定时器 wangwei modify on 2013-12-17
	m_nTIMER_SAVE_DMA_DATA = startTimer(200);	// 20
	m_nTIMER_SAVE_PICTURE = startTimer(1000);
	m_bSelChannel = FALSE;
	m_bSetOne = FALSE;
	m_bIsRunning = FALSE;
	m_bAScanIsOpen = FALSE;
	m_bOver = FALSE;
	InitializeConfig();//配置信息初始化
	memset(m_nBadCoupleBox,0,sizeof(m_nBadCoupleBox));
	memset(m_fProbeCorrect,0,sizeof(m_fProbeCorrect));
	m_nBadCoupleNum = 0;
	setMouseTracking(true);
	widget_9->setMouseTracking(TRUE);
	widgetOne->setMouseTracking(TRUE);
	widgetTwo->setMouseTracking(TRUE);
	widgetThree->setMouseTracking(TRUE);
	widgetFour->setMouseTracking(TRUE);
	widgetFive->setMouseTracking(TRUE);
	m_nStartDeadZone = 0;			//始端盲区
	m_nEndDeadZone = 0;				//末端盲区
	m_nLeftPart = 0;
	m_bOrderNew = 1;
	m_fCurPersent = 1;
	m_nRealSteelL = 0;
	m_nTOTAL = 0;
	m_nACCEPTS_CONT = 0;
	m_fACCEPTS_PERSENT = 0.0f;
	m_strACCEPTS_PERSENT = "0%";
	m_nREJECTS_CONT = 0;
	m_fREJECTS_PERSENT = 0.0f;
	m_strREJECTS_PERSENT = "0%";
	m_nRightPart = m_fPIPE_LENGTH;
	m_bSliderLeftPressed = false;
	m_bSliderRightPressed = false;
	m_bSliderLeftPresse = false;
	m_bSliderRightPresse = false;
	m_bSliderPresse = false;
	m_bSliderPressed = false;
	m_bInFeacher = FALSE;
	m_bOutFeacher = FALSE;
	m_bThickFeacher = FALSE;
	m_dRectWidth = 345;
	m_nBadCoupleBoxNum = 2;
	m_bGain = false;
	m_bCGain = false;
	m_bSoundSpeed = false;
	m_bDelay = false;
	m_bGateSet = false;
	m_bWidth = false;
	m_bJudge = false;
	m_bStaNoise = false;
	m_bReFreq = false;
	m_bImpedanceSet = false;
	m_bProbeSet = false;
	m_bDeadZone = FALSE;
	m_nOutVFeatureFlawNum = 0;
	m_nInVFeatureFlawNum = 0;
	m_nOutHFeatureFlawNum = 0;
	m_nInHFeatureFlawNum = 0;
	m_nThickFeatureFlawNumAdd = 0;
	m_nThickFeatureFlawNumCut = 0;
	m_nThickFeatureFlawNumAdd2 = 0;
	m_nThickFeatureFlawNumCut2 = 0;
	m_nLayerFeatureFlawNum = 0;
	m_nBadCoupleFeatureFlawNum = 0;
	m_nOutVFeatureMaxFlawSize = 0;
	m_nInVFeatureMaxFlawSize = 0;
	m_nOutHFeatureMaxFlawSize = 0;
	m_nInHFeatureMaxFlawSize = 0;
	m_nThickFeatureMaxFlawSizeAdd = 0;
	m_nThickFeatureMaxFlawSizeCut = 0;
	m_nThickFeatureMaxFlawSizeAdd2 = 0;
	m_nThickFeatureMaxFlawSizeCut2 = 0;
	m_nLayerFeatureMaxFlawSize = 0;
	m_nBadCoupleFeatureMaxFlawSize = 0;
	m_fOutVFeatureMaxFlawGain = 0.0f;
	m_fInVFeatureMaxFlawGain = 0.0f;
	m_fOutHFeatureMaxFlawGain = 0.0f;
	m_fInHFeatureMaxFlawGain = 0.0f;
	m_fThickFeatureMaxFlawGain = 0.0f;
	m_fThickFeatureMinFlawGain = 0.0f;
	m_fThickFeatureMaxFlawGain2 = 0.0f;
	m_fThickFeatureMinFlawGain2 = 0.0f;
	m_fLayerFeatureMax = 0.0f;
	m_fPIPE_LENGTH = PIPE_LENGTH;
	m_ORDER_PARAMETER.nSteelNumber = 0;
	m_ORDER_PARAMETER.nSteelCount = 10;
	bDBorPCT = TRUE;
	g_wStartFlag = 0;
	m_bEncoderMessage = FALSE;
	m_fThickMaxTolerance = 5;
	m_fThickMinTolerance = -5;
	m_fRangeMax = 10;
	m_fRangeMin = -10;
	m_fCurThick = 20;
	m_bRunFlag = FALSE;
	m_strCurrentDataPath.clear();
	m_DataList.clear();
	///////
	QDir *tempDir = new QDir;
	bool exist = tempDir->exists("D:/Data");
	if(!exist)
	{
		tempDir->mkdir("D:/Data");
	}
	///////
	QDir *tempDirPrintScreen = new QDir;
	bool exist2 = tempDir->exists(tr("D:/拷屏文件夹"));
	if(!exist2)
	{
		tempDirPrintScreen->mkdir(tr("D:/拷屏文件夹"));
	}
	///////
	m_DataList = m_FindData.findfile("D:/Data/");
	timer = new QTimer(this);
	timer->start(100);
	m_strFormItem = tr("./Operator.ini");
	connect(m_Ascan.horizontalSliderReFreq,SIGNAL(valueChanged(int)),this,SLOT(WriteReFreq()));

	// 线程参数初始化
	::ZeroMemory(m_stThreadParam, sizeof(AECTHREAD_PARAM)*MAX_CARD_NO);

	for (int i=0; i<MAX_CARD_NO; i++)
	{
		m_stThreadParam[i].wMain2AECThreadCommand = MAIN2AECTHREADCOMMAND_NONE;
	} 

#if _PLX
	// PLX初始化
	BOOL bRet = m_PLXCommunication.Init(m_stThreadParam);
	if (!bRet)
	{
		QMessageBox::warning(NULL,"Error",QObject::tr("PLX初始化失败,请检查任务管理器中是否有管探程序打开!"));
		exit(-1);
		return;
	}
	labelInstrument->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));

	// 	hOPCInitEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	// 	m_OPCComponent.StartThread();
	// 	IUnknown* m_pIServer = NULL;
	// 	m_OPCComponent.CreateComponent(clsOPCServer, IID_IOPCServer, &m_pIServer);
	// 	DWORD ret = ::WaitForSingleObject(hOPCInitEvent,INFINITE);
	// 	ResetEvent(hOPCInitEvent);
	// 	m_pIServer->Release();
	// 	::Sleep(10);
#endif


	int nAECCardNum = m_PLXCommunication.GetAECCardNum();
	hSaveDMADataEvent = CreateEvent(NULL, TRUE, FALSE, NULL);


	for (int i=0; i < nAECCardNum; i++)
	{
 		m_stThreadParam[i + 1].pPLXCommunication = &m_PLXCommunication;
 		m_stThreadParam[i + 1].pAllConfig = m_Ascan.m_stAllCH_CONFIG;
 		m_stThreadParam[i + 1].index = i;
 		m_stThreadParam[i + 1].qObject = this;
		m_stThreadParam[i + 1].wSelChannel = 1;
		m_stThreadParam[i + 1].nFlawOrBottom = 1;
		hThread[i] = (HANDLE)_beginthreadex(NULL,0,AECWorkThreadProc,&m_stThreadParam[i + 1],0,&threadID[i]);
	}

#if _PLX
	ZeroEncipheror();
	m_bPlateStart[0] = TRUE;
#endif
	
	this->UiInit();
	ResetAlarm();
	update();
}

GuanTan::~GuanTan()
{
	if ( m_nTIMER_THREAD_PROCESSId != 0 )
		killTimer(m_nTIMER_THREAD_PROCESSId);
	if ( m_nTIMER_SAVE_DMA_DATA != 0 )
		killTimer(m_nTIMER_SAVE_DMA_DATA);
	if ( m_nTIMER_SAVE_PICTURE != 0 )
		killTimer(m_nTIMER_SAVE_PICTURE);

#if HAVE_OPC
	m_OPCComponent.StopThread();
#endif

}

void GuanTan::Thick1Show()
{
	labelThick1High->show();
	labelThick1HighColor->show();
	labelThick1HighSpace->show();
	labelThick1HighCM->show();
	labelThick1HighMM->show();
	labelThickFeatureNum->show();
	labelThickFeatureSize->show();
	labelThickFeatureMax->show();
	labelThick1Low->show();
	labelThick1LowColor->show();
	labelThick1LowSpace->show();
	labelThick1LowCM->show();
	labelThick1LowMM->show();
	labelThickFeatureNum_2->show();
	labelThickFeatureSize_2->show();
	labelThickFeatureMin->show();
	labelThick2High->hide();
	labelThick2HighColor->hide();
	labelThick2HighSpace->hide();
	labelThick2HighCM->hide();
	labelThick2HighMM->hide();
	labelThickFeatureNum_3->hide();
	labelThickFeatureSize_3->hide();
	labelThickFeatureMax_2->hide();
	labelThick2Low->hide();
	labelThick2LowColor->hide();
	labelThick2LowSpace->hide();
	labelThick2LowCM->hide();
	labelThick2LowMM->hide();
	labelThickFeatureNum_4->hide();
	labelThickFeatureSize_4->hide();
	labelThickFeatureMin_2->hide();
	labelThick1High->setText(tr(" 测厚-增厚"));
	labelThick1Low->setText(tr(" 测厚-减薄"));
}

void GuanTan::Thick2Show()
{
	labelThick1High->hide();
	labelThick1HighColor->hide();
	labelThick1HighSpace->hide();
	labelThick1HighCM->hide();
	labelThick1HighMM->hide();
	labelThickFeatureNum->hide();
	labelThickFeatureSize->hide();
	labelThickFeatureMax->hide();
	labelThick1Low->hide();
	labelThick1LowColor->hide();
	labelThick1LowSpace->hide();
	labelThick1LowCM->hide();
	labelThick1LowMM->hide();
	labelThickFeatureNum_2->hide();
	labelThickFeatureSize_2->hide();
	labelThickFeatureMin->hide();
	labelThick2High->show();
	labelThick2HighColor->show();
	labelThick2HighSpace->show();
	labelThick2HighCM->show();
	labelThick2HighMM->show();
	labelThickFeatureNum_3->show();
	labelThickFeatureSize_3->show();
	labelThickFeatureMax_2->show();
	labelThick2Low->show();
	labelThick2LowColor->show();
	labelThick2LowSpace->show();
	labelThick2LowCM->show();
	labelThick2LowMM->show();
	labelThickFeatureNum_4->show();
	labelThickFeatureSize_4->show();
	labelThickFeatureMin_2->show();
	labelThick2High->setText(tr(" 测厚-增厚"));
	labelThick2Low->setText(tr(" 测厚-减薄"));
}

void GuanTan::Thick12Show()
{
	labelThick1High->show();
	labelThick1HighColor->show();
	labelThick1HighSpace->show();
	labelThick1HighCM->show();
	labelThick1HighMM->show();
	labelThickFeatureNum->show();
	labelThickFeatureSize->show();
	labelThickFeatureMax->show();
	labelThick1Low->show();
	labelThick1LowColor->show();
	labelThick1LowSpace->show();
	labelThick1LowCM->show();
	labelThick1LowMM->show();
	labelThickFeatureNum_2->show();
	labelThickFeatureSize_2->show();
	labelThickFeatureMin->show();
	labelThick2High->show();
	labelThick2HighColor->show();
	labelThick2HighSpace->show();
	labelThick2HighCM->show();
	labelThick2HighMM->show();
	labelThickFeatureNum_3->show();
	labelThickFeatureSize_3->show();
	labelThickFeatureMax_2->show();
	labelThick2Low->show();
	labelThick2LowColor->show();
	labelThick2LowSpace->show();
	labelThick2LowCM->show();
	labelThick2LowMM->show();
	labelThickFeatureNum_4->show();
	labelThickFeatureSize_4->show();
	labelThickFeatureMin_2->show();
	labelThick1High->setText(tr(" 测厚1-增厚"));
	labelThick1Low->setText(tr(" 测厚1-减薄"));
	labelThick2High->setText(tr(" 测厚2-增厚"));
	labelThick2Low->setText(tr(" 测厚2-减薄"));
}

void GuanTan::ActionPrintScreen()
{
	QPixmap pixmap = QPixmap::grabWidget(this);
	QString strPath = QFileDialog::getExistingDirectory(this, tr("选择拷屏路径"), tr("D:/拷屏文件夹/"));	// 拷屏完整路径
	QDateTime time = QDateTime::currentDateTime();															// 当前时间
	QString strTime = time.toString(tr("yyyy-MM-dd-hh-mm-ss-")); 
	QString strFile = labelTestSteelNumber->text();

	if (strFile == "")
	{
		strFile = tr("空钢管号");
	}

	QString strTamp = strPath + "/" + strTime + strFile + tr(".png");
	pixmap.save(strTamp, "png");
}

void GuanTan::ThickDrawTypeChanged()
{
	if (m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->isChecked() && !m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->isChecked())	// 新算法
	{
		m_nThickDrawType = 1;
		Thick1Show();
	}
	else if (m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->isChecked() && !m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->isChecked())
	{
		m_nThickDrawType = 2;	
		Thick2Show();
	}
	else if (m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->isChecked() && m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->isChecked())
	{
		m_nThickDrawType = 3;	
		Thick12Show();
	}
	else								
	{
		m_nThickDrawType = 0;
	}

	if (m_strCurrentDataPath.length() != 0)
	{
		ClearScreen();
		ResetAlarm();
		ReadDataFile(m_strCurrentDataPath);
		update();
	}
}

void GuanTan::AScanAction()
{
	m_Ascan.show();
	m_Ascan.m_bSetOne = true;
}

void GuanTan::GetScreenInfo()
{
	QDesktopWidget* desktopWidget = QApplication::desktop();//获取可用桌面大小
	QRect deskRect = desktopWidget->availableGeometry();//获取设备屏幕大小
	QRect screenRect = desktopWidget->screenGeometry();
	m_nActScreenX = screenRect.width();
	m_nActScreenY = screenRect.height();
	//获取系统设置的屏幕个数(屏幕拷贝方式该值为1)
	m_nScreenCount = desktopWidget->screenCount();
}

void GuanTan::DistributeRegion()	//画图区域分配函数
{
	m_rectHRuler.setRect(widgetHRuler->pos().x(),
		widgetHRuler->rect().top()+widget->rect().height()+widget_2->rect().height(),
		widgetHRuler->rect().width()-35,
		widgetHRuler->rect().height());
	m_rectVRuler_first.setRect(widgetOne->rect().right()-34+289,
		widgetOne->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+3,
		35,
		widgetOne->rect().height());
	m_rectVRuler_second.setRect(widgetTwo->rect().right()-34+289,
		widgetTwo->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+6,
		35,
		widgetTwo->rect().height());
	m_rectVRuler_third.setRect(widgetThree->rect().right()-34+289,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+9,
		35,
		widgetThree->rect().height());
	m_rectVRuler_fourth.setRect(widgetFour->rect().right()-34+289,
		widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+12,
		35,
		widgetFour->rect().height());
	m_rectVRuler_fifth.setRect(widgetFive->rect().right()-34+289,
		widgetFive->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height()+15,
		35,
		widgetFive->rect().height());
	m_rectBlank.setRect(widgetHRuler->rect().right()+289-34,
		widget->rect().height()+widget_2->rect().height(),
		35,
		widgetHRuler->rect().height());
	m_rectWaveSliderDown.setRect(widget_9->rect().left()+widget_4->rect().width()+widgetOne->rect().width()+13,
		widget_9->rect().top()+widget->rect().height()+widget_2->rect().height()+70,
		SLIDER_LENGTH,
		10);
	//壁厚允许最大公差
	m_rectThickMaxTolerance.setRect(widgetThree->rect().right()+267,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+3,
		25,
		10);		
	//壁厚允许最小公差
	m_rectThickMinTolerance.setRect(widgetThree->rect().right()+267,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+8+widgetThree->rect().height()*m_fThickMaxTolerance/m_fRangeMax/2+widgetThree->rect().height()*(-m_fThickMinTolerance)/(-m_fRangeMin)/2-5,
		25,
		10);		
	//测量最大范围
	m_rectRangeMax.setRect(widgetThree->rect().right()+267,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+8,
		25,
		10);				
	//测量最小范围
	m_rectRangeMin.setRect(widgetThree->rect().right()+267,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+8+widgetThree->rect().height()-9,
		25,
		10);				
	//壁厚
	m_rectCurThick.setRect(widgetThree->rect().right()+267,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+3,
		25,
		10);				
	m_rectTitle.setRect(500,150,800,100);				//报表标题
 	m_rectSteelNum.setRect(150,650,250,50);				//钢管编号打印范围
	m_rectSteelLength.setRect(150,550,250,50);			//钢管长度打印范围
	m_rectSteelDia.setRect(850,450,250,50);				//钢管直径打印范围
	m_rectSteelThick.setRect(850,550,250,50);			//钢管壁厚打印范围
	m_rectOperator.setRect(150,450,250,50);				//操作工打印范围
	m_rectSortingResult.setRect(850,650,250,50);		//分选结果打印范围
	m_rectTestStandard.setRect(150,850,300,50);			//超声检测标准打印范围
 	m_rectTestRank.setRect(850,850,300,50);				//超声检测级别打印范围
	m_rectEddyCurrentTestStandard.setRect(150,750,300,50);//涡流检测标准
	m_rectEddyCurrentTestRank.setRect(850,750,300,50);	//涡流检测级别
	m_rectEddyCurrentTestStandard_.setRect(430,750,450,50);//涡流检测标准值
	m_rectEddyCurrentTestRank_.setRect(1130,750,300,50);//涡流检测级别值
	m_rectSoundResult.setRect(550,1530,500,70);			//超声检测结果
	m_rectEddyCurrentResult.setRect(550,950,500,70);	//涡流检测结果
 	m_rectTestTime.setRect(150,750,220,50);				//单根报表检测时间打印范围
	m_rectTestTime1.setRect(150,650,220,50);			//整体报表检测时间打印范围
	m_rectPrintTime.setRect(1150,270,400,50);			//打印时间
	m_rectHRulerSingle.setRect(450,1150,900,100);		//单根报表水平标尺范围
	m_rectOutVFeature.setRect(100,1100,295,50);			//外部纵向缺陷打印范围
 	m_rectInVFeature.setRect(100,1240,295,50);			//内部纵向缺陷打印范围
 	m_rectOutHFeature.setRect(100,1380,295,50);			//外部横向缺陷打印范围
 	m_rectInHFeature.setRect(100,1520,295,50);			//内部横向缺陷打印范围
 	m_rectThickAdd.setRect(100,1660,295,50);			//壁厚减薄打印范围
 	m_rectThickCut.setRect(100,1800,295,50);			//壁厚增厚打印范围
	m_rectLayerFeature.setRect(100,1940,295,50);		//分层缺陷打印范围
 	m_rectBadCoupleFeature.setRect(100,2080,295,50);	//耦合不良打印范围
	m_rectOrderNumber.setRect(150,350,250,50);			//订单编号打印范围
	m_rectSteelCount.setRect(850,350,250,50);			//钢管数量打印范围
	m_rectSteelRank.setRect(850,650,250,50);			//钢管钢级打印范围 
	m_rectAllParameter.setRect(480,1080,260,50);		//涡流件数
	m_rectOrderParameter.setRect(930,1080,260,50);		//涡流件数百分比
	m_rectUltrasoundParameter.setRect(150,1170,260,50);	//涡流总计
	m_rectShowParameter.setRect(150,1260,260,50);		//涡流合格品
	m_rectJudgeParameter.setRect(150,1350,260,50);		//涡流缺陷品
	m_rectTotal.setRect(150,1760,260,50);				//超声总计
	m_rectQualified.setRect(150,1850,260,50);			//超声合格品
	m_rectFeature.setRect(150,1940,260,50);				//超声缺陷品
	m_rectBadCouple.setRect(150,2030,260,50);			//超声耦合不良品
// 	m_rectCount.setRect(500,1680,100,50);				//超声件数(带长度和长度百分比)
// 	m_rectCountPercent.setRect(680,1680,250,50);		//超声件数所占百分比
	m_rectCount.setRect(480,1680,260,50);				//超声件数(不带长度和长度百分比)
	m_rectCountPercent.setRect(930,1680,260,50);		//超声件数所占百分比
	m_rectLength.setRect(1010,1680,100,50);				//超声长度
	m_rectLengthPercent.setRect(1190,1680,250,50);		//超声长度所占百分比
	m_rectName.setRect(1000,2180,250,80);				//签名打印范围

	m_rectOrderNumber_.setRect(360,350,300,50);			//订单编号值打印范围
 	m_rectSteelNum_.setRect(360,650,300,50);			//钢管编号值打印范围
 	m_rectSteelLength_.setRect(360,550,300,50);			//钢管长度值打印范围
 	m_rectSteelDia_.setRect(1060,450,250,50);			//钢管直径值打印范围
	m_rectSteelThick_.setRect(1060,550,250,50);			//钢管壁厚值打印范围
	m_rectSteelCount_.setRect(1060,350,250,50);			//钢管数量值打印范围
	m_rectSteelRank_.setRect(1060,650,250,50);			//钢管钢级值打印范围
	m_rectSingleSteelRank_.setRect(1060,750,250,50);	//单根钢管钢级值打印范围
 	m_rectOperator_.setRect(360,450,250,50);			//操作工值打印范围
	m_rectSortingResult_.setRect(1060,650,250,50);		//分选结果值打印范围
	m_rectTestStandard_.setRect(430,850,450,50);		//检测标准值打印范围
 	m_rectTestRank_.setRect(1130,850,220,50);			//检测级别值打印范围
	m_rectTestTime_.setRect(360,750,220,50);			//单根报表检测时间值打印范围
	m_rectTestTime1_.setRect(360,650,220,50);			//整体报表检测时间值打印范围
	m_rectEddyCurrentTotal_.setRect(480,1170,260,50);	//涡流结果总计
	m_rectEddyCurrentAcNum_.setRect(480,1260,260,50);	//涡流合格品数量
	m_rectEddyCurrentAcPer_.setRect(930,1260,260,50);	//涡流合格品百分比
	m_rectEddyCurrentReNum_.setRect(480,1350,260,50);	//涡流不合格品数量
	m_rectEddyCurrentRePer_.setRect(930,1350,260,50);	//涡流不合格品百分比
// 	m_rectCountTotal_.setRect(500,1760,100,50);			//超声总计件数(带长度和长度百分比)
// 	m_rectCountPercentTotal_.setRect(680,1760,250,50);	//超声总计件数百分比
	m_rectCountTotal_.setRect(480,1760,260,50);			//超声总计件数
	m_rectCountPercentTotal_.setRect(930,1760,260,50);	//超声总计件数百分比
	m_rectLengthTotal_.setRect(1010,1760,100,50);		//超声总计长度
	m_rectLengthPercentTotal_.setRect(1190,1760,250,50);//超声总计长度百分比
// 	m_rectAcCount_.setRect(500,1850,100,50);			//超声合格品件数(带长度和长度百分比)
// 	m_rectAcCountPercent_.setRect(680,1850,250,50);		//超声合格品件数百分比
	m_rectAcCount_.setRect(480,1850,260,50);			//超声合格品件数
	m_rectAcCountPercent_.setRect(930,1850,260,50);		//超声合格品件数百分比
	m_rectAcLength_.setRect(1010,1850,100,50);			//超声合格品长度
	m_rectAcLengthPercent_.setRect(1190,1850,250,50);	//超声合格品长度百分比
// 	m_rectReCount_.setRect(500,1940,100,50);			//超声不合格品件数(带长度和长度百分比)
// 	m_rectReCountPercent_.setRect(680,1940,250,50);		//超声不合格品件数百分比
	m_rectReCount_.setRect(480,1940,260,50);			//超声不合格品件数
	m_rectReCountPercent_.setRect(930,1940,260,50);		//超声不合格品件数百分比
	m_rectReLength_.setRect(1010,1940,100,50);			//超声不合格品长度
	m_rectReLengthPercent_.setRect(1190,1940,250,50);	//超声不合格品长度百分比
// 	m_rectBaCount_.setRect(500,2030,100,50);			//超声耦合不良件数(带长度和长度百分比)
// 	m_rectBaCountPercent_.setRect(680,2030,250,50);		//超声耦合不良件数百分比
	m_rectBaCount_.setRect(480,2030,260,50);			//超声耦合不良件数
	m_rectBaCountPercent_.setRect(930,2030,260,50);		//超声耦合不良件数百分比
	m_rectBaLength_.setRect(1010,2030,100,50);			//超声耦合不良长度
	m_rectBaLengthPercent_.setRect(1190,2030,250,50);	//超声耦合不良长度百分比
}

void GuanTan::toolbar_show()		//工具栏显示函数
{
	widget_17->show();
	pushButton_24->show();
	widget_9->show();
	pushButton_25->show();
	widget_10->show();
	pushButton_26->show();
	pushButton_30->show();
	pushButtonShow->hide();
}

void GuanTan::toolbar_hide()		//工具栏隐藏函数
{
	widget_17->hide();
	pushButton_24->hide();
	widget_9->hide();
	pushButton_25->hide();
	widget_10->hide();
	pushButton_26->hide();
	pushButton_30->hide();
	pushButtonShow->show();
}

void GuanTan::FormSetting()
{
	m_ParameterSetting.show();
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(true);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(true);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
	}
	else
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(false);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(false);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
	}
}
void GuanTan::DefectAlarm(int index, bool alarm)
{
	if (m_bDefectAlarm[index] == alarm)
	{
		return;
	} else {
		m_bDefectAlarm[index] = alarm;
		if (alarm) {
			vecLabelDefect.value(index)->setStyleSheet(QString::fromUtf8("image: url(:/GuanTan/Resources/tantouhong.png);"));
		} else {
			vecLabelDefect.value(index)->setStyleSheet(QString::fromUtf8("image: url(:/GuanTan/Resources/tantoulv.png);"));
		}
	}		
}

void GuanTan::CouplingAlarm(int index, bool alarm)
{
	if (m_bCouplingAlarm[index] == alarm)
	{
		return;
	} else {
		m_bCouplingAlarm[index] = alarm;
		if (alarm) {		
			vecLabelCouple.value(index)->setStyleSheet(QString::fromUtf8("image: url(:/GuanTan/Resources/tantouhong.png);"));
		} else {
			vecLabelCouple.value(index)->setStyleSheet(QString::fromUtf8("image: url(:/GuanTan/Resources/tantoulv.png);"));
		}
	}
}

void GuanTan::ClearAlarm()
{
	for (int i = 0; i < 36; i++)
	{
		DefectAlarm(i, 0);
		CouplingAlarm(i, 0);
	}
}

void GuanTan::UiInit()
{
	GetScreenInfo();
	resize(m_nActScreenX-5,m_nActScreenY-62);
	pushButtonShow->hide();
	m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setChecked(true);
	m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setChecked(false);
	Thick1Show();
	connect(pushButtonShow,SIGNAL(clicked()),SLOT(toolbar_show()));
	connect(pushButtonHide,SIGNAL(clicked()),SLOT(toolbar_hide()));
	connect(pushButtonShowAScan,SIGNAL(clicked()),SLOT(AScanAction()));
	connect(pushButtonFormSetting,SIGNAL(clicked()),SLOT(FormSetting()));
	connect(pushButtonUp,SIGNAL(clicked()),SLOT(LastPipeData()));
	connect(pushButtonOpen,SIGNAL(clicked()),SLOT(OpenPipeData()));
	connect(pushButtonDown,SIGNAL(clicked()),SLOT(NextPipeData()));
	connect(pushButtonHelp,SIGNAL(clicked()),SLOT(HelpAction()));
	connect(spinBoxLeftPart, SIGNAL(valueChanged(int)), this, SLOT(LeftPartUpdate()));
	connect(spinBoxRightPart, SIGNAL(valueChanged(int)), this, SLOT(RightPartUpdate()));
	spinBoxLeftPart->setRange(0,m_fPIPE_LENGTH-PIPE_MIN_SHOW_LENGTH);
	spinBoxLeftPart->setValue(0);
	spinBoxRightPart->setRange(PIPE_MIN_SHOW_LENGTH,m_fPIPE_LENGTH);
	spinBoxRightPart->setValue(m_fPIPE_LENGTH);
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonDeadZone,SIGNAL(clicked()),this,SLOT(DeadZoneShow()));//盲区设置窗口
	connect(m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(DeadZoneYes()));//盲区确定
	connect(m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(DeadZoneNo()));//盲区取消
	connect(m_ParameterSetting.ui.pushButtonOrderOpen,SIGNAL(clicked()),this,SLOT(OrderOpen()));
	connect(m_ParameterSetting.ui.pushButtonJudgeOpen,SIGNAL(clicked()),this,SLOT(JudgeOpen()));
	connect(m_ParameterSetting.ui.pushButtonUltrasoundOpen,SIGNAL(clicked()),this,SLOT(UltrasoundOpen()));
	connect(m_ParameterSetting.ui.pushButtonShowOpen,SIGNAL(clicked()),this,SLOT(ShowOpen()));
	connect(m_ParameterSetting.ui.pushButtonOrderDo,SIGNAL(clicked()),this,SLOT(OrderDo()));
	connect(m_ParameterSetting.ui.pushButtonUltrasoundDo,SIGNAL(clicked()),this,SLOT(UltrasoundDo()));
	connect(m_ParameterSetting.ui.pushButtonShowDo,SIGNAL(clicked()),this,SLOT(ShowDo()));
	connect(m_ParameterSetting.ui.pushButtonJudgeDo,SIGNAL(clicked()),this,SLOT(JudgeDo()));
	connect(m_ParameterSetting.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(AllParameterYes()));
	connect(m_ParameterSetting.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(AllParameterNo()));
	connect(m_ParameterSetting.ui.pushButtonSaveAs,SIGNAL(clicked()),this,SLOT(AllParameterSaveAs()));
	connect(m_ParameterSetting.ui.pushButtonAllDo,SIGNAL(clicked()),this,SLOT(AllParameterDo()));
	connect(m_ParameterSetting.ui.pushButtonSend,SIGNAL(clicked()),this,SLOT(WriteEddyCurrent()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(OrderParameterYes()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(OrderParameterNo()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonSaveAs,SIGNAL(clicked()),this,SLOT(OrderParameterSaveAs()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonDiaAdd,SIGNAL(clicked()),this,SLOT(OrderDiaAdd()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonDiaCut,SIGNAL(clicked()),this,SLOT(OrderDiaCut()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonLengthAdd,SIGNAL(clicked()),this,SLOT(OrderLengthAdd()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonLengthCut,SIGNAL(clicked()),this,SLOT(OrderLengthCut()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonPlyAdd,SIGNAL(clicked()),this,SLOT(OrderPlyAdd()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonPlyCut,SIGNAL(clicked()),this,SLOT(OrderPlyCut()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonRunkAdd,SIGNAL(clicked()),this,SLOT(OrderRankAdd()));
	connect(m_ParameterSetting.m_OrderParameter.ui.pushButtonRunkCut,SIGNAL(clicked()),this,SLOT(OrderRankCut()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(UltrasoundParameterYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(UltrasoundParameterNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonSaveAs,SIGNAL(clicked()),this,SLOT(UltrasoundParameterSaveAs()));
	connect(m_ParameterSetting.m_ShowParameter.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(ShowParameterYes()));
	connect(m_ParameterSetting.m_ShowParameter.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(ShowParameterNo()));
	connect(m_ParameterSetting.m_ShowParameter.ui.pushButtonSaveAs,SIGNAL(clicked()),this,SLOT(ShowParameterSaveAs()));
	connect(m_ParameterSetting.m_JudgeParameter.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(JudgeParameterYes()));
	connect(m_ParameterSetting.m_JudgeParameter.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(JudgeParameterNo()));
	connect(m_ParameterSetting.m_JudgeParameter.ui.pushButtonSaveAs,SIGNAL(clicked()),this,SLOT(JudgeParameterSaveAs()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonGain,SIGNAL(clicked()),this,SLOT(GainShow()));//超声参数各界面	>|
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonCGain,SIGNAL(clicked()),this,SLOT(CGainShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonSoundSpeed,SIGNAL(clicked()),this,SLOT(SoundSpeedShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonBurstDelay,SIGNAL(clicked()),this,SLOT(BurstDelayShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonGateSet,SIGNAL(clicked()),this,SLOT(GateSetShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonBandWidth,SIGNAL(clicked()),this,SLOT(WidthShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonMeasureMode,SIGNAL(clicked()),this,SLOT(JudgeShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonStaNoise,SIGNAL(clicked()),this,SLOT(StaNoiseShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonReFreq,SIGNAL(clicked()),this,SLOT(ReFreqShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonImpedanceSet,SIGNAL(clicked()),this,SLOT(ImpedanceSetShow()));
	connect(m_ParameterSetting.m_UltrasoundParameter.ui.pushButtonProbeSet,SIGNAL(clicked()),this,SLOT(ProbeSetShow()));//		|<
	connect(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(BurstDelayYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(BurstDelayNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(CGainYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(CGainNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(GainYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(GainNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(GateSetYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(GateSetNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(ImpedanceSetYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(ImpedanceSetNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(JudgeYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(JudgeNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(ProbeSetYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(ProbeSetNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(ReFreqYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(ReFreqNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(SoundSpeedYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(SoundSpeedNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(StaNoiseYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(StaNoiseNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(WidthYes()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.pushButtonNo,SIGNAL(clicked()),this,SLOT(WidthNo()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10,SIGNAL(clicked()),this,SLOT(StaNoiseCheck1_12()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20,SIGNAL(clicked()),this,SLOT(StaNoiseCheck13_24()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30,SIGNAL(clicked()),this,SLOT(StaNoiseCheck25_36()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12,SIGNAL(clicked()),this,SLOT(GateSetCheck1_12()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24,SIGNAL(clicked()),this,SLOT(GateSetCheck13_24()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36,SIGNAL(clicked()),this,SLOT(GateSetCheck25_36()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10,SIGNAL(clicked()),this,SLOT(JudgeCheck1_12()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20,SIGNAL(clicked()),this,SLOT(JudgeCheck13_24()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30,SIGNAL(clicked()),this,SLOT(JudgeCheck25_36()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAllI,SIGNAL(clicked()),this,SLOT(GateSetAllI()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAllA,SIGNAL(clicked()),this,SLOT(GateSetAllA()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAllB,SIGNAL(clicked()),this,SLOT(GateSetAllB()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAllI2,SIGNAL(clicked()),this,SLOT(GateSetAllI2()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAnyI,SIGNAL(clicked()),this,SLOT(GateSetAnyI()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAnyA,SIGNAL(clicked()),this,SLOT(GateSetAnyA()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAnyB,SIGNAL(clicked()),this,SLOT(GateSetAnyB()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.pushButtonAnyI2,SIGNAL(clicked()),this,SLOT(GateSetAnyI2()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAllI,SIGNAL(clicked()),this,SLOT(StaNoiseAllI()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAllA,SIGNAL(clicked()),this,SLOT(StaNoiseAllA()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAllB,SIGNAL(clicked()),this,SLOT(StaNoiseAllB()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAllI2,SIGNAL(clicked()),this,SLOT(StaNoiseAllI2()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAnyI,SIGNAL(clicked()),this,SLOT(StaNoiseAnyI()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAnyA,SIGNAL(clicked()),this,SLOT(StaNoiseAnyA()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAnyB,SIGNAL(clicked()),this,SLOT(StaNoiseAnyB()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.pushButtonAnyI2,SIGNAL(clicked()),this,SLOT(StaNoiseAnyI2()));

	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAllI,SIGNAL(clicked()),this,SLOT(JudgeAllI()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAllA,SIGNAL(clicked()),this,SLOT(JudgeAllA()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAllB,SIGNAL(clicked()),this,SLOT(JudgeAllB()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAllI2,SIGNAL(clicked()),this,SLOT(JudgeAllI2()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAnyI,SIGNAL(clicked()),this,SLOT(JudgeAnyI()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAnyA,SIGNAL(clicked()),this,SLOT(JudgeAnyA()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAnyB,SIGNAL(clicked()),this,SLOT(JudgeAnyB()));
	connect(m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.pushButtonAnyI2,SIGNAL(clicked()),this,SLOT(JudgeAnyI2()));
	connect(pushButtonFormItem,SIGNAL(clicked()),this,SLOT(FormItemSet()));
	connect(m_Ascan.pushButtonAScanSave,SIGNAL(clicked()),this,SLOT(AScanSave()));
//	connect(m_FormItem.m_FormOffLine.ui.pushButtonSingle,SIGNAL(clicked()),this,SLOT(PrintSingle()));
	connect(m_FormItem.m_FormOffLine.ui.pushButtonSingle,SIGNAL(clicked()),this,SLOT(filePrintPreviewSingle()));
//	connect(m_FormItem.m_FormOffLine.ui.pushButtonWhole,SIGNAL(clicked()),this,SLOT(PrintWhole()));  
	connect(m_FormItem.m_FormOffLine.ui.pushButtonWhole,SIGNAL(clicked()),this,SLOT(filePrintPreviewWhole()));  
	connect(m_FormItem.ui.pushButtonYes,SIGNAL(clicked()),this,SLOT(FormItemYes()));
	connect(timer,SIGNAL(timeout()),this,SLOT(DateTimeUpdate()));
	connect(pushButtonOperator,SIGNAL(clicked()),this,SLOT(UserManagementShow()));
	connect(m_FormItem.m_FormOffLine.ui.pushButtonPainter,SIGNAL(clicked()),this,SLOT(PrintScreen()));

	connect(m_FormItem.ui.pushButtonOperatorAdd,SIGNAL(clicked()),this,SLOT(FormItemOperatorAdd()));	//报表操作工添加
	connect(m_FormItem.ui.pushButtonOperatorDel,SIGNAL(clicked()),this,SLOT(FormItemOperatorCut()));	//报表操作工删除
	connect(m_FormItem.ui.pushButtonClasseAdd,SIGNAL(clicked()),this,SLOT(FormItemShiftAdd()));			//报表班次添加
	connect(m_FormItem.ui.pushButtonClasseDel,SIGNAL(clicked()),this,SLOT(FormItemShiftCut()));			//报表班次删除
	connect(m_FormItem.ui.pushButtonStandardAdd,SIGNAL(clicked()),this,SLOT(FormItemStandardAdd()));	//报表检测标准添加
	connect(m_FormItem.ui.pushButtonStandardDel,SIGNAL(clicked()),this,SLOT(FormItemStandardCut()));	//报表检测标准删除
	connect(m_FormItem.ui.pushButtonRankAdd,SIGNAL(clicked()),this,SLOT(FormItemRankAdd()));			//报表检测级别添加
	connect(m_FormItem.ui.pushButtonRankDel,SIGNAL(clicked()),this,SLOT(FormItemRankCut()));			//报表检测级别删除
	connect(m_FormItem.ui.pushButtonIn,SIGNAL(clicked()),this,SLOT(FormItemCurSteelNumber()));			//设置即将检测的的钢管编号
	connect(pushButtonFormItem,SIGNAL(clicked()),this,SLOT(FormItemTestRankUpdate()));					//报表界面打开-检测级别更新
	connect(m_FormItem.ui.comboBoxTestStandard,SIGNAL(activated(int)),this,SLOT(FormItemTestRankUpdate()));//检测标准更改-检测级别更新
	connect(pushButtonPrintScreen, SIGNAL(clicked()), this, SLOT(ActionPrintScreen()));
	connect(&g_DataMonitor, SIGNAL(AScanDataChanged()), &m_Ascan, SLOT(update()));
	connect(&g_DataMonitor, SIGNAL(CScanDataChanged()), this, SLOT(update()));
	connect(&g_DataMonitor, SIGNAL(AScanCDataChanged()), &m_Ascan, SLOT(UpdateCData()));
	LeftPartUpdate();
	RightPartUpdate();
}

void GuanTan::mousePressEvent(QMouseEvent *e)
{
	if (e->button()==Qt::LeftButton)
	{
		QPoint pos = e->pos();
		if (pos.x()>=(m_rectWaveSliderUp.left()-2)&&pos.x()<=(m_rectWaveSliderUp.left()+2)&&pos.y()>=(m_rectWaveSliderUp.top()-5)&&pos.y()<=(m_rectWaveSliderUp.bottom()+5))
		{
			m_bSliderLeftPressed = true;
			m_bSliderLeftPresse = true;
			startPnt = pos;
			pLeftTop = QPoint(m_rectWaveSliderUp.left(),m_rectWaveSliderUp.top());
			pRightBottom = QPoint(m_rectWaveSliderUp.right(),m_rectWaveSliderUp.bottom());
		}
		else if (pos.x()>=(m_rectWaveSliderUp.right()-2)&&pos.x()<=(m_rectWaveSliderUp.right()+2)&&pos.y()>=(m_rectWaveSliderUp.top()-5)&&pos.y()<=(m_rectWaveSliderUp.bottom()+5))
		{
			m_bSliderRightPresse = true;
			m_bSliderRightPressed = true;
			startPnt = pos;
			pLeftTop = QPoint(m_rectWaveSliderUp.left(),m_rectWaveSliderUp.top());
			pRightBottom = QPoint(m_rectWaveSliderUp.right(),m_rectWaveSliderUp.bottom());
		}
		else if (pos.x()>m_rectWaveSliderUp.left()+2 && pos.x()<m_rectWaveSliderUp.right()-2 && pos.y()>=m_rectWaveSliderUp.top() && pos.y()<=m_rectWaveSliderUp.bottom())
		{
			m_bSliderPressed = true;
			m_bSliderPresse = true;
			m_dRectWidth = (m_dProportionRight-m_dProportionLeft)*345;
			startPnt = pos;
			setCursor(Qt::ClosedHandCursor);
		}
		else
		{
			m_bSliderLeftPressed = false;
			m_bSliderRightPressed = false;
			m_bSliderPressed = false;
		}
	}
}
void GuanTan::mouseMoveEvent(QMouseEvent *e)
{
	QPoint pos = e->pos();
	//纵伤属性
	if ( (pos.x() >= widgetOne->pos().x()) 
		&& (pos.x() <= widgetOne->pos().x() + widgetOne->rect().width() - 35)
		&& (pos.y() >= widgetOne->pos().y())
		&& (pos.y() <= widgetOne->pos().y() + widgetOne->rect().height()))
	{
		double dx = (double)(pos.x() - widgetOne->pos().x()) / (widgetOne->rect().width() - 35) * (m_dProportionRight*m_fPIPE_LENGTH - m_dProportionLeft*m_fPIPE_LENGTH) + m_dProportionLeft*m_fPIPE_LENGTH;
		double dy = (1 - ((double)pos.y() - (double)widgetOne->pos().y()) / (double)widgetOne->rect().height()) * 100;
		QString str1 = QString::number(dx,'f',0);
		QString str2 = QString::number(dy,'f',2); 
		pushButton_19->setText(tr("纵伤位置：") + str1 + tr("mm   比例：") + str2 + tr("%"));
	}
	//横伤属性
	if ( (pos.x() >= widgetTwo->pos().x()) 
		&& (pos.x() <= widgetTwo->pos().x() + widgetTwo->rect().width() - 35)
		&& (pos.y() >= widgetTwo->pos().y())
		&& (pos.y() <= widgetTwo->pos().y() + widgetTwo->rect().height()))
	{
		double dx = (double)(pos.x() - widgetTwo->pos().x()) / (widgetTwo->rect().width() - 35) * (m_dProportionRight*m_fPIPE_LENGTH - m_dProportionLeft*m_fPIPE_LENGTH) + m_dProportionLeft*m_fPIPE_LENGTH;
		double dy = (1 - ((double)pos.y() - (double)widgetTwo->pos().y()) / (double)widgetTwo->rect().height()) * 100;
		QString str1 = QString::number(dx,'f',0);
		QString str2 = QString::number(dy,'f',2); 
		pushButton_19->setText(tr("横伤位置：") + str1 + tr("mm   比例：") + str2 + tr("%"));
	}
	//壁厚属性
	if ( (pos.x() >= widgetThree->pos().x()) 
		&& (pos.x() <= widgetThree->pos().x() + widgetThree->rect().width() - 35)
		&& (pos.y() >= widgetThree->pos().y())
		&& (pos.y() <= widgetThree->pos().y() + widgetThree->rect().height()))
	{
		double dx = (double)(pos.x() - widgetThree->pos().x()) / (widgetThree->rect().width() - 35) * (m_dProportionRight*m_fPIPE_LENGTH - m_dProportionLeft*m_fPIPE_LENGTH) + m_dProportionLeft*m_fPIPE_LENGTH;
		double dy = (1 - ((double)pos.y() - (double)widgetThree->pos().y()) / (double)widgetThree->rect().height()) * (m_fRangeMax - m_fRangeMin) + m_fCurThick + m_fRangeMin;
		QString str1 = QString::number(dx,'f',0);
		QString str2 = QString::number(dy,'f',2); 
		pushButton_19->setText(tr("壁厚位置：") + str1 + tr("mm   壁厚：") + str2 + tr("mm"));
	}
	//分层属性
	if ( (pos.x() >= widgetFour->pos().x()) 
		&& (pos.x() <= widgetFour->pos().x() + widgetFour->rect().width() - 35)
		&& (pos.y() >= widgetFour->pos().y())
		&& (pos.y() <= widgetFour->pos().y() + widgetFour->rect().height()))
	{
		double dx = (double)(pos.x() - widgetFour->pos().x()) / (widgetFour->rect().width() - 35) * (m_dProportionRight*m_fPIPE_LENGTH - m_dProportionLeft*m_fPIPE_LENGTH) + m_dProportionLeft*m_fPIPE_LENGTH;
		double dy = (1 - ((double)pos.y() - (double)widgetFour->pos().y()) / (double)widgetFour->rect().height()) * 100;
		QString str1 = QString::number(dx,'f',0);
		QString str2 = QString::number(dy,'f',2); 
		pushButton_19->setText(tr("分层位置：") + str1 + tr("mm   比例：") + str2 + tr("%"));
	}
	//耦合不良属性
	if ( (pos.x() >= widgetFive->pos().x()) 
		&& (pos.x() <= widgetFive->pos().x() + widgetFive->rect().width() - 35)
		&& (pos.y() >= widgetFive->pos().y())
		&& (pos.y() <= widgetFive->pos().y() + widgetFive->rect().height()))
	{
		double dx = (double)(pos.x() - widgetFive->pos().x()) / (widgetFive->rect().width() - 35) * (m_dProportionRight*m_fPIPE_LENGTH - m_dProportionLeft*m_fPIPE_LENGTH) + m_dProportionLeft*m_fPIPE_LENGTH;
		QString str1 = QString::number(dx,'f',0);
		pushButton_19->setText(tr("耦合不良位置：") + str1 + tr("mm"));
	}
	if (!g_wStartFlag)
	{
		QPoint pos = e->pos();
		if (!(m_bSliderLeftPresse||m_bSliderRightPresse||m_bSliderPresse))
		{
			if ((pos.x()>=(m_rectWaveSliderUp.left()-2)&&pos.x()<=(m_rectWaveSliderUp.left()+2)&&pos.y()>=(m_rectWaveSliderUp.top()-5)&&pos.y()<=(m_rectWaveSliderUp.bottom()+5))||(pos.x()>=(m_rectWaveSliderUp.right()-2)&&pos.x()<=(m_rectWaveSliderUp.right()+2)&&pos.y()>=(m_rectWaveSliderUp.top()-5)&&pos.y()<=(m_rectWaveSliderUp.bottom()+5)))
			{
				setCursor(Qt::SizeHorCursor);
			}
			else if (pos.x()>m_rectWaveSliderUp.left()+2&&pos.y()>=m_rectWaveSliderUp.top()&&pos.y()<=m_rectWaveSliderUp.bottom()&&pos.x()<=m_rectWaveSliderUp.right()-2)
			{
				setCursor(Qt::OpenHandCursor);
			}
			else
				setCursor(Qt::ArrowCursor);
		}
		else if (m_bSliderLeftPresse && m_bSliderLeftPressed)
		{
			QPoint sub = e->pos() - startPnt;
			if ((double)((pLeftTop+sub).x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH >= 0.00 && (double)(pRightBottom.x()-(pLeftTop+sub).x())/SLIDER_LENGTH >= 200/m_fPIPE_LENGTH)
			{
				pLeftTop = pLeftTop+sub;
				m_rectWaveSliderUp.setLeft(pLeftTop.x());
				m_rectWaveSliderUp.setRight(pRightBottom.x());
				m_dProportionLeft = (double)(pLeftTop.x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH;
				spinBoxLeftPart->setValue(m_dProportionLeft*m_fPIPE_LENGTH);
			}
			else if ((double)((pLeftTop+sub).x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH <= 0.00)//智能靠边
			{
				m_rectWaveSliderUp.setLeft(m_rectWaveSliderDown.left());
				m_rectWaveSliderUp.setRight(pRightBottom.x());
				m_dProportionLeft = 0.00;
				spinBoxLeftPart->setValue(m_dProportionLeft*m_fPIPE_LENGTH);
			}
			startPnt=e->pos();
		}
		else if (m_bSliderRightPresse && m_bSliderRightPressed)
		{
			QPoint sub = e->pos() - startPnt;
			if ((double)((pRightBottom+sub).x()-pLeftTop.x())/SLIDER_LENGTH >= 200/m_fPIPE_LENGTH && (double)((pRightBottom+sub).x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH <= 1.00)
			{
				pRightBottom = pRightBottom+sub;
				m_rectWaveSliderUp.setLeft(pLeftTop.x());
				m_rectWaveSliderUp.setRight(pRightBottom.x());
				m_dProportionRight = (double)(pRightBottom.x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH;
				spinBoxRightPart->setValue(m_dProportionRight*m_fPIPE_LENGTH);
			}
			else if ((double)((pRightBottom+sub).x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH >= 1.0)//智能靠边
			{
				m_rectWaveSliderUp.setLeft(pLeftTop.x());
				m_rectWaveSliderUp.setRight(m_rectWaveSliderDown.right());
				m_dProportionRight = 1.00;
				spinBoxRightPart->setValue(m_dProportionRight*m_fPIPE_LENGTH);
			}
			startPnt=e->pos();
		}
		else if (m_bSliderPresse && m_bSliderPressed)
		{
			QPoint sub = e->pos() - startPnt;
			pLeftTop = QPoint(m_rectWaveSliderUp.left(),m_rectWaveSliderUp.top());
			pRightBottom = QPoint(m_rectWaveSliderUp.right(),m_rectWaveSliderUp.bottom());
			if ((double)((pLeftTop+sub).x()-m_rectWaveSliderDown.left()) / SLIDER_LENGTH >= 0.0 && (double)((pRightBottom+sub).x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH <= 1.0 && (pLeftTop+sub).x()>=m_rectWaveSliderDown.left() && (pRightBottom+sub).x()<=m_rectWaveSliderDown.right())
			{
				pLeftTop = pLeftTop+sub;
				m_rectWaveSliderUp.setLeft(pLeftTop.x());
				m_rectWaveSliderUp.setWidth(m_dRectWidth);
				m_dProportionLeft = (double)(pLeftTop.x()-m_rectWaveSliderDown.left())/SLIDER_LENGTH;
				m_dProportionRight = m_dProportionLeft+m_dRectWidth/345.0;
				spinBoxLeftPart->setValue(m_dProportionLeft*m_fPIPE_LENGTH);
				spinBoxRightPart->setValue(m_dProportionRight*m_fPIPE_LENGTH);
			}
			startPnt=e->pos();
		}
		update();
	}
}
void GuanTan::mouseReleaseEvent(QMouseEvent *e)
{
	m_bSliderLeftPresse = false;
	m_bSliderRightPresse = false;
	m_bSliderPresse = false;
	setCursor(Qt::ArrowCursor);
}

void GuanTan::paintEvent(QPaintEvent *event)
{
 	QPainter painter(this);
	painter.setPen(Qt::black);
 	QBrush brush_black(Qt::black);     // 画刷
	QBrush brush_pink(QColor(244,159,144));
	QBrush brush_white(Qt::white);
	//纵向缺陷区域
	painter.setBrush(brush_pink);
	QRect rectWave_first_top(widgetOne->rect().left() + 289,
		widgetOne->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height() + 2,
		widgetHRuler->rect().width() - 35,
		widgetOne->rect().height()/2 + 1);
	painter.drawRect(rectWave_first_top);
 	painter.setBrush(brush_black);            
 	QRect rectWave_first_bottom(widgetOne->rect().left() + 289,
		widgetOne->rect().bottom()-widgetOne->rect().height()/2+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height() + 3,
		widgetHRuler->rect().width()-35,
		widgetOne->rect().height()/2 + 2);
	painter.drawRect(rectWave_first_bottom);
 	//横向缺陷区域
	painter.setBrush(brush_pink);
	QRect rectWave_second_top(widgetTwo->rect().left()+289,
		widgetTwo->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+5,
		widgetTwo->rect().width()-35,
		widgetTwo->rect().height()/2+1);
	painter.drawRect(rectWave_second_top);
	painter.setBrush(brush_black);            
	QRect rectWave_second_bottom(widgetTwo->rect().left()+289,
		widgetTwo->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()/2+6,
		widgetTwo->rect().width()-35,
		widgetTwo->rect().height()/2+1);
	painter.drawRect(rectWave_second_bottom);
	//壁厚缺陷区域
	painter.setBrush(brush_pink);
	QRect rectWave_third_top(widgetThree->rect().left()+289,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+8,
		widgetThree->rect().width()-35,
		widgetThree->rect().height()+1);
	painter.drawRect(rectWave_third_top);
	painter.setBrush(brush_black);            // 设置画刷
	QRect rectWave_third_middle(widgetThree->rect().left()+289,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+8,
		widgetThree->rect().width()-35,
		widgetThree->rect().height()*m_fThickMaxTolerance/m_fRangeMax/2+widgetThree->rect().height()*(-m_fThickMinTolerance)/(-m_fRangeMin)/2);
	painter.drawLine(widgetThree->rect().right()+255,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+8,
		widgetThree->rect().right()+255+10,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+8);
	painter.drawRect(rectWave_third_middle);
	//分层缺陷区域
	painter.setBrush(brush_pink);
	QRect rectWave_fourth_top(widgetFour->rect().left()+289,
		widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+11,
		widgetFour->rect().width()-35,
		widgetFour->rect().height()/2+1);
	painter.drawRect(rectWave_fourth_top);
	painter.setBrush(brush_black);            // 设置画刷
	QRect rectWave_fourth_bottom(widgetFour->rect().left()+289,
		widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height()/2+12,
		widgetFour->rect().width()-35,
		widgetFour->rect().height()/2+1);
	painter.drawRect(rectWave_fourth_bottom);
	//耦合不良区域
	painter.setBrush(brush_black);            // 设置画刷
	QRect rectWave_fifth(widgetFive->rect().left()+289,
		widgetFive->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height()+14,
		widgetFive->rect().width()-35,
		widgetFive->rect().height()+1);
	painter.drawRect(rectWave_fifth);
	painter.setBrush(brush_black);            // 设置画刷
	painter.drawRect(m_rectWaveSliderDown);
	painter.setBrush(brush_white);
	painter.drawRect(m_rectWaveSliderUp);
	painter.setPen(Qt::white);
	painter.drawLine(m_rectWaveSliderUp.left(),m_rectWaveSliderUp.top()-5,m_rectWaveSliderUp.left(),m_rectWaveSliderUp.bottom()+5);
	painter.drawLine(m_rectWaveSliderUp.right(),m_rectWaveSliderUp.top()-5,m_rectWaveSliderUp.right(),m_rectWaveSliderUp.bottom()+5);
	
	painter.setBrush(brush_white);
 	painter.drawRect(m_rectHRuler);
	painter.drawRect(m_rectVRuler_first);
 	painter.drawRect(m_rectVRuler_second);
 	painter.drawRect(m_rectVRuler_third);
 	painter.drawRect(m_rectVRuler_fourth);
 	painter.drawRect(m_rectVRuler_fifth);
	painter.drawRect(m_rectBlank);
	painter.setPen(Qt::black);
	//当前壁厚线
	painter.drawLine(widgetThree->rect().right()+255,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+8,
		widgetThree->rect().right()+255+10,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+8);
	painter.drawText(m_rectCurThick,Qt::AlignLeft,QString::number(m_fCurThick));
	//壁厚允许最大公差线
	painter.drawLine(widgetThree->rect().right()+255,
		(int)(widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+8),
		widgetThree->rect().right()+255+10,
		(int)(widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+8));
	painter.drawText(m_rectThickMaxTolerance,Qt::AlignLeft,QString::number(m_fThickMaxTolerance+m_fCurThick));
	//壁厚允许最小公差线
	painter.drawLine(widgetThree->rect().right()+255,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+8+widgetThree->rect().height()*m_fThickMaxTolerance/m_fRangeMax/2+widgetThree->rect().height()*(-m_fThickMinTolerance)/(-m_fRangeMin)/2,
		widgetThree->rect().right()+255+10,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()*(m_fRangeMax-m_fThickMaxTolerance)/m_fRangeMax/2+8+widgetThree->rect().height()*m_fThickMaxTolerance/m_fRangeMax/2+widgetThree->rect().height()*(-m_fThickMinTolerance)/(-m_fRangeMin)/2);
	painter.drawText(m_rectThickMinTolerance,Qt::AlignLeft,QString::number(m_fThickMinTolerance+m_fCurThick));
	//最小范围线
	painter.drawLine(widgetThree->rect().right()+255,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+8+widgetThree->rect().height(),
		widgetThree->rect().right()+255+10,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+8+widgetThree->rect().height());
	painter.drawText(m_rectRangeMin,Qt::AlignLeft,QString::number(m_fRangeMin+m_fCurThick));
	//最大范围线
	painter.drawLine(widgetThree->rect().right()+255,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+9,
		widgetThree->rect().right()+255+10,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+9);
	painter.drawText(m_rectRangeMax,Qt::AlignLeft,QString::number(m_fRangeMax+m_fCurThick));

	painter.setPen(QColor(Qt::white));			//壁厚线
	painter.drawLine(widgetThree->rect().left()+289,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+8,
		widgetThree->rect().left()+289+widgetThree->rect().right()-35,
		widgetThree->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()/2+8);

 	DrawHRuler(m_rectHRuler,m_nLeftPart,m_nRightPart,(m_nRightPart-m_nLeftPart)/15,1,0);
	if (bDBorPCT)
	{
		DrawVRuler(m_rectVRuler_first,0,100,20,0,1);
		DrawVRuler(m_rectVRuler_second,0,100,20,0,1);
		DrawVRuler(m_rectVRuler_fourth,0,100,20,0,1);
	}
	else
	{
		DrawVRuler(m_rectVRuler_first,0,100,40,0,1);
		DrawVRuler(m_rectVRuler_second,0,100,40,0,1);
		DrawVRuler(m_rectVRuler_third,0,100,40,0,1);
		DrawVRuler(m_rectVRuler_fourth,0,100,40,0,1);
	}
	
	QRect rectVFeature(widgetOne->rect().left() + 289,widgetOne->rect().top() + widget->rect().height() + widget_2->rect().height() + 35 + 3,widgetOne->rect().width() - 35,widgetOne->rect().height());
	QRect rectHFeature(widgetTwo->rect().left() + 289,widgetTwo->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + 6,widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QRect rectThickFeature(widgetThree->rect().left() + 289,widgetThree->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + widgetTwo->rect().height() + 9,widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QRect rectLayerFeature(widgetFour->rect().left()+289,widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+12,widgetFour->rect().width()-35,widgetFour->rect().height());
	QRect rectBadCoupleFeature(widgetFive->rect().left()+289,widgetFive->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height()+15,widgetFive->rect().width()-35,widgetFive->rect().height());

	if (nPaintEvnetTime == 1)
	{
		ptOutVFeatureStartPoint.setX(0);
		ptOutVFeatureStartPoint.setY(rectVFeature.height());
		ptInVFeatureStartPoint.setX(0);
		ptInVFeatureStartPoint.setY(rectVFeature.height());
		ptOutHFeatureStartPoint.setX(0);
		ptOutHFeatureStartPoint.setY(rectHFeature.height());
		ptInHFeatureStartPoint.setX(0);
		ptInHFeatureStartPoint.setY(rectHFeature.height());
		ptThickFeatureStartPoint.setX(0);
		ptThickFeatureStartPoint.setY(rectThickFeature.height());
		ptLayerFeatureStartPoint.setX(0);
		ptLayerFeatureStartPoint.setY(rectLayerFeature.height());
		ptBadCoupleFeatureStartPoint.setX(0);
        ptBadCoupleFeatureStartPoint.setY(rectBadCoupleFeature.height());

		bmpVFeature = QPixmap(rectVFeature.size()); 
		bmpVFeature.fill(Qt::transparent);
		bmpHFeature = QPixmap(rectHFeature.size()); 
		bmpHFeature.fill(Qt::transparent);
		bmpThickFeature = QPixmap(rectThickFeature.size()); 
		bmpThickFeature.fill(Qt::transparent);
		bmpLayerFeature = QPixmap(rectLayerFeature.size());
		bmpLayerFeature.fill(Qt::transparent);
		bmpBadCoupleFeature = QPixmap(rectBadCoupleFeature.size());
        bmpBadCoupleFeature.fill(Qt::transparent);

		nPaintEvnetTime--;
	}
    if (g_wStartFlag)
    {
	    DrawFeatureInfo();
    }
	QPainter painter1(this);
	painter1.drawPixmap(rectVFeature,bmpVFeature,QRectF(m_nLeftPart/m_fPIPE_LENGTH * rectVFeature.width(),0,(m_nRightPart - m_nLeftPart)/m_fPIPE_LENGTH * rectVFeature.width(),rectVFeature.height()));
	painter1.drawPixmap(rectHFeature,bmpHFeature,QRectF(m_nLeftPart/m_fPIPE_LENGTH * rectHFeature.width(),0,(m_nRightPart - m_nLeftPart)/m_fPIPE_LENGTH * rectHFeature.width(),rectHFeature.height()));
	painter1.drawPixmap(rectThickFeature,bmpThickFeature,QRectF(m_nLeftPart/m_fPIPE_LENGTH * rectThickFeature.width(),0,(m_nRightPart - m_nLeftPart)/m_fPIPE_LENGTH * rectThickFeature.width(),rectThickFeature.height()));
	painter1.drawPixmap(rectLayerFeature,bmpLayerFeature,QRectF(m_nLeftPart/m_fPIPE_LENGTH * rectLayerFeature.width(),0,(m_nRightPart - m_nLeftPart)/m_fPIPE_LENGTH * rectLayerFeature.width(),rectLayerFeature.height()));
	painter1.drawPixmap(rectBadCoupleFeature,bmpBadCoupleFeature,QRectF(m_nLeftPart/m_fPIPE_LENGTH * rectBadCoupleFeature.width(),0,(m_nRightPart - m_nLeftPart)/m_fPIPE_LENGTH * rectBadCoupleFeature.width(),rectBadCoupleFeature.height()));

// 	void QPainter::drawPixmap ( int x, int y, const QPixmap & pixmap, int sx = 0, int sy = 0, int sw = -1, int sh = -1 )
// 
// 		通过把pixmap的一部分复制到绘制设备中，在(x, y)绘制一个像素映射。
// 		(x, y)指定了要被绘制的绘制设备的左上点。(sx, sy)指定了要被绘制的pixmap中的左上点。默认为(0, 0)。
// 
// 		(sw, sh)指定了要被绘制的pixmap的大小。默认(-1, -1)，意思是一直到像素映射的右下。
	brush_black.setStyle(Qt::NoBrush);
	brush_pink.setStyle(Qt::NoBrush);
	brush_white.setStyle(Qt::NoBrush);
	LeftPartShow();
}

//nTextLocation为1时，刻度画在区域的底部；为0时，刻度画在区域的顶部
void GuanTan::DrawHRuler(const QRect& rect,int nStart, int nEnd, int nStep, int nTextLocation,int nTextDirection)
{

	QPainter painter(this);
	painter.setPen(Qt::black);
	int iStartPos = 0;  
	QRect rectText;

	int iLLineStart , iLLineEnd;
	int iMLineStart , iMLineEnd;
	int iSLineStart , iSLineEnd;

	if( nTextLocation == 1 ) 
	{
		rectText.setTop(rect.bottom()-29);
		rectText.setBottom(rect.bottom()-15);

		iLLineStart = rect.bottom() - 18;
		iLLineEnd	 = rect.bottom() - 2;

		iMLineStart = rect.bottom() - 12;
		iMLineEnd	 = rect.bottom() - 2;

		iSLineStart = rect.bottom() - 8;
		iSLineEnd	 = rect.bottom() - 2;

	}
	else if(nTextLocation == 0)
	{

		rectText.setTop(rect.top()+19);
		rectText.setBottom(rect.top()+30);

		iLLineStart = rect.top() + 2;
		iLLineEnd = rect.top() + 18;

		iMLineStart = rect.top() + 2;
		iMLineEnd = rect.top() + 12;

		iSLineStart = rect.top() + 2;
		iSLineEnd = rect.top() + 8;

	}
	QString str;
	int iPos;
	int iSel = 0;
	int nLinestart = 0;
	bool bXiaoyu = FALSE;
	int  i = 0;
	int  iSayac = 0;
	if (nStep < 10)
	{
		nStart = nStart*100;
		nEnd = nEnd*100;
		nStep = nStep*100;
		bXiaoyu = TRUE;
	}
	nStep = nStep/10;
	if (nStep%5 != 0)
	{
		nStep = (nStep/5 + 1)*5;
	}
	nLinestart = (nStart/nStep + 1)*nStep; 
	if (nStart == 0)
	{
		nLinestart = 0;
	}
	for (i = nLinestart;i<nEnd; i+=nStep)
	{
		if (i %nStep == 0)
		{
			if (nTextDirection == 0)
			{
				iPos = rect.left() + ((rect.width())*(i - nStart))/(nEnd - nStart);
				rectText.setLeft(iPos-53);
			}
			else
			{
				iPos = rect.right() - ((rect.width())*(i - nStart))/(nEnd - nStart);
				rectText.setLeft(iPos-50);
			}

			if (i % (nStep*5) == 0)
			{
				painter.drawLine(iPos,iMLineStart,iPos,iMLineEnd);	
				if (i % (nStep*10) == 0)
				{
					painter.drawLine(iPos,iLLineStart,iPos,iLLineEnd);	

					rectText.setRight(iPos+60); 
					if (rectText.right() > rect.right())
					{
						rectText.setRight(rect.right()+35);
					}
					if (bXiaoyu)
					{
						str.setNum(i/100);
					}
					else	
					{
						str.setNum(i);
					}
					if(   nTextLocation == 1 ) 
					{
						painter.drawText( rectText, Qt::AlignHCenter ,str  );
					}
					else
					{
						painter.drawText( rectText, Qt::AlignHCenter ,str );
					}

					continue;
				}
				continue;
			}
			painter.drawLine(iPos,iSLineStart,iPos,iSLineEnd);
		}
	}
	return;
}

void GuanTan::DrawVRuler(const QRect& rect,int nStart, int nEnd, int nStep, int nTextLocation,int nTextDirection)
{
	QPainter painter(this);
	painter.setPen(Qt::black);
	if (nEnd == 20)
	{
		int test = 0;
	}
	QRect rectText;
	int iSayac = 0;
	int iNumber = 0;
	int iLLineStart , iLLineEnd;
	int iMLineStart , iMLineEnd;
	int iSLineStart , iSLineEnd;
	if( nTextLocation == 1 ) 
	{
		rectText.setRight(rect.right()-10);

		iLLineStart = rect.right() - 18;
		iLLineEnd	 = rect.right() - 2;

		iMLineStart = rect.right() - 12;
		iMLineEnd	 = rect.right() - 2;

		iSLineStart = rect.right() - 8;
		iSLineEnd	 = rect.right() - 2;
	}
	else if( nTextLocation == 0 ) 
	{
		rectText.setLeft(rect.left()+10);

		iLLineStart = rect.left()  + 2;
		iLLineEnd	 = rect.left()  + 18;

		iMLineStart = rect.left()  + 2;
		iMLineEnd	 = rect.left()  + 12;

		iSLineStart = rect.left() + 2;
		iSLineEnd	 = rect.left() + 8;
	}
	QString str;
	int iPos;
	int iSel = 0;
	bool bXiaoyu = FALSE;
	if (nStep < 10)
	{
		nStart = nStart*100;
		nEnd = nEnd*100;
		nStep = nStep*100;
		bXiaoyu = TRUE;
	}
	nStep = nStep/10;
	if (nStep%5 != 0)
	{
		if (nStep > 3)
		{
			nStep = (nStep/5 + 1)*5;
		}
		else
		{
			;
		}
	}
	int nLinestart = (nStart/nStep + 1)*nStep;
	if (nStart == 0)
	{
		nLinestart = 0;
	}
	for (int i = nLinestart;i <= nEnd; i+=nStep)
	{
		if (i %nStep == 0)
		{
			if( nTextDirection == 0 )  
			{
				iPos = rect.top() + (rect.height()*(i - nStart))/(nEnd - nStart);
				rectText.setTop(iPos-10);
			}
			else if(nTextDirection == 1 )
			{
				iPos = rect.bottom() - (rect.height()*(i - nStart))/(nEnd - nStart);
				rectText.setTop(iPos-13);
			}
			rectText.setBottom(rectText.top()+20);

			if (i % (nStep*5) == 0)
			{
				painter.drawLine(iMLineStart,iPos,iMLineEnd,iPos);		
				if (i % (nStep*10) == 0)
				{
					painter.drawLine(iLLineStart,iPos,iLLineEnd,iPos);	
					if( nTextLocation == 0 )
					{
						rectText.setRight(rectText.left()+32);
					}
					else
					{
						rectText.setLeft(rectText.right()-43);
					}

					if (!bDBorPCT)
					{
						if (rectText.top() < rect.top())
						{
							rectText.setTop(rect.top());
							rectText.setBottom(rectText.top()+20);
						}
						if (rectText.bottom() > rect.bottom())
						{
							rectText.setBottom(rect.bottom());
						}
					}

					if (bXiaoyu)
					{
//						iNumber=i/100-15;
// 						if (iNumber<0)
// 						{
// 							iNumber=-iNumber;
// 						}
// 						{
// 						}
						iNumber=i/100;
						str.setNum(iNumber);
					}
					else	
					{
						int nTempI = i;
						if (!bDBorPCT)
						{
							nTempI = (nTempI - 50)/50 * 6;
						}
					    str.setNum(nTempI);
					}
					if (bDBorPCT)
					{
						if (rectText.top() > rect.top())
						{
							if( nTextLocation == 0 )
							{
								painter.drawText( rectText,Qt::AlignHCenter,str  );
							}
							else
							{
								painter.drawText( rectText,Qt::AlignHCenter,str );
							}
						}
					}
					else//DB显示时让最上方的数字下调，打印出来
					{
						if( nTextLocation == 0 )
						{
							str = str + "dB";
							painter.drawText( rectText,Qt::AlignHCenter,str  );
						}
						else
						{
							str = str + "dB";
							painter.drawText( rectText,Qt::AlignHCenter,str );
						}
					}
					continue;
				}
			}
			painter.drawLine(iSLineStart,iPos,iSLineEnd,iPos);		
		}
	}
	return;
}

void GuanTan::timerEvent( QTimerEvent *event )
{
#if _PLX
	static int nCount = 0;
	if(event->timerId() == m_nTIMER_THREAD_PROCESSId)
	{
		// 启动的准备工作
		if(m_bPlateStart[0] && nCount == 0)
		{
			int nAECCardNum = m_PLXCommunication.GetAECCardNum();

			for (int l = 0; l < nAECCardNum; l++)
			{
				DWORD dwAddress = SOFT_CHANNEL_CONFIG_PARARM_ADDRESS;
				DWORD dwAddressBack = SOFT_CHANNEL_CONFIG_PARARM_ADDRESS;
				DWORD dwKongCha = 0x1000;
				DWORD dwKongNeiCha = 0x80;
				for (int i=0; i<8; i++)
				{
					dwAddress = dwAddressBack + i*dwKongCha;
					DWORD dwAddressBack2 = dwAddress;

					for (int j=0; j<4; j++)
					{
						dwAddress = dwAddressBack2 + j * dwKongNeiCha;
						int index = i * 4 + j;
						WORD* pData = (WORD*)&(m_Ascan.m_stAllCH_CONFIG[index]);
						int nSize = sizeof(CH_CONFIG) / sizeof(WORD);
						for (int k=0; k<nSize; k++)
						{
							P9054_WriteWord(m_stThreadParam[l+1].hDev, P9054_ADDR_SPACE0, dwAddress, *pData);
							dwAddress += 0x2;
							pData++;
						}
					}
				}
			}
			nCount = 1;

			WORD wValue = 0;
			P9054_WriteWord(m_stThreadParam[1].hDev, P9054_ADDR_SPACE0, MONITOR_CHANNEL_H_ADDRESS, wValue);
			wValue = 0;
			P9054_WriteWord(m_stThreadParam[1].hDev, P9054_ADDR_SPACE0, MONITOR_CHANNEL_S_ADDRESS, wValue);

		}

		int AECCardNum = 1;
		for (int i = 0; i < AECCardNum; i++)
		{
			if(g_csCard.tryLock())
			{
				if (m_bPlateStart[i])
				{
					m_bPlateStart[i] = FALSE;
					m_stThreadParam[i+1].wMain2AECThreadCommand = MAIN2AECTHREADCOMMAND_INIT;

					m_bIsRunning = TRUE;
				} 
				else if(m_bPlateEnd[i])
				{
					m_bPlateEnd[i] = FALSE;
					m_stThreadParam[i+1].wMain2AECThreadCommand = MAIN2AECTHREADCOMMAND_PLATE_STOP;
				}
				else if (m_Ascan.m_bSelChannel)
				{
					m_Ascan.m_bSelChannel = FALSE;
					m_stThreadParam[i+1].wMain2AECThreadCommand = MAIN2AECTHREADCOMMAND_SEL_CHANNEL;
					m_stThreadParam[i+1].wSelChannel = g_dwActiveChannel;
					m_stThreadParam[i+1].nFlawOrBottom = g_dwActiveFlawOrBottom;

					g_csCard.unlock();
					break;
				}
				else if (m_Ascan.m_bSetOne)
				{
					m_Ascan.m_bSetOne = FALSE;
					m_stThreadParam[i+1].wMain2AECThreadCommand = MAIN2AECTHREADCOMMAND_SETONE;
					m_stThreadParam[i+1].wSetOneChannel = m_Ascan.m_wChannelNo;

					g_csCard.unlock();
					WORD nInterSpace[FLAW_DOT_MAX_NO];
					RangeProcess(m_Ascan.m_ChannelInfo[m_Ascan.m_MapChannel_CONFIG[m_Ascan.m_wChannelNo]].m_nWaveSpeed, m_Ascan.m_fRange, nInterSpace);
					m_PLXCommunication.SetMonitorRange(m_stThreadParam[i+1].hDev, nInterSpace);
					break;
				}
				else if (m_Ascan.m_bSetAll)
				{
					m_Ascan.m_bSetAll = FALSE;
					m_stThreadParam[i+1].wMain2AECThreadCommand = MAIN2AECTHREADCOMMAND_SETALL;
					g_csCard.unlock();
					break;
				}
				else
				{
				}

				// 启动完毕后切换到默认通道
				if (m_stThreadParam[i+1].wAEC2MainThreadFlag == AECTHREADREURN_START_OK)
				{
					m_stThreadParam[i+1].wAEC2MainThreadFlag = AECTHREADREURN_IDLE;

					m_bSelChannel = TRUE;
				}

				// 结束后的收尾工作
				if(m_stThreadParam[i+1].wAEC2MainThreadFlag == AECTHREADREURN_STOP_OK && nCount == 1)
				{
					m_bIsRunning = FALSE;

					m_stThreadParam[i+1].wAEC2MainThreadFlag = AECTHREADREURN_INIT_FALSE;
					nCount = 0;
				}

				g_csCard.unlock(); 
			}
		}		
	}
#endif
	if(event->timerId() == m_nTIMER_SAVE_DMA_DATA)
	{
		
#if _PLX

#if HAVE_OPC
		g_wStartFlag = P9054_ReadWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, START_FLAG_ADDRESS);//读当前编码器的使能
#endif // OPC

		int nTempState = P9054_ReadWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, PROBEBOX_UP_DOWN);// 探头盒起落状态
		if (nTempState == 62)//30 = 0x00011110就是一盒抬起，其他盒落下的值
		{
			m_dwProbeBoxUpDown = 1;//钢管末端1盒抬起标志 1抬起 0没有
			if (!m_bSteelLengthIsValue)//开始检测后没有赋值给当前钢管的实际长度
			{
				m_nRealSteelL = m_fEncipheror / GRID_WIDTH +1;
				m_bSteelLengthIsValue = 1;
			}
		}
		if (g_wStartFlag == 1)
		{
			if (!m_bRunFlag)
			{
				m_dwProbeBoxUpDown = 0;
				m_nRealSteelL = 0;
				m_bSteelLengthIsValue = 0;
				m_fEncipheror_mark = 1;
				if (m_ORDER_PARAMETER.nSteelNumber + 1 > m_ORDER_PARAMETER.nSteelCount)//钢管号超过总数量,说明该订单下钢管全部检测完成
				{
					if (!m_bOver)//没有提示过检测结束
					{
						QMessageBox::warning(this,tr("检测提示框"),tr("此订单下的所有钢管已经检测完毕!请重新设置参数信息!")); 
						m_bOver = TRUE;
					}
					g_wStartFlag = 0;
				}
				else
				{
					//->wangwei add on 2014-2-27 检测授权
					QString strPath = "C:/Program Files/ars/TestCount/Count.ini";
					QSettings setting_path(strPath,QSettings::IniFormat);
					setting_path.beginGroup(g_strCurUser);
					if (g_nTestCount >= g_nTestMaxCount)
					{
						QMessageBox::warning(this,tr("权限提示"),tr("无法检测！此账户授权的检测个数已经达到上限或电气设备正处于检测状态，请复位电气设备后重启软件"));
						g_wStartFlag = 0;
						setting_path.endGroup();
						return;
					}
					else
					{
						g_nTestCount++;
						setting_path.setValue("count",QString::number(g_nTestCount));
						setting_path.endGroup();
						//<-wangwei add on 2014-2-27
						ZeroEncipheror();
						ClearScreen();
						ResetAlarm();
						m_bRunFlag = TRUE;
						m_ORDER_PARAMETER.nSteelNumber++;
						spinBoxLeftPart->setEnabled(false);
						spinBoxRightPart->setEnabled(false);
						m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setEnabled(false);
						m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setEnabled(false);						
						labelTestSteelNumber->setText(m_ParameterSetting.m_OrderParameter.ui.lineEditSteelName->text());//显示当前检测的钢管号 0代表没有开始检测
						label_48->setStyleSheet(QString::fromUtf8("border-image: url(:/GuanTan/Resources/hege.png);"));	
						pushButton_18->setText(QString("探伤中..."));
						m_Ascan.close();
						//pushButtonShowAScan->setEnabled(FALSE);//打标程序特有
					}
				}
			}
		}
		else
		{
			m_bOver = FALSE;
			m_dwProbeBoxUpDown = 0;//末端1盒抬起标志 1抬起 0没有
			m_bSteelLengthIsValue = 0;
			if (m_bRunFlag)
			{    
				m_fEncipheror_mark = 1;
				spinBoxLeftPart->setEnabled(true);
				spinBoxRightPart->setEnabled(true);
				m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setEnabled(true);
				m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setEnabled(true);
				//更改过滤探头盒抬起后的无效数据 wangwei 2013-12-15
				if (m_vectorOutVFeature.count() > 110
					&& m_vectorInVFeature.count() > 110
					&& m_vectorOutHFeature.count() > 110
					&& m_vectorInHFeature.count() > 110
					&& m_vectorLayerFeature.count() > 110
					&& m_vectorBadCoupleFeature.count() > 110
					&& m_vectorThickHighFeature2.count() > 110
					&& m_vectorThickLowFeature2.count() > 110) {
						for (int i = 0; i < 110; i++)
						{
							m_vectorOutVFeature.pop_back();
							m_vectorInVFeature.pop_back();
							m_vectorOutHFeature.pop_back();
							m_vectorInHFeature.pop_back();
							m_vectorLayerFeature.pop_back();
							m_vectorBadCoupleFeature.pop_back();
							m_vectorThickHighFeature2.pop_back();
							m_vectorThickLowFeature2.pop_back();
						}
				}
				//更改过滤探头盒抬起后的无效数据 wangwei 2013-12-15
				TestResultProcess();
				QDateTime time = QDateTime::currentDateTime();              //获取系统现在的时间
				QString strTime = time.toString("yyyyMMdd hh-mm"); 
				QTime time_;  
				QDate date_;  
				time.setTime(time_.currentTime());  
				time.setDate(date_.currentDate());  
				QString strMDir,strDDir;//wangwei add on 2014-2-27
				m_strSteelTestDate = time.toString("yyyy-MM-dd");
				m_strSteelTestTime = time.toString("hh:mm:ss");
				strMDir = time.toString("yyyy-MM");//wangwei add on 2014-2-27
				strDDir = time.toString("dd");//wangwei add on 2014-2-27
				QString strMPath = "D:/Data/" + strMDir;
				QString strDPath = strMPath + "/" + strDDir;
				pushButton_18->setText(tr("检测完毕：") + m_strSteelTestDate + tr("  ") + m_strSteelTestTime);//wangwei add on 2014-2-22
                //wangwei add on 2014-2-27
				QDir *MDir = new QDir;
				QDir *DDir = new QDir;
				bool exist = MDir->exists(strMPath);
				bool exist_ = DDir->exists(strDPath);
				bool exist__ = DDir->exists(strDPath + "/Details");
				if(exist)
				{
					if (exist_)
					{
						if (exist__)
						{
						}
						else
						{
							DDir->mkdir(strDPath + "/Details");
						}
					}
					else
					{
						DDir->mkdir(strDPath);
						DDir->mkdir(strDPath + "/Details");
					}
				}
				else
				{
					MDir->mkdir(strMPath);
					DDir->mkdir(strDPath);
					DDir->mkdir(strDPath + "/Details");
				}
				//wangwei add on 2014-2-27
				QString strOutVFeature = strDPath + "/Details/" + strTime + "-OutVFeature.pd";	//外部纵向缺陷
				m_strSingleReport1 = strOutVFeature;
				SaveData(strOutVFeature,m_vectorOutVFeature);

				QString strInVFeature = strDPath + "/Details/" + strTime + "-InVFeature.pd";	//内部纵向缺陷
				m_strSingleReport2 = strInVFeature;
				SaveData(strInVFeature,m_vectorInVFeature);

				QString strOutHFeature = strDPath + "/Details/" + strTime + "-OutHFeature.pd";	//外部横向缺陷
				m_strSingleReport3 = strOutHFeature;
				SaveData(strOutHFeature,m_vectorOutHFeature);

				QString strInHFeature = strDPath + "/Details/" + strTime + "-InHFeature.pd";	//内部横向缺陷
				m_strSingleReport4 = strInHFeature;
				SaveData(strInHFeature,m_vectorInHFeature);

				QString strThickHighFeature = strDPath + "/Details/" + strTime + "-ThickHighFeature.pd";	//壁厚增厚
				m_strSingleReport5 = strThickHighFeature;
				SaveData(strThickHighFeature,m_vectorThickHighFeature);

				QString strThickLowFeature = strDPath + "/Details/" + strTime + "-ThickLowFeature.pd";		//壁厚减薄
				m_strSingleReport6 = strThickLowFeature;
				SaveData(strThickLowFeature,m_vectorThickLowFeature);

				QString strThickHighFeature2 = strDPath + "/Details/" + strTime + "-ThickHighFeature2.pd";	//壁厚增厚2 旧算法
				m_strSingleReport10 = strThickHighFeature2;
				SaveData(strThickHighFeature2, m_vectorThickHighFeature2);

				QString strThickLowFeature2 = strDPath + "/Details/" + strTime + "-ThickLowFeature2.pd";	//壁厚减薄2 旧算法
				m_strSingleReport11 = strThickLowFeature2;
				SaveData(strThickLowFeature2, m_vectorThickLowFeature2);

				QString strLayerFeature = strDPath + "/Details/" + strTime + "-LayerFeature.pd";			//分层缺陷
				m_strSingleReport7 = strLayerFeature;
				SaveData(strLayerFeature,m_vectorLayerFeature);

				QString strBadCoupleFeature = strDPath + "/Details/" + strTime + "-BadCoupleFeature.pd";	//耦合不良缺陷
				m_strSingleReport8 = strBadCoupleFeature;
				SaveData(strBadCoupleFeature,m_vectorBadCoupleFeature);

#if SAVE_BOX_THICK
				QString strThickFeature1 = strDPath + "/Details/" + strTime + "-ThickFeature1.pd";	// 1盒测厚原始数据
				SaveData(strThickFeature1,m_vectorFeature1);

				QString strThickFeature2 = strDPath + "/Details/" + strTime + "-ThickFeature2.pd";	// 2盒测厚原始数据
				SaveData(strThickFeature2,m_vectorFeature2);

				QString strThickFeature3 = strDPath + "/Details/" + strTime + "-ThickFeature3.pd";	// 3盒测厚原始数据
				SaveData(strThickFeature3,m_vectorFeature3);

				QString strThickFeature4 = strDPath + "/Details/" + strTime + "-ThickFeature4.pd";	// 4盒测厚原始数据
				SaveData(strThickFeature4,m_vectorFeature4);

				QString strThickFeature5 = strDPath + "/Details/" + strTime + "-ThickFeature5.pd";	// 5盒测厚原始数据
				SaveData(strThickFeature5,m_vectorFeature5);

				QString strThickFeature6 = strDPath + "/Details/" + strTime + "-ThickFeature6.pd";	// 6盒测厚原始数据
				SaveData(strThickFeature6, m_vectorFeature6);
#endif

#if SAVE_PROBE_FEATURE
				QString strProbe1 = strDPath + "/Details/" + strTime + "-vectorProbe1.pd";	//耦合不良缺陷
				SaveData(strProbe1,m_vectorProbe1);

				QString strProbe2 = strDPath + "/Details/" + strTime + "-vectorProbe2.pd";	//耦合不良缺陷
				SaveData(strProbe2,m_vectorProbe2);

				QString strProbe3 = strDPath + "/Details/" + strTime + "-vectorProbe3.pd";	//耦合不良缺陷
				SaveData(strProbe3,m_vectorProbe3);

				QString strProbe4 = strDPath + "/Details/" + strTime + "-vectorProbe4.pd";	//耦合不良缺陷
				SaveData(strProbe4,m_vectorProbe4);

				QString strProbe5 = strDPath + "/Details/" + strTime + "-vectorProbe5.pd";	//耦合不良缺陷
				SaveData(strProbe5,m_vectorProbe5);

				QString strProbe6 = strDPath + "/Details/" + strTime + "-vectorProbe6.pd";	//耦合不良缺陷
				SaveData(strProbe6,m_vectorProbe6);

				QString strProbe7 = strDPath + "/Details/" + strTime + "-vectorProbe7.pd";	//耦合不良缺陷
				SaveData(strProbe7,m_vectorProbe7);

				QString strProbe8 = strDPath + "/Details/" + strTime + "-vectorProbe8.pd";	//耦合不良缺陷
				SaveData(strProbe8,m_vectorProbe8);

				QString strProbe9 = strDPath + "/Details/" + strTime + "-vectorProbe9.pd";	//耦合不良缺陷
				SaveData(strProbe9,m_vectorProbe9);

				QString strProbe10 = strDPath + "/Details/" + strTime + "-vectorProbe10.pd";	//耦合不良缺陷
				SaveData(strProbe10,m_vectorProbe10);

				QString strProbe11 = strDPath + "/Details/" + strTime + "-vectorProbe11.pd";	//耦合不良缺陷
				SaveData(strProbe11,m_vectorProbe11);

				QString strProbe12 = strDPath + "/Details/" + strTime + "-vectorProbe12.pd";	//耦合不良缺陷
				SaveData(strProbe12,m_vectorProbe12);

				QString strProbe13 = strDPath + "/Details/" + strTime + "-vectorProbe13.pd";	//耦合不良缺陷
				SaveData(strProbe13,m_vectorProbe13);

				QString strProbe14 = strDPath + "/Details/" + strTime + "-vectorProbe14.pd";	//耦合不良缺陷
				SaveData(strProbe14,m_vectorProbe14);

				QString strProbe15 = strDPath + "/Details/" + strTime + "-vectorProbe15.pd";	//耦合不良缺陷
				SaveData(strProbe15,m_vectorProbe15);

				QString strProbe16 = strDPath + "/Details/" + strTime + "-vectorProbe16.pd";	//耦合不良缺陷
				SaveData(strProbe16,m_vectorProbe16);

				QString strProbe17 = strDPath + "/Details/" + strTime + "-vectorProbe17.pd";	//耦合不良缺陷
				SaveData(strProbe17,m_vectorProbe17);

				QString strProbe18 = strDPath + "/Details/" + strTime + "-vectorProbe18.pd";	//耦合不良缺陷
				SaveData(strProbe18,m_vectorProbe18);

				QString strProbe19 = strDPath + "/Details/" + strTime + "-vectorProbe19.pd";	//耦合不良缺陷
				SaveData(strProbe19,m_vectorProbe19);

				QString strProbe20 = strDPath + "/Details/" + strTime + "-vectorProbe20.pd";	//耦合不良缺陷
				SaveData(strProbe20,m_vectorProbe20);

				QString strProbe21 = strDPath + "/Details/" + strTime + "-vectorProbe21.pd";	//耦合不良缺陷
				SaveData(strProbe21,m_vectorProbe21);

				QString strProbe22 = strDPath + "/Details/" + strTime + "-vectorProbe22.pd";	//耦合不良缺陷
				SaveData(strProbe22,m_vectorProbe22);

				QString strProbe23 = strDPath + "/Details/" + strTime + "-vectorProbe23.pd";	//耦合不良缺陷
				SaveData(strProbe23,m_vectorProbe23);

				QString strProbe24 = strDPath + "/Details/" + strTime + "-vectorProbe24.pd";	//耦合不良缺陷
				SaveData(strProbe24,m_vectorProbe24);
#endif

#if SAVE_BOX_COUPLE
				QString strBadCoupleBox1 = strDPath + "/Details/" + strTime + "-strBadCoupleBox1.pd";	//耦合不良缺陷
				SaveData(strBadCoupleBox1,m_vectorBadCoupleFeature);

				QString strBadCoupleBox2 = strDPath + "/Details/" + strTime + "-strBadCoupleBox2.pd";	//耦合不良缺陷
				SaveData(strBadCoupleBox2,m_vectorBadCoupleFeature);

				QString strBadCoupleBox3 = strDPath + "/Details/" + strTime + "-strBadCoupleBox3.pd";	//耦合不良缺陷
				SaveData(strBadCoupleBox3,m_vectorBadCoupleFeature);

				QString strBadCoupleBox4 = strDPath + "/Details/" + strTime + "-strBadCoupleBox4.pd";	//耦合不良缺陷
				SaveData(strBadCoupleBox4,m_vectorBadCoupleFeature);

				QString strBadCoupleBox5 = strDPath + "/Details/" + strTime + "-strBadCoupleBox5.pd";	//耦合不良缺陷
				SaveData(strBadCoupleBox5,m_vectorBadCoupleFeature);

				QString strBadCoupleBox6 = strDPath + "/Details/" + strTime + "-strBadCoupleBox6.pd";	//耦合不良缺陷
				SaveData(strBadCoupleBox6,m_vectorBadCoupleFeature);
#endif

				QString strTotal = strDPath + "/" + strTime + ".dt";
				m_strNewResultFile = strTotal;
				m_strCurrentDataPath = strTotal;
				QFile fileData(strTotal);
				if (!fileData.open(QIODevice::WriteOnly | QIODevice::Text))
				{
					return;
				}
				QTextStream out(&fileData);
				out <<"MaxShow," + m_ParameterSetting.m_ShowParameter.ui.lineEditLength->text() << "\n";
				out <<"LeftShow," + spinBoxLeftPart->text() << "\n";
				out <<"RightShow," + spinBoxRightPart->text() << "\n";
				out <<"WholeParams," + labelWholeParams->text() << "\n";
				out <<"TestStandard," + labelTestStandard->text() << "\n";
				out <<"TestLevel," + labelTestLevel->text() << "\n";
				out <<"OrderNumber," + labelOrderNumber->text() << "\n";
				out <<"SteelTubeLevel," + labelSteelTubeLevel->text() << "\n";
				out <<"SteelTubeCount," + labelSteelTubeCount->text() << "\n";
				out <<"TestSteelNumber," + labelTestSteelNumber->text() << "\n";
				out <<"Diameter," + labelDiameter->text() << "\n";
				out <<"Thickness," + labelThickness->text() << "\n";
				out <<"Length," + labelLength->text() << "\n";
				out <<"m_strOperator," + m_strOperator << "\n";
				out <<"m_strSteelTestDate," + m_strSteelTestDate << "\n";
				out <<"m_strSteelTestTime," + m_strSteelTestTime << "\n";
				out <<"m_fThickMaxTolerance," + QString::number(m_fThickMaxTolerance) << "\n";
				out <<"m_fThickMinTolerance," + QString::number(m_fThickMinTolerance) << "\n";
				out <<"m_fRangeMax," + QString::number(m_fRangeMax) << "\n";
				out <<"m_fRangeMin," + QString::number(m_fRangeMin) << "\n";
				out <<"m_fCurThick," + QString::number(m_fCurThick) << "\n";
				out <<"m_nStartDeadZone," + QString::number(m_nStartDeadZone) << "\n";
				out <<"m_nEndDeadZone," + QString::number(m_nEndDeadZone) << "\n";
				out <<"m_nRealSteelL," + QString::number(m_nRealSteelL) << "\n";
				out <<"OutVFeatureFlawNum," + QString::number(m_nOutVFeatureFlawNum) << "\n";
				out <<"InVFeatureFlawNum," + QString::number(m_nInVFeatureFlawNum) << "\n";
				out <<"OutHFeatureFlawNum," + QString::number(m_nOutHFeatureFlawNum) << "\n";
				out <<"InHFeatureFlawNum," + QString::number(m_nInHFeatureFlawNum) << "\n";
				out <<"ThickFeatureFlawNumAdd," + QString::number(m_nThickFeatureFlawNumAdd) << "\n";
				out <<"ThickFeatureFlawNumCut," + QString::number(m_nThickFeatureFlawNumCut) << "\n";
				out <<"ThickFeatureFlawNumCut2," + QString::number(m_nThickFeatureFlawNumCut2) << "\n";
				out <<"ThickFeatureFlawNumAdd2," + QString::number(m_nThickFeatureFlawNumAdd2) << "\n";
				out <<"LayerFeatureFlawNum," + QString::number(m_nLayerFeatureFlawNum) << "\n";
				out <<"BadCoupleFeatureFlawNum," + QString::number(m_nBadCoupleFeatureFlawNum) << "\n";
				out <<"OutVFeatureMaxFlawSize," + QString::number(m_nOutVFeatureMaxFlawSize) << "\n";
				out <<"InVFeatureMaxFlawSize," + QString::number(m_nInVFeatureMaxFlawSize) << "\n";
				out <<"OutHFeatureMaxFlawSize," + QString::number(m_nOutHFeatureMaxFlawSize) << "\n";
				out <<"InHFeatureMaxFlawSize," + QString::number(m_nInHFeatureMaxFlawSize) << "\n";
				out <<"ThickFeatureMaxFlawSizeAdd," + QString::number(m_nThickFeatureMaxFlawSizeAdd) << "\n";
				out <<"ThickFeatureMaxFlawSizeCut," + QString::number(m_nThickFeatureMaxFlawSizeCut) << "\n";
				out <<"ThickFeatureMaxFlawSizeAdd2," + QString::number(m_nThickFeatureMaxFlawSizeAdd2) << "\n";
				out <<"ThickFeatureMaxFlawSizeCut2," + QString::number(m_nThickFeatureMaxFlawSizeCut2) << "\n";
				out <<"LayerFeatureMaxFlawSize," + QString::number(m_nLayerFeatureMaxFlawSize) << "\n";
				out <<"BadCoupleFeatureMaxFlawSize," + QString::number(m_nBadCoupleFeatureMaxFlawSize) << "\n";
				out <<"OutVFeatureMaxFlawGain," + QString::number(m_fOutVFeatureMaxFlawGain) << "\n";
				out <<"InVFeatureMaxFlawGain," + QString::number(m_fInVFeatureMaxFlawGain) << "\n";
				out <<"OutHFeatureMaxFlawGain," + QString::number(m_fOutHFeatureMaxFlawGain) << "\n";
				out <<"InHFeatureMaxFlawGain," + QString::number(m_fInHFeatureMaxFlawGain) << "\n";
				out <<"ThickFeatureMaxFlawGain," + QString::number(m_fThickFeatureMaxFlawGain) << "\n";
				out <<"ThickFeatureMinFlawGain," + QString::number(m_fThickFeatureMinFlawGain) << "\n";
				out <<"ThickFeatureMaxFlawGain2," + QString::number(m_fThickFeatureMaxFlawGain2) << "\n";
				out <<"ThickFeatureMinFlawGain2," + QString::number(m_fThickFeatureMinFlawGain2) << "\n";
				out <<"LayerFeatureMax," + QString::number(m_fLayerFeatureMax) << "\n";
				out <<strOutVFeature << "\n";
				out <<strInVFeature << "\n";
				out <<strOutHFeature << "\n";
				out <<strInHFeature << "\n";
				out <<strThickHighFeature << "\n";
				out <<strThickLowFeature << "\n";
				out <<strThickHighFeature2 << "\n";
				out <<strThickLowFeature2 << "\n";
				out <<strLayerFeature << "\n";
				out <<strBadCoupleFeature << "\n";
				DataJudge();		//
				m_bRunFlag = FALSE;		//位置移动,未测试是否受影响 王威-2013-11-06
				m_DataList.append(strTotal);
				fileData.close();

				if (m_strCurrentDataPath.length() != 0)
				{
					ClearScreen();
					ReadDataFile(m_strCurrentDataPath);
				}

				update();
				if (m_ORDER_PARAMETER.nSteelNumber >= m_ORDER_PARAMETER.nSteelCount)
				{
					QMessageBox::information(this,tr("检测报告"),tr("此订单下的所有钢管已经全部检测完毕!")); 
					if (m_FormItem.ui.radioButtonOnLine->isChecked())
					{
						if (m_FormItem.m_FormOnline.m_bWholeOut)
						{
							PrintWhole();//在线打印--全套整体报表打印
						}
					}
				}
				if (m_FormItem.ui.radioButtonOnLine->isChecked())
				{
					if (m_FormItem.m_FormOnline.m_bSingleOut)
					{
						PrintSingle();//在线打印--全套打印单根报表
					}
				}
				//pushButtonShowAScan->setEnabled(TRUE);//激活A扫按钮，打标程序特有
			}
		}
#endif
	}
	if(event->timerId() == m_nTIMER_SAVE_PICTURE)
	{
		g_ItemCS.lock();
		BYTE temp = g_ItemValue.PLCState;
		g_ItemCS.unlock();
		if (temp > 0)
		{
			labelElectric->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		}
		else
			labelElectric->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
	}
	
#if HAVE_OPC
	if (m_bMark)
	{
		if (m_fEncipheror_mark == 1)
		{
			if (m_bInFeacher || m_bOutFeacher || m_bThickFeacher)
			{
				m_fEncipheror_mark = m_fEncipheror -880;//把5盒编码器值付给当前
				OPCHANDLE phServer[3];
				VARIANT values[3];
				phServer[0] = m_OPCComponent.m_pItemResult[5].hServer;	//
				phServer[1] = m_OPCComponent.m_pItemResult[10].hServer;	//
				phServer[2] = m_OPCComponent.m_pItemResult[15].hServer;	//
				values[0].vt = VT_UI1;
				if (m_bInFeacher)
				{
					m_bInFeacher = FALSE;
					values[0].boolVal = 1;
				}
				else
				{
					values[0].boolVal = 0;
				}
				values[1].vt = VT_UI1;
				if (m_bOutFeacher)
				{
					m_bOutFeacher = FALSE;
					values[1].boolVal = 1;
				}
				else
				{
					values[1].boolVal = 0;
				}
				values[2].vt = VT_UI1;
				if (m_bThickFeacher)
				{
					m_bThickFeacher = FALSE;
					values[2].boolVal = 1;
				}
				else
				{
					values[2].boolVal = 0;
				}
				m_Ascan.close();
				WriteOPCItem(phServer, values,3);
			}
		}
		if (m_fEncipheror - 880 > m_fEncipheror_mark + 300)
		{
			if (m_bInFeacher || m_bOutFeacher || m_bThickFeacher)
			{
				m_fEncipheror_mark = m_fEncipheror -880;
				OPCHANDLE phServer[3];
				VARIANT values[3];
				phServer[0] = m_OPCComponent.m_pItemResult[5].hServer;	//
				phServer[1] = m_OPCComponent.m_pItemResult[10].hServer;	//
				phServer[2] = m_OPCComponent.m_pItemResult[15].hServer;	//
				values[0].vt = VT_UI1;
				if (m_bInFeacher)
				{
					m_bInFeacher = FALSE;
					values[0].boolVal = 1;
				}
				else
				{
					values[0].boolVal = 0;
				}
				values[1].vt = VT_UI1;
				if (m_bOutFeacher)
				{
					m_bOutFeacher = FALSE;
					values[1].boolVal = 1;
				}
				else
				{
					values[1].boolVal = 0;
				}
				values[2].vt = VT_UI1;
				if (m_bThickFeacher)
				{
					m_bThickFeacher = FALSE;
					values[2].boolVal = 1;
				}
				else
				{
					values[2].boolVal = 0;
				}
				m_Ascan.close();
				WriteOPCItem(phServer, values,3);
			}
		}
	}
#endif
}

void GuanTan::InitializeConfig()
{
	for(int i=0; i<CHANNEL_NUM;i++) // 1->channel_Num
	{
		m_stAllCH_CONFIG[i].stPlus.wAPlus = Gain2Data(20);
		m_stAllCH_CONFIG[i].stPlus.wBPlus = Gain2Data(20);
		m_stAllCH_CONFIG[i].stPlus.wCPlus = Gain2Data(0);
		m_stAllCH_CONFIG[i].stPlus.wDPlus = Gain2Data(0);
		m_stAllCH_CONFIG[i].wBottomFlawPlusDiff = 0;//Gain2Data(20);
		m_stAllCH_CONFIG[i].wTCGEn = 0;
		for (int j=0; j<2; j++)
		{
			for (int k=0; k<4; k++)
			{
				m_stAllCH_CONFIG[i].stWaveConfigure[j].stGate[k].wGateEn = 1;
				m_stAllCH_CONFIG[i].stWaveConfigure[j].stGate[k].wGateStart = 750;
				m_stAllCH_CONFIG[i].stWaveConfigure[j].stGate[k].wGateWidth = 1050;
				m_stAllCH_CONFIG[i].stWaveConfigure[j].stGate[k].wGateHeight = 60+k*20;
			}
			m_stAllCH_CONFIG[i].stWaveConfigure[j].wDelay = 0;
			m_stAllCH_CONFIG[i].stWaveConfigure[j].wMiddleValue =490; // 511;
			m_stAllCH_CONFIG[i].stWaveConfigure[j].wDetectMode = 0;
			m_stAllCH_CONFIG[i].stWaveConfigure[j].wSuppression = 0;
		}
	}
}

void GuanTan::DrawFeatureInfo()
{
	//每组探头盒1、2探头是探纵伤 3、4探头是探横伤 都是伤波表示；  5探头是探分层和测厚，其中分层是伤波表示、测厚是底波表示
    for (int i = 0;i < 256; ++i)//编码器一次给256组数据
    {
		m_fEncipheror = static_cast<float>(g_stFeatrueInfo[i].wXHigh * 65536  + g_stFeatrueInfo[i].wXLow) / (X_TO_LENGTH);
		labelEncoder->setText(QString("%1 mm").arg(m_fEncipheror));
		if (m_fEncipheror < 20000 && m_fEncipheror > 0)//防止编码器倒转导致数值异常，现在控制在30m以下时才有效
		{
			DrawInVFeature(i);		//画内部纵向缺陷图 探头
			DrawOutVFeature(i);		//画外部纵向缺陷图
			DrawInHFearure(i);		//画内部横向缺陷图
			DrawOutHFearure(i);		//画外部横向缺陷图
			DrawLayerFeature(i);	//画分层缺陷图
			DrawBadCoupleFeature(i);//画耦合缺陷图
			DrawThickFeature(i);	//画测厚缺陷图
		}
	}
}
void GuanTan::OrderOpen()
{
	Order_Parameter();
	m_ParameterSetting.m_OrderParameter.show();
}
void GuanTan::UltrasoundOpen()
{
	Ultrasound_Parameter();
	m_ParameterSetting.m_UltrasoundParameter.show();
	QSettings settings_UltrasoundParameter(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
	//传递闸门设置
	m_Parameter_[0].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1IB").toDouble();	//I闸门前沿
	m_Parameter_[1].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2IB").toDouble();
	m_Parameter_[2].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3IB").toDouble();
	m_Parameter_[3].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4IB").toDouble();
	m_Parameter_[4].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5IB").toDouble();
	m_Parameter_[5].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6IB").toDouble();
	m_Parameter_[6].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7IB").toDouble();
	m_Parameter_[7].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8IB").toDouble();
	m_Parameter_[8].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9IB").toDouble();
	m_Parameter_[9].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10IB").toDouble();
	m_Parameter_[10].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11IB").toDouble();
	m_Parameter_[11].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12IB").toDouble();
	m_Parameter_[12].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13IB").toDouble();
	m_Parameter_[13].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14IB").toDouble();
	m_Parameter_[14].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15IB").toDouble();
	m_Parameter_[15].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16IB").toDouble();
	m_Parameter_[16].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17IB").toDouble();
	m_Parameter_[17].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18IB").toDouble();
	m_Parameter_[18].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19IB").toDouble();
	m_Parameter_[19].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20IB").toDouble();
	m_Parameter_[20].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21IB").toDouble();
	m_Parameter_[21].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22IB").toDouble();
	m_Parameter_[22].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23IB").toDouble();
	m_Parameter_[23].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24IB").toDouble();
	m_Parameter_[24].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25IB").toDouble();
	m_Parameter_[25].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26IB").toDouble();
	m_Parameter_[26].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27IB").toDouble();
	m_Parameter_[27].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28IB").toDouble();
	m_Parameter_[28].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29IB").toDouble();
	m_Parameter_[29].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30IB").toDouble();
	m_Parameter_[30].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31IB").toDouble();
	m_Parameter_[31].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32IB").toDouble();
	m_Parameter_[32].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33IB").toDouble();
	m_Parameter_[33].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34IB").toDouble();
	m_Parameter_[34].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35IB").toDouble();
	m_Parameter_[35].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36IB").toDouble();

	m_Parameter_[0].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1IL").toDouble();	//I闸门宽度
	m_Parameter_[1].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2IL").toDouble();
	m_Parameter_[2].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3IL").toDouble();
	m_Parameter_[3].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4IL").toDouble();
	m_Parameter_[4].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5IL").toDouble();
	m_Parameter_[5].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6IL").toDouble();
	m_Parameter_[6].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7IL").toDouble();
	m_Parameter_[7].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8IL").toDouble();
	m_Parameter_[8].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9IL").toDouble();
	m_Parameter_[9].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10IL").toDouble();
	m_Parameter_[10].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11IL").toDouble();
	m_Parameter_[11].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12IL").toDouble();
	m_Parameter_[12].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13IL").toDouble();
	m_Parameter_[13].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14IL").toDouble();
	m_Parameter_[14].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15IL").toDouble();
	m_Parameter_[15].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16IL").toDouble();
	m_Parameter_[16].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17IL").toDouble();
	m_Parameter_[17].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18IL").toDouble();
	m_Parameter_[18].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19IL").toDouble();
	m_Parameter_[19].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20IL").toDouble();
	m_Parameter_[20].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21IL").toDouble();
	m_Parameter_[21].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22IL").toDouble();
	m_Parameter_[22].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23IL").toDouble();
	m_Parameter_[23].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24IL").toDouble();
	m_Parameter_[24].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25IL").toDouble();
	m_Parameter_[25].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26IL").toDouble();
	m_Parameter_[26].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27IL").toDouble();
	m_Parameter_[27].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28IL").toDouble();
	m_Parameter_[28].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29IL").toDouble();
	m_Parameter_[29].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30IL").toDouble();
	m_Parameter_[30].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31IL").toDouble();
	m_Parameter_[31].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32IL").toDouble();
	m_Parameter_[32].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33IL").toDouble();
	m_Parameter_[33].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34IL").toDouble();
	m_Parameter_[34].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35IL").toDouble();
	m_Parameter_[35].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36IL").toDouble();

	m_Parameter_[0].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1IT").toDouble();	//I闸门阈值
	m_Parameter_[1].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2IT").toDouble();
	m_Parameter_[2].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3IT").toDouble();
	m_Parameter_[3].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4IT").toDouble();
	m_Parameter_[4].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5IT").toDouble();
	m_Parameter_[5].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6IT").toDouble();
	m_Parameter_[6].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7IT").toDouble();
	m_Parameter_[7].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8IT").toDouble();
	m_Parameter_[8].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9IT").toDouble();
	m_Parameter_[9].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10IT").toDouble();
	m_Parameter_[10].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11IT").toDouble();
	m_Parameter_[11].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12IT").toDouble();
	m_Parameter_[12].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13IT").toDouble();
	m_Parameter_[13].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14IT").toDouble();
	m_Parameter_[14].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15IT").toDouble();
	m_Parameter_[15].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16IT").toDouble();
	m_Parameter_[16].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17IT").toDouble();
	m_Parameter_[17].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18IT").toDouble();
	m_Parameter_[18].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19IT").toDouble();
	m_Parameter_[19].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20IT").toDouble();
	m_Parameter_[20].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21IT").toDouble();
	m_Parameter_[21].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22IT").toDouble();
	m_Parameter_[22].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23IT").toDouble();
	m_Parameter_[23].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24IT").toDouble();
	m_Parameter_[24].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25IT").toDouble();
	m_Parameter_[25].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26IT").toDouble();
	m_Parameter_[26].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27IT").toDouble();
	m_Parameter_[27].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28IT").toDouble();
	m_Parameter_[28].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29IT").toDouble();
	m_Parameter_[29].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30IT").toDouble();
	m_Parameter_[30].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31IT").toDouble();
	m_Parameter_[31].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32IT").toDouble();
	m_Parameter_[32].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33IT").toDouble();
	m_Parameter_[33].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34IT").toDouble();
	m_Parameter_[34].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35IT").toDouble();
	m_Parameter_[35].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36IT").toDouble();

	m_Parameter_[0].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1AB").toDouble();	//A闸门前沿
	m_Parameter_[1].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2AB").toDouble();
	m_Parameter_[2].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3AB").toDouble();
	m_Parameter_[3].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4AB").toDouble();
	m_Parameter_[4].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5AB").toDouble();
	m_Parameter_[5].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6AB").toDouble();
	m_Parameter_[6].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7AB").toDouble();
	m_Parameter_[7].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8AB").toDouble();
	m_Parameter_[8].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9AB").toDouble();
	m_Parameter_[9].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10AB").toDouble();
	m_Parameter_[10].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11AB").toDouble();
	m_Parameter_[11].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12AB").toDouble();
	m_Parameter_[12].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13AB").toDouble();
	m_Parameter_[13].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14AB").toDouble();
	m_Parameter_[14].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15AB").toDouble();
	m_Parameter_[15].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16AB").toDouble();
	m_Parameter_[16].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17AB").toDouble();
	m_Parameter_[17].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18AB").toDouble();
	m_Parameter_[18].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19AB").toDouble();
	m_Parameter_[19].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20AB").toDouble();
	m_Parameter_[20].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21AB").toDouble();
	m_Parameter_[21].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22AB").toDouble();
	m_Parameter_[22].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23AB").toDouble();
	m_Parameter_[23].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24AB").toDouble();
	m_Parameter_[24].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25AB").toDouble();
	m_Parameter_[25].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26AB").toDouble();
	m_Parameter_[26].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27AB").toDouble();
	m_Parameter_[27].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28AB").toDouble();
	m_Parameter_[28].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29AB").toDouble();
	m_Parameter_[29].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30AB").toDouble();
	m_Parameter_[30].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31AB").toDouble();
	m_Parameter_[31].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32AB").toDouble();
	m_Parameter_[32].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33AB").toDouble();
	m_Parameter_[33].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34AB").toDouble();
	m_Parameter_[34].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35AB").toDouble();
	m_Parameter_[35].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36AB").toDouble();

	m_Parameter_[0].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1AL").toDouble();	//A闸门宽度
	m_Parameter_[1].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2AL").toDouble();
	m_Parameter_[2].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3AL").toDouble();
	m_Parameter_[3].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4AL").toDouble();
	m_Parameter_[4].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5AL").toDouble();
	m_Parameter_[5].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6AL").toDouble();
	m_Parameter_[6].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7AL").toDouble();
	m_Parameter_[7].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8AL").toDouble();
	m_Parameter_[8].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9AL").toDouble();
	m_Parameter_[9].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10AL").toDouble();
	m_Parameter_[10].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11AL").toDouble();
	m_Parameter_[11].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12AL").toDouble();
	m_Parameter_[12].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13AL").toDouble();
	m_Parameter_[13].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14AL").toDouble();
	m_Parameter_[14].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15AL").toDouble();
	m_Parameter_[15].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16AL").toDouble();
	m_Parameter_[16].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17AL").toDouble();
	m_Parameter_[17].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18AL").toDouble();
	m_Parameter_[18].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19AL").toDouble();
	m_Parameter_[19].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20AL").toDouble();
	m_Parameter_[20].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21AL").toDouble();
	m_Parameter_[21].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22AL").toDouble();
	m_Parameter_[22].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23AL").toDouble();
	m_Parameter_[23].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24AL").toDouble();
	m_Parameter_[24].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25AL").toDouble();
	m_Parameter_[25].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26AL").toDouble();
	m_Parameter_[26].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27AL").toDouble();
	m_Parameter_[27].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28AL").toDouble();
	m_Parameter_[28].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29AL").toDouble();
	m_Parameter_[29].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30AL").toDouble();
	m_Parameter_[30].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31AL").toDouble();
	m_Parameter_[31].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32AL").toDouble();
	m_Parameter_[32].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33AL").toDouble();
	m_Parameter_[33].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34AL").toDouble();
	m_Parameter_[34].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35AL").toDouble();
	m_Parameter_[35].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36AL").toDouble();

	m_Parameter_[0].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1AT").toDouble();	//A闸门阈值
	m_Parameter_[1].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2AT").toDouble();
	m_Parameter_[2].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3AT").toDouble();
	m_Parameter_[3].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4AT").toDouble();
	m_Parameter_[4].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5AT").toDouble();
	m_Parameter_[5].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6AT").toDouble();
	m_Parameter_[6].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7AT").toDouble();
	m_Parameter_[7].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8AT").toDouble();
	m_Parameter_[8].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9AT").toDouble();
	m_Parameter_[9].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10AT").toDouble();
	m_Parameter_[10].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11AT").toDouble();
	m_Parameter_[11].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12AT").toDouble();
	m_Parameter_[12].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13AT").toDouble();
	m_Parameter_[13].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14AT").toDouble();
	m_Parameter_[14].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15AT").toDouble();
	m_Parameter_[15].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16AT").toDouble();
	m_Parameter_[16].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17AT").toDouble();
	m_Parameter_[17].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18AT").toDouble();
	m_Parameter_[18].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19AT").toDouble();
	m_Parameter_[19].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20AT").toDouble();
	m_Parameter_[20].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21AT").toDouble();
	m_Parameter_[21].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22AT").toDouble();
	m_Parameter_[22].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23AT").toDouble();
	m_Parameter_[23].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24AT").toDouble();
	m_Parameter_[24].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25AT").toDouble();
	m_Parameter_[25].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26AT").toDouble();
	m_Parameter_[26].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27AT").toDouble();
	m_Parameter_[27].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28AT").toDouble();
	m_Parameter_[28].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29AT").toDouble();
	m_Parameter_[29].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30AT").toDouble();
	m_Parameter_[30].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31AT").toDouble();
	m_Parameter_[31].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32AT").toDouble();
	m_Parameter_[32].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33AT").toDouble();
	m_Parameter_[33].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34AT").toDouble();
	m_Parameter_[34].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35AT").toDouble();
	m_Parameter_[35].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36AT").toDouble();

	m_Parameter_[0].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1BB").toDouble();	//B闸门前沿
	m_Parameter_[1].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2BB").toDouble();
	m_Parameter_[2].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3BB").toDouble();
	m_Parameter_[3].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4BB").toDouble();
	m_Parameter_[4].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5BB").toDouble();
	m_Parameter_[5].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6BB").toDouble();
	m_Parameter_[6].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7BB").toDouble();
	m_Parameter_[7].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8BB").toDouble();
	m_Parameter_[8].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9BB").toDouble();
	m_Parameter_[9].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10BB").toDouble();
	m_Parameter_[10].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11BB").toDouble();
	m_Parameter_[11].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12BB").toDouble();
	m_Parameter_[12].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13BB").toDouble();
	m_Parameter_[13].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14BB").toDouble();
	m_Parameter_[14].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15BB").toDouble();
	m_Parameter_[15].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16BB").toDouble();
	m_Parameter_[16].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17BB").toDouble();
	m_Parameter_[17].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18BB").toDouble();
	m_Parameter_[18].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19BB").toDouble();
	m_Parameter_[19].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20BB").toDouble();
	m_Parameter_[20].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21BB").toDouble();
	m_Parameter_[21].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22BB").toDouble();
	m_Parameter_[22].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23BB").toDouble();
	m_Parameter_[23].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24BB").toDouble();
	m_Parameter_[24].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25BB").toDouble();
	m_Parameter_[25].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26BB").toDouble();
	m_Parameter_[26].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27BB").toDouble();
	m_Parameter_[27].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28BB").toDouble();
	m_Parameter_[28].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29BB").toDouble();
	m_Parameter_[29].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30BB").toDouble();
	m_Parameter_[30].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31BB").toDouble();
	m_Parameter_[31].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32BB").toDouble();
	m_Parameter_[32].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33BB").toDouble();
	m_Parameter_[33].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34BB").toDouble();
	m_Parameter_[34].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35BB").toDouble();
	m_Parameter_[35].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36BB").toDouble();

	m_Parameter_[0].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1BL").toDouble();	//B闸门宽度
	m_Parameter_[1].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2BL").toDouble();
	m_Parameter_[2].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3BL").toDouble();
	m_Parameter_[3].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4BL").toDouble();
	m_Parameter_[4].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5BL").toDouble();
	m_Parameter_[5].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6BL").toDouble();
	m_Parameter_[6].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7BL").toDouble();
	m_Parameter_[7].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8BL").toDouble();
	m_Parameter_[8].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9BL").toDouble();
	m_Parameter_[9].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10BL").toDouble();
	m_Parameter_[10].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11BL").toDouble();
	m_Parameter_[11].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12BL").toDouble();
	m_Parameter_[12].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13BL").toDouble();
	m_Parameter_[13].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14BL").toDouble();
	m_Parameter_[14].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15BL").toDouble();
	m_Parameter_[15].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16BL").toDouble();
	m_Parameter_[16].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17BL").toDouble();
	m_Parameter_[17].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18BL").toDouble();
	m_Parameter_[18].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19BL").toDouble();
	m_Parameter_[19].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20BL").toDouble();
	m_Parameter_[20].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21BL").toDouble();
	m_Parameter_[21].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22BL").toDouble();
	m_Parameter_[22].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23BL").toDouble();
	m_Parameter_[23].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24BL").toDouble();
	m_Parameter_[24].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25BL").toDouble();
	m_Parameter_[25].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26BL").toDouble();
	m_Parameter_[26].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27BL").toDouble();
	m_Parameter_[27].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28BL").toDouble();
	m_Parameter_[28].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29BL").toDouble();
	m_Parameter_[29].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30BL").toDouble();
	m_Parameter_[30].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31BL").toDouble();
	m_Parameter_[31].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32BL").toDouble();
	m_Parameter_[32].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33BL").toDouble();
	m_Parameter_[33].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34BL").toDouble();
	m_Parameter_[34].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35BL").toDouble();
	m_Parameter_[35].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36BL").toDouble();


	m_Parameter_[0].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1BT").toDouble();	//B闸门阈值
	m_Parameter_[1].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2BT").toDouble();
	m_Parameter_[2].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3BT").toDouble();
	m_Parameter_[3].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4BT").toDouble();
	m_Parameter_[4].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5BT").toDouble();
	m_Parameter_[5].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6BT").toDouble();
	m_Parameter_[6].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7BT").toDouble();
	m_Parameter_[7].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8BT").toDouble();
	m_Parameter_[8].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9BT").toDouble();
	m_Parameter_[9].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10BT").toDouble();
	m_Parameter_[10].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11BT").toDouble();
	m_Parameter_[11].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12BT").toDouble();
	m_Parameter_[12].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13BT").toDouble();
	m_Parameter_[13].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14BT").toDouble();
	m_Parameter_[14].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15BT").toDouble();
	m_Parameter_[15].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16BT").toDouble();
	m_Parameter_[16].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17BT").toDouble();
	m_Parameter_[17].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18BT").toDouble();
	m_Parameter_[18].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19BT").toDouble();
	m_Parameter_[19].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20BT").toDouble();
	m_Parameter_[20].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21BT").toDouble();
	m_Parameter_[21].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22BT").toDouble();
	m_Parameter_[22].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23BT").toDouble();
	m_Parameter_[23].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24BT").toDouble();
	m_Parameter_[24].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25BT").toDouble();
	m_Parameter_[25].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26BT").toDouble();
	m_Parameter_[26].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27BT").toDouble();
	m_Parameter_[27].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28BT").toDouble();
	m_Parameter_[28].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29BT").toDouble();
	m_Parameter_[29].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30BT").toDouble();
	m_Parameter_[30].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31BT").toDouble();
	m_Parameter_[31].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32BT").toDouble();
	m_Parameter_[32].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33BT").toDouble();
	m_Parameter_[33].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34BT").toDouble();
	m_Parameter_[34].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35BT").toDouble();
	m_Parameter_[35].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36BT").toDouble();

	m_Parameter_[0].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1I2B").toDouble();	//I2闸门前沿
	m_Parameter_[1].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2I2B").toDouble();
	m_Parameter_[2].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3I2B").toDouble();
	m_Parameter_[3].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4I2B").toDouble();
	m_Parameter_[4].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5I2B").toDouble();
	m_Parameter_[5].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6I2B").toDouble();
	m_Parameter_[6].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7I2B").toDouble();
	m_Parameter_[7].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8I2B").toDouble();
	m_Parameter_[8].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9I2B").toDouble();
	m_Parameter_[9].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10I2B").toDouble();
	m_Parameter_[10].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11I2B").toDouble();
	m_Parameter_[11].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12I2B").toDouble();
	m_Parameter_[12].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13I2B").toDouble();
	m_Parameter_[13].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14I2B").toDouble();
	m_Parameter_[14].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15I2B").toDouble();
	m_Parameter_[15].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16I2B").toDouble();
	m_Parameter_[16].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17I2B").toDouble();
	m_Parameter_[17].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18I2B").toDouble();
	m_Parameter_[18].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19I2B").toDouble();
	m_Parameter_[19].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20I2B").toDouble();
	m_Parameter_[20].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21I2B").toDouble();
	m_Parameter_[21].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22I2B").toDouble();
	m_Parameter_[22].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23I2B").toDouble();
	m_Parameter_[23].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24I2B").toDouble();
	m_Parameter_[24].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25I2B").toDouble();
	m_Parameter_[25].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26I2B").toDouble();
	m_Parameter_[26].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27I2B").toDouble();
	m_Parameter_[27].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28I2B").toDouble();
	m_Parameter_[28].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29I2B").toDouble();
	m_Parameter_[29].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30I2B").toDouble();
	m_Parameter_[30].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31I2B").toDouble();
	m_Parameter_[31].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32I2B").toDouble();
	m_Parameter_[32].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33I2B").toDouble();
	m_Parameter_[33].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34I2B").toDouble();
	m_Parameter_[34].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35I2B").toDouble();
	m_Parameter_[35].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36I2B").toDouble();

	m_Parameter_[0].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1I2L").toDouble();	//I2闸门宽度
	m_Parameter_[1].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2I2L").toDouble();
	m_Parameter_[2].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3I2L").toDouble();
	m_Parameter_[3].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4I2L").toDouble();
	m_Parameter_[4].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5I2L").toDouble();
	m_Parameter_[5].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6I2L").toDouble();
	m_Parameter_[6].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7I2L").toDouble();
	m_Parameter_[7].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8I2L").toDouble();
	m_Parameter_[8].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9I2L").toDouble();
	m_Parameter_[9].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10I2L").toDouble();
	m_Parameter_[10].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11I2L").toDouble();
	m_Parameter_[11].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12I2L").toDouble();
	m_Parameter_[12].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13I2L").toDouble();
	m_Parameter_[13].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14I2L").toDouble();
	m_Parameter_[14].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15I2L").toDouble();
	m_Parameter_[15].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16I2L").toDouble();
	m_Parameter_[16].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17I2L").toDouble();
	m_Parameter_[17].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18I2L").toDouble();
	m_Parameter_[18].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19I2L").toDouble();
	m_Parameter_[19].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20I2L").toDouble();
	m_Parameter_[20].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21I2L").toDouble();
	m_Parameter_[21].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22I2L").toDouble();
	m_Parameter_[22].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23I2L").toDouble();
	m_Parameter_[23].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24I2L").toDouble();
	m_Parameter_[24].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25I2L").toDouble();
	m_Parameter_[25].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26I2L").toDouble();
	m_Parameter_[26].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27I2L").toDouble();
	m_Parameter_[27].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28I2L").toDouble();
	m_Parameter_[28].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29I2L").toDouble();
	m_Parameter_[29].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30I2L").toDouble();
	m_Parameter_[30].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31I2L").toDouble();
	m_Parameter_[31].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32I2L").toDouble();
	m_Parameter_[32].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33I2L").toDouble();
	m_Parameter_[33].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34I2L").toDouble();
	m_Parameter_[34].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35I2L").toDouble();
	m_Parameter_[35].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36I2L").toDouble();

	m_Parameter_[0].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1I2T").toDouble();	//I2闸门阈值
	m_Parameter_[1].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2I2T").toDouble();
	m_Parameter_[2].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3I2T").toDouble();
	m_Parameter_[3].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4I2T").toDouble();
	m_Parameter_[4].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5I2T").toDouble();
	m_Parameter_[5].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6I2T").toDouble();
	m_Parameter_[6].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7I2T").toDouble();
	m_Parameter_[7].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8I2T").toDouble();
	m_Parameter_[8].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9I2T").toDouble();
	m_Parameter_[9].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10I2T").toDouble();
	m_Parameter_[10].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11I2T").toDouble();
	m_Parameter_[11].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12I2T").toDouble();
	m_Parameter_[12].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13I2T").toDouble();
	m_Parameter_[13].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14I2T").toDouble();
	m_Parameter_[14].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15I2T").toDouble();
	m_Parameter_[15].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16I2T").toDouble();
	m_Parameter_[16].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17I2T").toDouble();
	m_Parameter_[17].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18I2T").toDouble();
	m_Parameter_[18].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19I2T").toDouble();
	m_Parameter_[19].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20I2T").toDouble();
	m_Parameter_[20].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21I2T").toDouble();
	m_Parameter_[21].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22I2T").toDouble();
	m_Parameter_[22].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23I2T").toDouble();
	m_Parameter_[23].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24I2T").toDouble();
	m_Parameter_[24].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25I2T").toDouble();
	m_Parameter_[25].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26I2T").toDouble();
	m_Parameter_[26].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27I2T").toDouble();
	m_Parameter_[27].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28I2T").toDouble();
	m_Parameter_[28].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29I2T").toDouble();
	m_Parameter_[29].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30I2T").toDouble();
	m_Parameter_[30].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31I2T").toDouble();
	m_Parameter_[31].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32I2T").toDouble();
	m_Parameter_[32].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33I2T").toDouble();
	m_Parameter_[33].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34I2T").toDouble();
	m_Parameter_[34].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35I2T").toDouble();
	m_Parameter_[35].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36I2T").toDouble();

	//传递评判设置
	m_Parameter_[0].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe1").toInt();	//I闸门评判模式
	m_Parameter_[1].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe2").toInt();
	m_Parameter_[2].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe3").toInt();
	m_Parameter_[3].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe4").toInt();
	m_Parameter_[4].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe5").toInt();
	m_Parameter_[5].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe6").toInt();
	m_Parameter_[6].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe7").toInt();
	m_Parameter_[7].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe8").toInt();
	m_Parameter_[8].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe9").toInt();
	m_Parameter_[9].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe10").toInt();
	m_Parameter_[10].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe11").toInt();
	m_Parameter_[11].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe12").toInt();
	m_Parameter_[12].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe13").toInt();
	m_Parameter_[13].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe14").toInt();
	m_Parameter_[14].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe15").toInt();
	m_Parameter_[15].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe16").toInt();
	m_Parameter_[16].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe17").toInt();
	m_Parameter_[17].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe18").toInt();
	m_Parameter_[18].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe19").toInt();
	m_Parameter_[19].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe20").toInt();
	m_Parameter_[20].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe21").toInt();
	m_Parameter_[21].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe22").toInt();
	m_Parameter_[22].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe23").toInt();
	m_Parameter_[23].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe24").toInt();
	m_Parameter_[24].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe25").toInt();
	m_Parameter_[25].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe26").toInt();
	m_Parameter_[26].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe27").toInt();
	m_Parameter_[27].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe28").toInt();
	m_Parameter_[28].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe29").toInt();
	m_Parameter_[29].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe30").toInt();
	m_Parameter_[30].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe31").toInt();
	m_Parameter_[31].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe32").toInt();
	m_Parameter_[32].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe33").toInt();
	m_Parameter_[33].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe34").toInt();
	m_Parameter_[34].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe35").toInt();
	m_Parameter_[35].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe36").toInt();

	m_Parameter_[0].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe1").toInt();	//A闸门评判模式
	m_Parameter_[1].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe2").toInt();
	m_Parameter_[2].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe3").toInt();
	m_Parameter_[3].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe4").toInt();
	m_Parameter_[4].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe5").toInt();
	m_Parameter_[5].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe6").toInt();
	m_Parameter_[6].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe7").toInt();
	m_Parameter_[7].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe8").toInt();
	m_Parameter_[8].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe9").toInt();
	m_Parameter_[9].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe10").toInt();
	m_Parameter_[10].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe11").toInt();
	m_Parameter_[11].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe12").toInt();
	m_Parameter_[12].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe13").toInt();
	m_Parameter_[13].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe14").toInt();
	m_Parameter_[14].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe15").toInt();
	m_Parameter_[15].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe16").toInt();
	m_Parameter_[16].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe17").toInt();
	m_Parameter_[17].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe18").toInt();
	m_Parameter_[18].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe19").toInt();
	m_Parameter_[19].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe20").toInt();
	m_Parameter_[20].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe21").toInt();
	m_Parameter_[21].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe22").toInt();
	m_Parameter_[22].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe23").toInt();
	m_Parameter_[23].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe24").toInt();
	m_Parameter_[24].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe25").toInt();
	m_Parameter_[25].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe26").toInt();
	m_Parameter_[26].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe27").toInt();
	m_Parameter_[27].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe28").toInt();
	m_Parameter_[28].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe29").toInt();
	m_Parameter_[29].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe30").toInt();
	m_Parameter_[30].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe31").toInt();
	m_Parameter_[31].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe32").toInt();
	m_Parameter_[32].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe33").toInt();
	m_Parameter_[33].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe34").toInt();
	m_Parameter_[34].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe35").toInt();
	m_Parameter_[35].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe36").toInt();

	m_Parameter_[0].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe1").toInt();	//B闸门评判模式
	m_Parameter_[1].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe2").toInt();
	m_Parameter_[2].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe3").toInt();
	m_Parameter_[3].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe4").toInt();
	m_Parameter_[4].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe5").toInt();
	m_Parameter_[5].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe6").toInt();
	m_Parameter_[6].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe7").toInt();
	m_Parameter_[7].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe8").toInt();
	m_Parameter_[8].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe9").toInt();
	m_Parameter_[9].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe10").toInt();
	m_Parameter_[10].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe11").toInt();
	m_Parameter_[11].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe12").toInt();
	m_Parameter_[12].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe13").toInt();
	m_Parameter_[13].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe14").toInt();
	m_Parameter_[14].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe15").toInt();
	m_Parameter_[15].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe16").toInt();
	m_Parameter_[16].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe17").toInt();
	m_Parameter_[17].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe18").toInt();
	m_Parameter_[18].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe19").toInt();
	m_Parameter_[19].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe20").toInt();
	m_Parameter_[20].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe21").toInt();
	m_Parameter_[21].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe22").toInt();
	m_Parameter_[22].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe23").toInt();
	m_Parameter_[23].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe24").toInt();
	m_Parameter_[24].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe25").toInt();
	m_Parameter_[25].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe26").toInt();
	m_Parameter_[26].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe27").toInt();
	m_Parameter_[27].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe28").toInt();
	m_Parameter_[28].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe29").toInt();
	m_Parameter_[29].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe30").toInt();
	m_Parameter_[30].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe31").toInt();
	m_Parameter_[31].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe32").toInt();
	m_Parameter_[32].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe33").toInt();
	m_Parameter_[33].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe34").toInt();
	m_Parameter_[34].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe35").toInt();
	m_Parameter_[35].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe36").toInt();

	m_Parameter_[0].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe1").toInt();	//I2闸门评判模式
	m_Parameter_[1].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe2").toInt();
	m_Parameter_[2].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe3").toInt();
	m_Parameter_[3].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe4").toInt();
	m_Parameter_[4].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe5").toInt();
	m_Parameter_[5].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe6").toInt();
	m_Parameter_[6].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe7").toInt();
	m_Parameter_[7].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe8").toInt();
	m_Parameter_[8].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe9").toInt();
	m_Parameter_[9].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe10").toInt();
	m_Parameter_[10].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe11").toInt();
	m_Parameter_[11].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe12").toInt();
	m_Parameter_[12].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe13").toInt();
	m_Parameter_[13].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe14").toInt();
	m_Parameter_[14].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe15").toInt();
	m_Parameter_[15].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe16").toInt();
	m_Parameter_[16].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe17").toInt();
	m_Parameter_[17].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe18").toInt();
	m_Parameter_[18].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe19").toInt();
	m_Parameter_[19].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe20").toInt();
	m_Parameter_[20].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe21").toInt();
	m_Parameter_[21].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe22").toInt();
	m_Parameter_[22].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe23").toInt();
	m_Parameter_[23].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe24").toInt();
	m_Parameter_[24].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe25").toInt();
	m_Parameter_[25].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe26").toInt();
	m_Parameter_[26].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe27").toInt();
	m_Parameter_[27].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe28").toInt();
	m_Parameter_[28].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe29").toInt();
	m_Parameter_[29].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe30").toInt();
	m_Parameter_[30].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe31").toInt();
	m_Parameter_[31].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe32").toInt();
	m_Parameter_[32].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe33").toInt();
	m_Parameter_[33].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe34").toInt();
	m_Parameter_[34].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe35").toInt();
	m_Parameter_[35].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe36").toInt();

	//传递降噪数
	m_Parameter_[0].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe1").toInt();	//I闸门降噪数
	m_Parameter_[1].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe2").toInt();
	m_Parameter_[2].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe3").toInt();
	m_Parameter_[3].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe4").toInt();
	m_Parameter_[4].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe5").toInt();
	m_Parameter_[5].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe6").toInt();
	m_Parameter_[6].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe7").toInt();
	m_Parameter_[7].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe8").toInt();
	m_Parameter_[8].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe9").toInt();
	m_Parameter_[9].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe10").toInt();
	m_Parameter_[10].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe11").toInt();
	m_Parameter_[11].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe12").toInt();
	m_Parameter_[12].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe13").toInt();
	m_Parameter_[13].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe14").toInt();
	m_Parameter_[14].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe15").toInt();
	m_Parameter_[15].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe16").toInt();
	m_Parameter_[16].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe17").toInt();
	m_Parameter_[17].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe18").toInt();
	m_Parameter_[18].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe19").toInt();
	m_Parameter_[19].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe20").toInt();
	m_Parameter_[20].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe21").toInt();
	m_Parameter_[21].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe22").toInt();
	m_Parameter_[22].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe23").toInt();
	m_Parameter_[23].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe24").toInt();
	m_Parameter_[24].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe25").toInt();
	m_Parameter_[25].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe26").toInt();
	m_Parameter_[26].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe27").toInt();
	m_Parameter_[27].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe28").toInt();
	m_Parameter_[28].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe29").toInt();
	m_Parameter_[29].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe30").toInt();
	m_Parameter_[30].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe31").toInt();
	m_Parameter_[31].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe32").toInt();
	m_Parameter_[32].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe33").toInt();
	m_Parameter_[33].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe34").toInt();
	m_Parameter_[34].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe35").toInt();
	m_Parameter_[35].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe36").toInt();

	m_Parameter_[0].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe1").toInt();	//A闸门降噪数
	m_Parameter_[1].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe2").toInt();
	m_Parameter_[2].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe3").toInt();
	m_Parameter_[3].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe4").toInt();
	m_Parameter_[4].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe5").toInt();
	m_Parameter_[5].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe6").toInt();
	m_Parameter_[6].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe7").toInt();
	m_Parameter_[7].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe8").toInt();
	m_Parameter_[8].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe9").toInt();
	m_Parameter_[9].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe10").toInt();
	m_Parameter_[10].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe11").toInt();
	m_Parameter_[11].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe12").toInt();
	m_Parameter_[12].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe13").toInt();
	m_Parameter_[13].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe14").toInt();
	m_Parameter_[14].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe15").toInt();
	m_Parameter_[15].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe16").toInt();
	m_Parameter_[16].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe17").toInt();
	m_Parameter_[17].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe18").toInt();
	m_Parameter_[18].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe19").toInt();
	m_Parameter_[19].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe20").toInt();
	m_Parameter_[20].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe21").toInt();
	m_Parameter_[21].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe22").toInt();
	m_Parameter_[22].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe23").toInt();
	m_Parameter_[23].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe24").toInt();
	m_Parameter_[24].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe25").toInt();
	m_Parameter_[25].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe26").toInt();
	m_Parameter_[26].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe27").toInt();
	m_Parameter_[27].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe28").toInt();
	m_Parameter_[28].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe29").toInt();
	m_Parameter_[29].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe30").toInt();
	m_Parameter_[30].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe31").toInt();
	m_Parameter_[31].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe32").toInt();
	m_Parameter_[32].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe33").toInt();
	m_Parameter_[33].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe34").toInt();
	m_Parameter_[34].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe35").toInt();
	m_Parameter_[35].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe36").toInt();

	m_Parameter_[0].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe1").toInt();	//B闸门降噪数
	m_Parameter_[1].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe2").toInt();
	m_Parameter_[2].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe3").toInt();
	m_Parameter_[3].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe4").toInt();
	m_Parameter_[4].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe5").toInt();
	m_Parameter_[5].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe6").toInt();
	m_Parameter_[6].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe7").toInt();
	m_Parameter_[7].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe8").toInt();
	m_Parameter_[8].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe9").toInt();
	m_Parameter_[9].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe10").toInt();
	m_Parameter_[10].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe11").toInt();
	m_Parameter_[11].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe12").toInt();
	m_Parameter_[12].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe13").toInt();
	m_Parameter_[13].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe14").toInt();
	m_Parameter_[14].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe15").toInt();
	m_Parameter_[15].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe16").toInt();
	m_Parameter_[16].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe17").toInt();
	m_Parameter_[17].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe18").toInt();
	m_Parameter_[18].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe19").toInt();
	m_Parameter_[19].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe20").toInt();
	m_Parameter_[20].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe21").toInt();
	m_Parameter_[21].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe22").toInt();
	m_Parameter_[22].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe23").toInt();
	m_Parameter_[23].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe24").toInt();
	m_Parameter_[24].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe25").toInt();
	m_Parameter_[25].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe26").toInt();
	m_Parameter_[26].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe27").toInt();
	m_Parameter_[27].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe28").toInt();
	m_Parameter_[28].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe29").toInt();
	m_Parameter_[29].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe30").toInt();
	m_Parameter_[30].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe31").toInt();
	m_Parameter_[31].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe32").toInt();
	m_Parameter_[32].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe33").toInt();
	m_Parameter_[33].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe34").toInt();
	m_Parameter_[34].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe35").toInt();
	m_Parameter_[35].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe36").toInt();

	m_Parameter_[0].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe1").toInt();	//I2闸门降噪数
	m_Parameter_[1].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe2").toInt();
	m_Parameter_[2].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe3").toInt();
	m_Parameter_[3].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe4").toInt();
	m_Parameter_[4].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe5").toInt();
	m_Parameter_[5].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe6").toInt();
	m_Parameter_[6].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe7").toInt();
	m_Parameter_[7].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe8").toInt();
	m_Parameter_[8].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe9").toInt();
	m_Parameter_[9].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe10").toInt();
	m_Parameter_[10].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe11").toInt();
	m_Parameter_[11].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe12").toInt();
	m_Parameter_[12].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe13").toInt();
	m_Parameter_[13].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe14").toInt();
	m_Parameter_[14].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe15").toInt();
	m_Parameter_[15].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe16").toInt();
	m_Parameter_[16].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe17").toInt();
	m_Parameter_[17].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe18").toInt();
	m_Parameter_[18].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe19").toInt();
	m_Parameter_[19].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe20").toInt();
	m_Parameter_[20].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe21").toInt();
	m_Parameter_[21].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe22").toInt();
	m_Parameter_[22].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe23").toInt();
	m_Parameter_[23].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe24").toInt();
	m_Parameter_[24].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe25").toInt();
	m_Parameter_[25].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe26").toInt();
	m_Parameter_[26].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe27").toInt();
	m_Parameter_[27].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe28").toInt();
	m_Parameter_[28].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe29").toInt();
	m_Parameter_[29].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe30").toInt();
	m_Parameter_[30].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe31").toInt();
	m_Parameter_[31].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe32").toInt();
	m_Parameter_[32].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe33").toInt();
	m_Parameter_[33].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe34").toInt();
	m_Parameter_[34].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe35").toInt();
	m_Parameter_[35].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe36").toInt();
}
void GuanTan::ShowOpen()
{
	Show_Parameter();
	m_ParameterSetting.m_ShowParameter.show();
}
void GuanTan::JudgeOpen()
{
	Judge_Parameter();
	m_ParameterSetting.m_JudgeParameter.show();
	m_ParameterSetting.m_JudgeParameter.ui.lineEditCutNoise->setText(QString::number(m_nCutNoise));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditCutNoise_2->setText(QString::number(m_nCutNoise2));

	if (m_nThickDrawType == 1)
	{
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setChecked(true);
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setChecked(false);
	}
	else if (m_nThickDrawType == 2)
	{
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setChecked(false);
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setChecked(true);
	}
	else if (m_nThickDrawType == 3)
	{
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setChecked(true);
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setChecked(true);
	}
	else
	{
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick1->setChecked(false);
		m_ParameterSetting.m_JudgeParameter.ui.checkBoxThick2->setChecked(false);
	}

	
}
void GuanTan::JudgeDo()
{
	QString str = QFileDialog::getOpenFileName(this, tr("选择评判参数配置文件"), tr("D:/管探参数/"), "INI(*.ini)");
	if (str != NULL)
		m_ParameterSetting.m_qsJudgeParameter = str;
 	Judge_Parameter();
	m_ParameterSetting.close();
	m_ParameterSetting.show();
}
void GuanTan::ShowDo()
{
	QString str = QFileDialog::getOpenFileName(this, tr("选择显示参数配置文件"), tr("D:/管探参数/"), "INI(*.ini)");
	if (str != NULL)	
		m_ParameterSetting.m_qsShowParameter = str;
	Show_Parameter();
	m_ParameterSetting.close();
	m_ParameterSetting.show();
}
void GuanTan::UltrasoundDo()
{
	QString str = QFileDialog::getOpenFileName(this, tr("选择超声参数配置文件"), tr("D:/管探参数/"), "INI(*.ini)");
	if (str != NULL)
		m_ParameterSetting.m_qsUltrasoundparameter = str;
	Ultrasound_Parameter();
	m_ParameterSetting.close();
	m_ParameterSetting.show();
}
void GuanTan::OrderDo()
{
	QString str = QFileDialog::getOpenFileName(this, tr("选择订单参数配置文件"), tr("D:/管探参数/"), "INI(*.ini)");
	if (str != NULL)
		m_ParameterSetting.m_qsOrderParameter = str;
	Order_Parameter();
	m_ParameterSetting.close();
	m_ParameterSetting.show();
}
void GuanTan::AllParameterYes()
{
	m_ParameterSetting.close();
	m_Ascan.close();	
	QSettings settings_Order(m_ParameterSetting.m_qsOrderParameter,QSettings::IniFormat); // 当前目录的INI文件 

//管探主界面订单参数显示
	labelOrderNumber->setText(QString(settings_Order.value("OrderNumber/num").toString()));
	labelSteelTubeCount->setText(QString(settings_Order.value("Count/num").toString()));
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->setCurrentIndex(settings_Order.value("m_nDiameter/cur").toInt());
	QString a = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText();
	labelDiameter->setText(QString(a));
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->setCurrentIndex(settings_Order.value("m_nLength/cur").toInt());
	QString b = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText();
	labelLength->setText(QString(b));
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->setCurrentIndex(settings_Order.value("m_nThickness/cur").toInt());
	QString c = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText();
	labelThickness->setText(QString(c));
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->setCurrentIndex(settings_Order.value("m_nSteelTubeLevel/cur").toInt());
	QString d = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText();
	labelSteelTubeLevel->setText(QString(d));
	if (m_bOrderNew)
	{
		m_ORDER_PARAMETER.nSteelNumber = 0;
		m_bOver = FALSE;
		m_nAcCount = 0;
		m_nReCount = 0;
		m_nBaCount = 0;
		m_bOrderNew = 0;
	}

//订单参数传递给结构体
	m_ORDER_PARAMETER.strOrderNumber = settings_Order.value("OrderNumber/num").toString();
	m_ORDER_PARAMETER.nSteelCount = settings_Order.value("Count/num").toInt();
	m_ORDER_PARAMETER.strSteelRank = d;
	m_ORDER_PARAMETER.nSteelDia = a.toInt();
	m_ORDER_PARAMETER.fSteelPly = c.toFloat();
	m_ORDER_PARAMETER.nSteelLength = b.toInt();

	QString strFile = "./Order/" + m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text() + ".ini";
	QSettings settingsOrder(strFile,QSettings::IniFormat); // 当前目录的INI文件
	QFile file(strFile);
	if (!file.open(QIODevice::ReadWrite | QIODevice::Text))
	{
		QMessageBox::information(this,tr("订单信息"),tr("新订单信息文件已经建立!"));
	}
	settingsOrder.beginGroup(m_ORDER_PARAMETER.strOrderNumber);
	settingsOrder.setValue("Count",QString::number(m_ORDER_PARAMETER.nSteelCount));
	settingsOrder.setValue("SteelNumber", QString(m_ParameterSetting.m_OrderParameter.ui.lineEditSteelName->text()));
	settingsOrder.setValue("Dia",QString::number(m_ORDER_PARAMETER.nSteelDia));
	settingsOrder.setValue("Length",QString::number(m_ORDER_PARAMETER.nSteelLength));
	settingsOrder.setValue("Thickness",QString::number(m_ORDER_PARAMETER.fSteelPly));
	settingsOrder.setValue("Rank",QString(m_ORDER_PARAMETER.strSteelRank));
	settingsOrder.endGroup();

//评判参数传递给结构体
	QSettings settings_JudgeParameter(m_ParameterSetting.m_qsJudgeParameter, QSettings::IniFormat); // 当前目录的INI文件
	m_JADGE_PARAMETER.nMarkYOut = settings_JudgeParameter.value("mark/YOut").toInt();
	m_JADGE_PARAMETER.nMarkYIn = settings_JudgeParameter.value("mark/YIn").toInt();
	m_JADGE_PARAMETER.nMarkXOut = settings_JudgeParameter.value("mark/XOut").toInt();
	m_JADGE_PARAMETER.nMarkXIn = settings_JudgeParameter.value("mark/XIn").toInt();
	m_JADGE_PARAMETER.nMarkPlyCut = settings_JudgeParameter.value("mark/PlyCut").toInt();
	m_JADGE_PARAMETER.nMarkPlyAdd = settings_JudgeParameter.value("mark/PlyAdd").toInt();
	m_JADGE_PARAMETER.nMarkLayering = settings_JudgeParameter.value("mark/Layering").toInt();
	m_JADGE_PARAMETER.nYesCouplingNumber = settings_JudgeParameter.value("chose/YesCouplingNumber").toInt();
	m_JADGE_PARAMETER.nYesCouplingLength = settings_JudgeParameter.value("chose/YesCouplingLength").toInt();
	m_JADGE_PARAMETER.nYesFaultNumber = settings_JudgeParameter.value("chose/YesFaultNumber").toInt();
	m_JADGE_PARAMETER.nYesFaultLength = settings_JudgeParameter.value("chose/YesFaultLength").toInt();
	m_JADGE_PARAMETER.nNoCouplingNumber = settings_JudgeParameter.value("chose/NoCouplingNumber").toInt();
	m_JADGE_PARAMETER.nNoCouplingLength = settings_JudgeParameter.value("chose/NoCouplingLength").toInt();
	m_JADGE_PARAMETER.nNoFaultNumber = settings_JudgeParameter.value("chose/NoFaultNumber").toInt();
	m_JADGE_PARAMETER.nNoFaultLength = settings_JudgeParameter.value("chose/NoFaultLength").toInt();
	m_JADGE_PARAMETER.nCouplingNumber = settings_JudgeParameter.value("chose/CouplingNumber").toInt();
	m_JADGE_PARAMETER.nCouplingLength = settings_JudgeParameter.value("chose/CouplingLength").toInt();
	m_JADGE_PARAMETER.bLightOpen = settings_JudgeParameter.value("alarm/m_bSoundOpen").toInt();
	m_JADGE_PARAMETER.bSoundOpen = settings_JudgeParameter.value("alarm/m_bLightOpen").toInt();

//显示参数传递给结构体
	QSettings settings_showParameter(m_ParameterSetting.m_qsShowParameter, QSettings::IniFormat); // 当前目录的INI文件
	m_SHOW_PARAMETER.fShowMaxLength = settings_showParameter.value("0000001/Length").toFloat();
	m_SHOW_PARAMETER.fShowToleranceMin = settings_showParameter.value("0000001/ToleranceMin").toFloat();
	m_SHOW_PARAMETER.fShowToleranceMax = settings_showParameter.value("0000001/ToleranceMax").toFloat();
	m_SHOW_PARAMETER.fShowLimitsMin = settings_showParameter.value("0000001/LimitsMin").toFloat();
	m_SHOW_PARAMETER.fShowLimitsMax = settings_showParameter.value("0000001/LimitsMax").toFloat();
	m_SHOW_PARAMETER.fShowPly = m_ParameterSetting.m_ShowParameter.ui.lineEditPly->text().toFloat();
	m_fPIPE_LENGTH = m_SHOW_PARAMETER.fShowMaxLength;
	spinBoxLeftPart->setRange(0,m_fPIPE_LENGTH-PIPE_MIN_SHOW_LENGTH);
	spinBoxRightPart->setRange(PIPE_MIN_SHOW_LENGTH,m_fPIPE_LENGTH);
	m_fThickMaxTolerance = m_SHOW_PARAMETER.fShowToleranceMax;
	m_fThickMinTolerance = m_SHOW_PARAMETER.fShowToleranceMin;
	m_fRangeMax = m_SHOW_PARAMETER.fShowLimitsMax;
	m_fRangeMin = m_SHOW_PARAMETER.fShowLimitsMin;
	m_fCurThick = m_SHOW_PARAMETER.fShowPly;
	LeftPartUpdate();
	RightPartUpdate();
	
//超声参数传递给结构体
	QSettings settings_UltrasoundParameter(m_ParameterSetting.m_qsUltrasoundparameter, QSettings::IniFormat); // 当前目录的INI文件

	//传递增益
	m_Ascan.m_ChannelInfo[0].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe1").toFloat();	
	m_Ascan.m_ChannelInfo[1].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe2").toFloat();
	m_Ascan.m_ChannelInfo[2].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe3").toFloat();
	m_Ascan.m_ChannelInfo[3].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe4").toFloat();
	m_Ascan.m_ChannelInfo[4].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe5").toFloat();
	m_Ascan.m_ChannelInfo[5].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe6").toFloat();
	m_Ascan.m_ChannelInfo[6].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe7").toFloat();
	m_Ascan.m_ChannelInfo[7].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe8").toFloat();
	m_Ascan.m_ChannelInfo[8].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe9").toFloat();
	m_Ascan.m_ChannelInfo[9].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe10").toFloat();
	m_Ascan.m_ChannelInfo[10].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe11").toFloat();
	m_Ascan.m_ChannelInfo[11].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe12").toFloat();
	m_Ascan.m_ChannelInfo[12].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe13").toFloat();
	m_Ascan.m_ChannelInfo[13].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe14").toFloat();
	m_Ascan.m_ChannelInfo[14].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe15").toFloat();
	m_Ascan.m_ChannelInfo[15].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe16").toFloat();
	m_Ascan.m_ChannelInfo[16].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe17").toFloat();
	m_Ascan.m_ChannelInfo[17].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe18").toFloat();
	m_Ascan.m_ChannelInfo[18].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe19").toFloat();
	m_Ascan.m_ChannelInfo[19].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe20").toFloat();
	m_Ascan.m_ChannelInfo[20].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe21").toFloat();
	m_Ascan.m_ChannelInfo[21].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe22").toFloat();
	m_Ascan.m_ChannelInfo[22].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe23").toFloat();
	m_Ascan.m_ChannelInfo[23].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe24").toFloat();
	m_Ascan.m_ChannelInfo[24].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe25").toFloat();
	m_Ascan.m_ChannelInfo[25].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe26").toFloat();
	m_Ascan.m_ChannelInfo[26].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe27").toFloat();
	m_Ascan.m_ChannelInfo[27].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe28").toFloat();
	m_Ascan.m_ChannelInfo[28].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe29").toFloat();
	m_Ascan.m_ChannelInfo[29].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe30").toFloat();
	m_Ascan.m_ChannelInfo[30].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe31").toFloat();
	m_Ascan.m_ChannelInfo[31].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe32").toFloat();
	m_Ascan.m_ChannelInfo[32].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe33").toFloat();
	m_Ascan.m_ChannelInfo[33].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe34").toFloat();
	m_Ascan.m_ChannelInfo[34].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe35").toFloat();
	m_Ascan.m_ChannelInfo[35].m_fChannelPlus = settings_UltrasoundParameter.value("Gain/Probe36").toFloat();

	//传递参考增益
	m_Ascan.m_ChannelInfo[0].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe1").toFloat();	
	m_Ascan.m_ChannelInfo[1].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe2").toFloat();
	m_Ascan.m_ChannelInfo[2].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe3").toFloat();
	m_Ascan.m_ChannelInfo[3].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe4").toFloat();
	m_Ascan.m_ChannelInfo[4].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe5").toFloat();
	m_Ascan.m_ChannelInfo[5].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe6").toFloat();
	m_Ascan.m_ChannelInfo[6].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe7").toFloat();
	m_Ascan.m_ChannelInfo[7].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe8").toFloat();
	m_Ascan.m_ChannelInfo[8].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe9").toFloat();
	m_Ascan.m_ChannelInfo[9].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe10").toFloat();
	m_Ascan.m_ChannelInfo[10].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe11").toFloat();
	m_Ascan.m_ChannelInfo[11].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe12").toFloat();
	m_Ascan.m_ChannelInfo[12].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe13").toFloat();
	m_Ascan.m_ChannelInfo[13].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe14").toFloat();
	m_Ascan.m_ChannelInfo[14].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe15").toFloat();
	m_Ascan.m_ChannelInfo[15].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe16").toFloat();
	m_Ascan.m_ChannelInfo[16].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe17").toFloat();
	m_Ascan.m_ChannelInfo[17].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe18").toFloat();
	m_Ascan.m_ChannelInfo[18].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe19").toFloat();
	m_Ascan.m_ChannelInfo[19].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe20").toFloat();
	m_Ascan.m_ChannelInfo[20].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe21").toFloat();
	m_Ascan.m_ChannelInfo[21].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe22").toFloat();
	m_Ascan.m_ChannelInfo[22].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe23").toFloat();
	m_Ascan.m_ChannelInfo[23].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe24").toFloat();
	m_Ascan.m_ChannelInfo[24].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe25").toFloat();
	m_Ascan.m_ChannelInfo[25].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe26").toFloat();
	m_Ascan.m_ChannelInfo[26].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe27").toFloat();
	m_Ascan.m_ChannelInfo[27].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe28").toFloat();
	m_Ascan.m_ChannelInfo[28].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe29").toFloat();
	m_Ascan.m_ChannelInfo[29].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe30").toFloat();
	m_Ascan.m_ChannelInfo[30].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe31").toFloat();
	m_Ascan.m_ChannelInfo[31].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe32").toFloat();
	m_Ascan.m_ChannelInfo[32].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe33").toFloat();
	m_Ascan.m_ChannelInfo[33].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe34").toFloat();
	m_Ascan.m_ChannelInfo[34].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe35").toFloat();
	m_Ascan.m_ChannelInfo[35].m_fChannelCPlus = settings_UltrasoundParameter.value("CGain/Probe36").toFloat();

	//传递声速
	m_Ascan.m_ChannelInfo[0].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe1").toInt();	
	m_Ascan.m_ChannelInfo[1].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_nWaveSpeed = settings_UltrasoundParameter.value("SoundSpeed/Probe36").toInt();
	m_Ascan.m_ChannelInfo->m_nWaterWaveSpeed =  settings_UltrasoundParameter.value("SoundSpeed/Speed").toInt();

	//传递延迟
	m_Ascan.m_ChannelInfo[0].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe1").toFloat();	
	m_Ascan.m_ChannelInfo[1].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe2").toFloat();
	m_Ascan.m_ChannelInfo[2].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe3").toFloat();
	m_Ascan.m_ChannelInfo[3].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe4").toFloat();
	m_Ascan.m_ChannelInfo[4].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe5").toFloat();
	m_Ascan.m_ChannelInfo[5].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe6").toFloat();
	m_Ascan.m_ChannelInfo[6].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe7").toFloat();
	m_Ascan.m_ChannelInfo[7].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe8").toFloat();
	m_Ascan.m_ChannelInfo[8].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe9").toFloat();
	m_Ascan.m_ChannelInfo[9].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe10").toFloat();
	m_Ascan.m_ChannelInfo[10].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe11").toFloat();
	m_Ascan.m_ChannelInfo[11].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe12").toFloat();
	m_Ascan.m_ChannelInfo[12].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe13").toFloat();
	m_Ascan.m_ChannelInfo[13].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe14").toFloat();
	m_Ascan.m_ChannelInfo[14].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe15").toFloat();
	m_Ascan.m_ChannelInfo[15].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe16").toFloat();
	m_Ascan.m_ChannelInfo[16].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe17").toFloat();
	m_Ascan.m_ChannelInfo[17].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe18").toFloat();
	m_Ascan.m_ChannelInfo[18].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe19").toFloat();
	m_Ascan.m_ChannelInfo[19].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe20").toFloat();
	m_Ascan.m_ChannelInfo[20].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe21").toFloat();
	m_Ascan.m_ChannelInfo[21].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe22").toFloat();
	m_Ascan.m_ChannelInfo[22].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe23").toFloat();
	m_Ascan.m_ChannelInfo[23].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe24").toFloat();
	m_Ascan.m_ChannelInfo[24].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe25").toFloat();
	m_Ascan.m_ChannelInfo[25].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe26").toFloat();
	m_Ascan.m_ChannelInfo[26].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe27").toFloat();
	m_Ascan.m_ChannelInfo[27].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe28").toFloat();
	m_Ascan.m_ChannelInfo[28].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe29").toFloat();
	m_Ascan.m_ChannelInfo[29].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe30").toFloat();
	m_Ascan.m_ChannelInfo[30].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe31").toFloat();
	m_Ascan.m_ChannelInfo[31].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe32").toFloat();
	m_Ascan.m_ChannelInfo[32].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe33").toFloat();
	m_Ascan.m_ChannelInfo[33].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe34").toFloat();
	m_Ascan.m_ChannelInfo[34].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe35").toFloat();
	m_Ascan.m_ChannelInfo[35].m_fChannelDelay = settings_UltrasoundParameter.value("BurstDelay/Probe36").toFloat();

	//传递评判模式
	m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe1").toInt();	//I闸门评判模式
	m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_bOpen = settings_UltrasoundParameter.value("Judge/IProbe36").toInt();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe1").toInt();	//A闸门评判模式
	m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_bOpen = settings_UltrasoundParameter.value("Judge/AProbe36").toInt();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe1").toInt();	//B闸门评判模式
	m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_bOpen = settings_UltrasoundParameter.value("Judge/BProbe36").toInt();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe1").toInt();	//I2闸门评判模式
	m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_bOpen = settings_UltrasoundParameter.value("Judge/I2Probe36").toInt();

	//传递降噪数
	m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe1").toInt();	//I闸门降噪数
	m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/IProbe36").toInt();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe1").toInt();	//A闸门降噪数
	m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/AProbe36").toInt();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe1").toInt();	//B闸门降噪数
	m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/BProbe36").toInt();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe1").toInt();	//I2闸门降噪数
	m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_nStaNoise = settings_UltrasoundParameter.value("StaNoise/I2Probe36").toInt();

	//传递重复频率
	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe1").toInt();
	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe2").toInt();
	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe3").toInt();
	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe4").toInt();
	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe5").toInt();
	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe6").toInt();
	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe7").toInt();
	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe8").toInt();
	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe9").toInt();
	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe10").toInt();
	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe11").toInt();
	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe12").toInt();
	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe13").toInt();
	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe14").toInt();
	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe15").toInt();
	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe16").toInt();
	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe17").toInt();
	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe18").toInt();
	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe19").toInt();
	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe20").toInt();
	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe21").toInt();
	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe22").toInt();
	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe23").toInt();
	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe24").toInt();
	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe25").toInt();
	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe26").toInt();
	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe27").toInt();
	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe28").toInt();
	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe29").toInt();
	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe30").toInt();
	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe31").toInt();
	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe32").toInt();
	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe33").toInt();
	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe34").toInt();
	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe35").toInt();
	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_wReFreq = settings_UltrasoundParameter.value("ReFreq/Probe36").toInt();


	//传递探头设置-探头频率
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe1Hz").toInt())
	{
		case 0:	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
		case 1:	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
		case 2:	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
		case 3:	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
		case 4:	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
		default:m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe2Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe3Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe4Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe5Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe6Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe7Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe8Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe9Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe10Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_eProbeFreq = TYPE_05M;		break;
	case 2:	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe11Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe12Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe13Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe14Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe15Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe16Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe17Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe18Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe19Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe20Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe21Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe22Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe23Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe24Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe25Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe26Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe27Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe28Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe29Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe30Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe31Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe32Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe33Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe34Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe35Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	switch(settings_UltrasoundParameter.value("ProbeSet/Probe36Hz").toInt())
	{
	case 0:	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_eProbeFreq = TYPE_1M;		break;
	case 1:	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_eProbeFreq = TYPE_05M;	break;
	case 2:	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_eProbeFreq = TYPE_2M;		break;
	case 3:	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_eProbeFreq = TYPE_WIDE;	break;
	case 4:	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_eProbeFreq = TYPE_5M;		break;
	default:m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_eProbeFreq = TYPE_205M;	break;
	}
	//传递探头设置-折射角
	m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe1Cor").toFloat();
	m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe2Cor").toFloat();
	m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe3Cor").toFloat();
	m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe4Cor").toFloat();
	m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe5Cor").toFloat();
	m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe6Cor").toFloat();
	m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe7Cor").toFloat();
	m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe8Cor").toFloat();
	m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe9Cor").toFloat();
	m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe10Cor").toFloat();
	m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe11Cor").toFloat();
	m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe12Cor").toFloat();
	m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe13Cor").toFloat();
	m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe14Cor").toFloat();
	m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe15Cor").toFloat();
	m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe16Cor").toFloat();
	m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe17Cor").toFloat();
	m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe18Cor").toFloat();
	m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe19Cor").toFloat();
	m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe20Cor").toFloat();
	m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe21Cor").toFloat();
	m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe22Cor").toFloat();
	m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe23Cor").toFloat();
	m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe24Cor").toFloat();
	m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe25Cor").toFloat();
	m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe26Cor").toFloat();
	m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe27Cor").toFloat();
	m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe28Cor").toFloat();
	m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe29Cor").toFloat();
	m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe30Cor").toFloat();
	m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe31Cor").toFloat();
	m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe32Cor").toFloat();
	m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe33Cor").toFloat();
	m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe34Cor").toFloat();
	m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe35Cor").toFloat();
	m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_fRefAngle = settings_UltrasoundParameter.value("ProbeSet/Probe36Cor").toFloat();
	//传递范围
	m_Ascan.m_ChannelInfo[0].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe1").toFloat();
	m_Ascan.m_ChannelInfo[1].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe2").toFloat();
	m_Ascan.m_ChannelInfo[2].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe3").toFloat();
	m_Ascan.m_ChannelInfo[3].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe4").toFloat();
	m_Ascan.m_ChannelInfo[4].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe5").toFloat();
	m_Ascan.m_ChannelInfo[5].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe6").toFloat();
	m_Ascan.m_ChannelInfo[6].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe7").toFloat();
	m_Ascan.m_ChannelInfo[7].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe8").toFloat();
	m_Ascan.m_ChannelInfo[8].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe9").toFloat();
	m_Ascan.m_ChannelInfo[9].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe10").toFloat();
	m_Ascan.m_ChannelInfo[10].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe11").toFloat();
	m_Ascan.m_ChannelInfo[11].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe12").toFloat();
	m_Ascan.m_ChannelInfo[12].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe13").toFloat();
	m_Ascan.m_ChannelInfo[13].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe14").toFloat();
	m_Ascan.m_ChannelInfo[14].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe15").toFloat();
	m_Ascan.m_ChannelInfo[15].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe16").toFloat();
	m_Ascan.m_ChannelInfo[16].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe17").toFloat();
	m_Ascan.m_ChannelInfo[17].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe18").toFloat();
	m_Ascan.m_ChannelInfo[18].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe19").toFloat();
	m_Ascan.m_ChannelInfo[19].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe20").toFloat();
	m_Ascan.m_ChannelInfo[20].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe21").toFloat();
	m_Ascan.m_ChannelInfo[21].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe22").toFloat();
	m_Ascan.m_ChannelInfo[22].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe23").toFloat();
	m_Ascan.m_ChannelInfo[23].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe24").toFloat();
	m_Ascan.m_ChannelInfo[24].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe25").toFloat();
	m_Ascan.m_ChannelInfo[25].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe26").toFloat();
	m_Ascan.m_ChannelInfo[26].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe27").toFloat();
	m_Ascan.m_ChannelInfo[27].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe28").toFloat();
	m_Ascan.m_ChannelInfo[28].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe29").toFloat();
	m_Ascan.m_ChannelInfo[29].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe30").toFloat();
	m_Ascan.m_ChannelInfo[30].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe31").toFloat();
	m_Ascan.m_ChannelInfo[31].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe32").toFloat();
	m_Ascan.m_ChannelInfo[32].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe33").toFloat();
	m_Ascan.m_ChannelInfo[33].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe34").toFloat();
	m_Ascan.m_ChannelInfo[34].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe35").toFloat();
	m_Ascan.m_ChannelInfo[35].m_fChannelRange = settings_UltrasoundParameter.value("Range/Probe36").toFloat();

	//传递抑制
	m_Ascan.m_ChannelInfo[0].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe1").toFloat();
	m_Ascan.m_ChannelInfo[1].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe2").toFloat();
	m_Ascan.m_ChannelInfo[2].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe3").toFloat();
	m_Ascan.m_ChannelInfo[3].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe4").toFloat();
	m_Ascan.m_ChannelInfo[4].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe5").toFloat();
	m_Ascan.m_ChannelInfo[5].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe6").toFloat();
	m_Ascan.m_ChannelInfo[6].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe7").toFloat();
	m_Ascan.m_ChannelInfo[7].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe8").toFloat();
	m_Ascan.m_ChannelInfo[8].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe9").toFloat();
	m_Ascan.m_ChannelInfo[9].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe10").toFloat();
	m_Ascan.m_ChannelInfo[10].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe11").toFloat();
	m_Ascan.m_ChannelInfo[11].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe12").toFloat();
	m_Ascan.m_ChannelInfo[12].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe13").toFloat();
	m_Ascan.m_ChannelInfo[13].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe14").toFloat();
	m_Ascan.m_ChannelInfo[14].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe15").toFloat();
	m_Ascan.m_ChannelInfo[15].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe16").toFloat();
	m_Ascan.m_ChannelInfo[16].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe17").toFloat();
	m_Ascan.m_ChannelInfo[17].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe18").toFloat();
	m_Ascan.m_ChannelInfo[18].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe19").toFloat();
	m_Ascan.m_ChannelInfo[19].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe20").toFloat();
	m_Ascan.m_ChannelInfo[20].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe21").toFloat();
	m_Ascan.m_ChannelInfo[21].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe22").toFloat();
	m_Ascan.m_ChannelInfo[22].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe23").toFloat();
	m_Ascan.m_ChannelInfo[23].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe24").toFloat();
	m_Ascan.m_ChannelInfo[24].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe25").toFloat();
	m_Ascan.m_ChannelInfo[25].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe26").toFloat();
	m_Ascan.m_ChannelInfo[26].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe27").toFloat();
	m_Ascan.m_ChannelInfo[27].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe28").toFloat();
	m_Ascan.m_ChannelInfo[28].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe29").toFloat();
	m_Ascan.m_ChannelInfo[29].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe30").toFloat();
	m_Ascan.m_ChannelInfo[30].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe31").toFloat();
	m_Ascan.m_ChannelInfo[31].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe32").toFloat();
	m_Ascan.m_ChannelInfo[32].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe33").toFloat();
	m_Ascan.m_ChannelInfo[33].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe34").toFloat();
	m_Ascan.m_ChannelInfo[34].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe35").toFloat();
	m_Ascan.m_ChannelInfo[35].m_fRestrain = settings_UltrasoundParameter.value("Suppression/Probe36").toFloat();

	//传递闸门设置
	m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1IB").toDouble();	//I闸门前沿
	m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2IB").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3IB").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4IB").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5IB").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6IB").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7IB").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8IB").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9IB").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10IB").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11IB").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12IB").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13IB").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14IB").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15IB").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16IB").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17IB").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18IB").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19IB").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20IB").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21IB").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22IB").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23IB").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24IB").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25IB").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26IB").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27IB").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28IB").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29IB").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30IB").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31IB").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32IB").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33IB").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34IB").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35IB").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36IB").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1IL").toDouble();	//I闸门宽度
	m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2IL").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3IL").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4IL").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5IL").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6IL").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7IL").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8IL").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9IL").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10IL").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11IL").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12IL").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13IL").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14IL").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15IL").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16IL").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17IL").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18IL").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19IL").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20IL").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21IL").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22IL").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23IL").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24IL").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25IL").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26IL").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27IL").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28IL").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29IL").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30IL").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31IL").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32IL").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33IL").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34IL").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35IL").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36IL").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1IT").toDouble();	//I闸门阈值
	m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2IT").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3IT").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4IT").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5IT").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6IT").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7IT").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8IT").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9IT").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10IT").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11IT").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12IT").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13IT").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14IT").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15IT").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16IT").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17IT").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18IT").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19IT").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20IT").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21IT").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22IT").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23IT").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24IT").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25IT").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26IT").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27IT").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28IT").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29IT").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30IT").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31IT").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32IT").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33IT").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34IT").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35IT").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36IT").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1AB").toDouble();	//A闸门前沿
	m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2AB").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3AB").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4AB").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5AB").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6AB").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7AB").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8AB").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9AB").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10AB").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11AB").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12AB").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13AB").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14AB").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15AB").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16AB").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17AB").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18AB").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19AB").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20AB").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21AB").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22AB").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23AB").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24AB").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25AB").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26AB").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27AB").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28AB").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29AB").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30AB").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31AB").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32AB").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33AB").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34AB").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35AB").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36AB").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1AL").toDouble();	//A闸门宽度
	m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2AL").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3AL").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4AL").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5AL").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6AL").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7AL").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8AL").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9AL").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10AL").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11AL").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12AL").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13AL").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14AL").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15AL").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16AL").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17AL").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18AL").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19AL").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20AL").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21AL").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22AL").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23AL").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24AL").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25AL").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26AL").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27AL").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28AL").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29AL").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30AL").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31AL").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32AL").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33AL").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34AL").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35AL").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36AL").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1AT").toDouble();	//A闸门阈值
	m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2AT").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3AT").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4AT").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5AT").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6AT").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7AT").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8AT").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9AT").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10AT").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11AT").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12AT").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13AT").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14AT").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15AT").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16AT").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17AT").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18AT").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19AT").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20AT").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21AT").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22AT").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23AT").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24AT").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25AT").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26AT").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27AT").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28AT").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29AT").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30AT").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31AT").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32AT").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33AT").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34AT").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35AT").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36AT").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1BB").toDouble();	//B闸门前沿
	m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2BB").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3BB").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4BB").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5BB").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6BB").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7BB").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8BB").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9BB").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10BB").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11BB").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12BB").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13BB").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14BB").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15BB").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16BB").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17BB").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18BB").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19BB").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20BB").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21BB").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22BB").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23BB").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24BB").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25BB").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26BB").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27BB").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28BB").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29BB").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30BB").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31BB").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32BB").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33BB").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34BB").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35BB").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36BB").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1BL").toDouble();	//B闸门宽度
	m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2BL").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3BL").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4BL").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5BL").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6BL").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7BL").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8BL").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9BL").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10BL").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11BL").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12BL").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13BL").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14BL").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15BL").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16BL").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17BL").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18BL").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19BL").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20BL").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21BL").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22BL").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23BL").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24BL").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25BL").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26BL").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27BL").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28BL").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29BL").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30BL").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31BL").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32BL").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33BL").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34BL").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35BL").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36BL").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1BT").toDouble();	//B闸门阈值
	m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2BT").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3BT").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4BT").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5BT").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6BT").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7BT").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8BT").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9BT").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10BT").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11BT").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12BT").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13BT").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14BT").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15BT").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16BT").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17BT").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18BT").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19BT").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20BT").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21BT").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22BT").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23BT").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24BT").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25BT").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26BT").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27BT").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28BT").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29BT").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30BT").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31BT").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32BT").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33BT").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34BT").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35BT").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36BT").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe1I2B").toDouble();	//I2闸门前沿
	m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe2I2B").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe3I2B").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe4I2B").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe5I2B").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe6I2B").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe7I2B").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe8I2B").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe9I2B").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe10I2B").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe11I2B").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe12I2B").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe13I2B").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe14I2B").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe15I2B").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe16I2B").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe17I2B").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe18I2B").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe19I2B").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe20I2B").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe21I2B").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe22I2B").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe23I2B").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe24I2B").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe25I2B").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe26I2B").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe27I2B").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe28I2B").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe29I2B").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe30I2B").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe31I2B").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe32I2B").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe33I2B").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe34I2B").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe35I2B").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_fFrontGate = settings_UltrasoundParameter.value("GateSet/Probe36I2B").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe1I2L").toDouble();	//I2闸门宽度
	m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe2I2L").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe3I2L").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe4I2L").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe5I2L").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe6I2L").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe7I2L").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe8I2L").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe9I2L").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe10I2L").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe11I2L").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe12I2L").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe13I2L").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe14I2L").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe15I2L").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe16I2L").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe17I2L").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe18I2L").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe19I2L").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe20I2L").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe21I2L").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe22I2L").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe23I2L").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe24I2L").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe25I2L").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe26I2L").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe27I2L").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe28I2L").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe29I2L").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe30I2L").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe31I2L").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe32I2L").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe33I2L").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe34I2L").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe35I2L").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_fBackGate = settings_UltrasoundParameter.value("GateSet/Probe36I2L").toDouble();

	m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe1I2T").toDouble();	//I2闸门阈值
	m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe2I2T").toDouble();
	m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe3I2T").toDouble();
	m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe4I2T").toDouble();
	m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe5I2T").toDouble();
	m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe6I2T").toDouble();
	m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe7I2T").toDouble();
	m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe8I2T").toDouble();
	m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe9I2T").toDouble();
	m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe10I2T").toDouble();
	m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe11I2T").toDouble();
	m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe12I2T").toDouble();
	m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe13I2T").toDouble();
	m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe14I2T").toDouble();
	m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe15I2T").toDouble();
	m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe16I2T").toDouble();
	m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe17I2T").toDouble();
	m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe18I2T").toDouble();
	m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe19I2T").toDouble();
	m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe20I2T").toDouble();
	m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe21I2T").toDouble();
	m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe22I2T").toDouble();
	m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe23I2T").toDouble();
	m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe24I2T").toDouble();
	m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe25I2T").toDouble();
	m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe26I2T").toDouble();
	m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe27I2T").toDouble();
	m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe28I2T").toDouble();
	m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe29I2T").toDouble();
	m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe30I2T").toDouble();
	m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe31I2T").toDouble();
	m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe32I2T").toDouble();
	m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe33I2T").toDouble();
	m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe34I2T").toDouble();
	m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe35I2T").toDouble();
	m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_fPeakGate = settings_UltrasoundParameter.value("GateSet/Probe36I2T").toDouble();

	//传递盲区始末端
	m_nStartDeadZone = settings_UltrasoundParameter.value("DeadZone/m_nStartDeadZone").toInt();			//始端盲区	wangwei add on 2013-12-12
	m_nEndDeadZone = settings_UltrasoundParameter.value("DeadZone/m_nEndDeadZone").toInt();				//末端盲区	wangwei add on 2013-12-12

	labelWholeParams->setText(QString(m_qsShowAll));
	spinBoxRightPart->setValue(m_fPIPE_LENGTH);
	spinBoxLeftPart->setValue(0);
	m_SHOW_PARAMETER.fShowMaxLength = m_fPIPE_LENGTH;
	m_Ascan.InitConfigInfo();
	m_Ascan.ProbeChange();
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		labelParameter->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
	}
	else
	{
		labelParameter->setStyleSheet(QString::fromUtf8("background-color:rgb(255,0,0);"));
	}

	//报表部分  wangwei add on 2013-12-14
	QSettings setting(m_strFormItem,QSettings::IniFormat);//读配置文件
	int nTemp1 = m_FormItem.ui.comboBoxOperator->count();//获取四个comboBox的数量
	int nTemp2 = m_FormItem.ui.comboBoxClasse->count();
	int nTemp3 = m_FormItem.ui.comboBoxTestStandard->count();
	int nTemp4 = m_FormItem.ui.comboBoxTestRank->count();
	//操作工的初始化
	for (int i = 0;i < nTemp1;i++)
	{
		m_FormItem.ui.comboBoxOperator->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value("Operator/" + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxOperator->addItem(setting.value("Operator/" + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxOperator->setCurrentIndex(setting.value("Operator/cur").toInt() - 1);
	//班次的初始化
	for (int i = 0;i < nTemp2;i++)
	{
		m_FormItem.ui.comboBoxClasse->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value("Shift/" + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxClasse->addItem(setting.value("Shift/" + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxClasse->setCurrentIndex(setting.value("Shift/cur").toInt() - 1);
	//检测标准的初始化
	for (int i = 0;i < nTemp3;i++)
	{
		m_FormItem.ui.comboBoxTestStandard->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value("Standard/" + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxTestStandard->addItem(setting.value("Standard/" + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxTestStandard->setCurrentIndex(setting.value("Standard/cur").toInt() - 1);
	FormItemTestRankUpdate();
	labelTestStandard->setText(QString(m_FormItem.ui.comboBoxTestStandard->currentText()));
	labelTestLevel->setText(QString(m_FormItem.ui.comboBoxTestRank->currentText()));
	m_strOperator = m_FormItem.ui.comboBoxOperator->currentText();
	pushButtonOperatorShow->setText(tr("当前操作工:") + m_FormItem.ui.comboBoxOperator->currentText());
	m_fCurPersent = (m_fCurThick + m_fThickMinTolerance)/m_fCurThick;
	//wangwei add on 2013-12-14
	DataJudge();//更新评判结果
	m_Ascan.m_bSetAll = true;

	//-->给OPC发送仪器状态和钢管参数 王威-2013-12-14
#if HAVE_OPC
	OPCHANDLE phServer[3];
	VARIANT values[3];
	phServer[0] = m_OPCComponent.m_pItemResult[1].hServer;//WSState
	phServer[1] = m_OPCComponent.m_pItemResult[2].hServer;//PipeLength
	phServer[2] = m_OPCComponent.m_pItemResult[3].hServer;//PipeDiameter
	values[0].vt = VT_UI1;
	values[0].bVal = 1;
	values[1].vt = VT_UI4;
	values[1].uintVal = m_ORDER_PARAMETER.nSteelLength;//钢管长度
	values[2].vt = VT_UI4;
	values[2].uintVal = m_ORDER_PARAMETER.nSteelDia;//钢管直径
	pushButtonParameterState->setText(tr("发送数据中..."));
	WriteOPCItem(phServer, values,3);
#endif
	pushButtonParameterState->setText(tr("仪器就绪"));
	//<--王威-2013-12-14

	labelTestSteelNumber->setText(m_ParameterSetting.m_OrderParameter.ui.lineEditSteelName->text()); //显示当前检测的钢管号
}
void GuanTan::AllParameterNo()
{
	m_ParameterSetting.close();
}
void GuanTan::AllParameterSaveAs()
{
	// 	QFileDialog textsave(this,tr("保存"));		//win7系统英文版
	// 	textsave.setAcceptMode(QFileDialog::AcceptSave);
	// 	textsave.setFileMode(QFileDialog::AnyFile);
	// 	textsave.setViewMode(QFileDialog::Detail);
	// 	QStringList qt;
	// 	textsave.exec();
	// 	qt = textsave.selectedFiles();
	// 	QFile file(qt.at(0));
	// 	file.open(QIODevice::WriteOnly);
	// 	QSettings settings_order(qt.at(0), QSettings::IniFormat); 
	QString str = QFileDialog::getSaveFileName(this, tr("总体参数文件保存"), tr("D:/管探参数/"), "INI(*.ini)"); //xp系统中文版
 	QFile file(str);
	file.open(QIODevice::WriteOnly);
	QSettings settings_Parameter(str, QSettings::IniFormat); // 当前目录的INI文件 
	settings_Parameter.beginGroup(QString("Parameter"));
	settings_Parameter.setValue("Order",QString(m_ParameterSetting.m_qsOrderParameter));
	settings_Parameter.setValue("Ultrasound",QString(m_ParameterSetting.m_qsUltrasoundparameter));
	settings_Parameter.setValue("Show",QString(m_ParameterSetting.m_qsShowParameter));
	settings_Parameter.setValue("Judge",QString(m_ParameterSetting.m_qsJudgeParameter));
}
void GuanTan::AllParameterDo()
{
	// 	QFileDialog *fileDialog = new QFileDialog(this);			//英文界面,但适应win7 系统
	// 	fileDialog->setWindowTitle(tr("选择总体参数配置文件")); 
	// 	fileDialog->setDirectory("D:/管探参数/"); 
	// 	fileDialog->setFilter(tr("Image Files(*.ini)")); 
	// 	QString str;
	// 	if(fileDialog->exec() == QDialog::Accepted) 
	// 	{ 
	// 		str = fileDialog->selectedFiles()[0]; 
	// 		m_ParameterSetting.m_qsParameter = str;
	// 	} 
	// 	else 
	// 	{ 
	// 		QMessageBox::warning(NULL, tr("Path"), tr("您没有选择任何文件")); 
	// 	}
	QString str = QFileDialog::getOpenFileName(this, tr("选择总体参数配置文件"), tr("D:/管探参数/"), "INI(*.ini)");	//中文路径,但win7系统下运行不稳定
	if (str != NULL)
	{
		m_ParameterSetting.m_qsParameter = str;
	}
	else
	{
		QMessageBox::warning(NULL, tr("Path"), tr("您没有选择任何文件"));
	}
	int nFirst = m_ParameterSetting.m_qsParameter.lastIndexOf(QRegExp(QString("/")),m_ParameterSetting.m_qsParameter.size()-1);
	m_qsShowAll = m_ParameterSetting.m_qsParameter.right(m_ParameterSetting.m_qsParameter.size()-1-nFirst);
	m_ParameterSetting.ui.lineEditAll->setText(QString(m_qsShowAll));
	QSettings settings_All(m_ParameterSetting.m_qsParameter, QSettings::IniFormat); // 当前选择的INI文件 
	m_ParameterSetting.m_qsOrderParameter = settings_All.value("Parameter/Order").toString();
	m_ParameterSetting.m_qsUltrasoundparameter = settings_All.value("Parameter/Ultrasound").toString();
	m_ParameterSetting.m_qsShowParameter = settings_All.value("Parameter/Show").toString();
	m_ParameterSetting.m_qsJudgeParameter = settings_All.value("Parameter/Judge").toString();
	Order_Parameter();
	Ultrasound_Parameter();
	Show_Parameter();
	Judge_Parameter();
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setEnabled(true);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(true);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
	}
	else
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(false);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(false);
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
	}
	m_ParameterSetting.m_ShowParameter.ui.lineEditPly->setText(QString(m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText()));
	m_ParameterSetting.close();
	m_ParameterSetting.show();
}
void GuanTan::OrderParameterYes()
{
	m_ParameterSetting.m_OrderParameter.close();
	QSettings settings_Order(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前选择的INI文件 
	settings_Order.setValue("m_nDiameter/cur",m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentIndex());
	settings_Order.setValue("m_nLength/cur",m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentIndex());
	settings_Order.setValue("m_nThickness/cur",m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentIndex());
	settings_Order.setValue("m_nSteelTubeLevel/cur",m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentIndex());
	settings_Order.setValue("OrderNumber/num",m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text());
	settings_Order.setValue("Count/num",m_ParameterSetting.m_OrderParameter.ui.lineEditSteelNumber->text());
	settings_Order.setValue("SteelNumber/name", m_ParameterSetting.m_OrderParameter.ui.lineEditSteelName->text());
	m_ParameterSetting.m_ShowParameter.ui.lineEditPly->setText(QString(m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText()));
	m_bOrderNew = 1;
}
void GuanTan::OrderParameterNo()
{
	m_ParameterSetting.m_OrderParameter.close();
	m_bOrderNew = 0;
}

void GuanTan::OrderParameterSaveAs()
{
// 	QFileDialog textsave(this,tr("订单参数保存"));
// 	textsave.setAcceptMode(QFileDialog::AcceptSave);
// 	textsave.setFileMode(QFileDialog::AnyFile);
// 	textsave.setViewMode(QFileDialog::Detail);
// 	QStringList qt;
// 	textsave.exec();
// 	qt = textsave.selectedFiles();
// 	QFile file(qt.at(0));
// 	file.open(QIODevice::WriteOnly);
// 	QSettings settings_order(qt.at(0), QSettings::IniFormat); 
	QString str = QFileDialog::getSaveFileName(this, tr("订单参数文件保存"), tr("D:/管探参数/"), "INI(*.ini)"); //xp系统中文版
	QFile file(str);
	file.open(QIODevice::WriteOnly);
	QSettings settings_order(str, QSettings::IniFormat);
	settings_order.beginGroup("OrderNumber");
	settings_order.setValue("num",QString(m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text()));
	settings_order.endGroup();
	settings_order.beginGroup("Count");
	settings_order.setValue("num",QString(m_ParameterSetting.m_OrderParameter.ui.lineEditSteelNumber->text()));
	settings_order.endGroup();

	settings_order.beginGroup("m_nDiameter");
	settings_order.setValue("cur",QString::number(m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentIndex()));
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->count();
	for (int i = 0;i < nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->setCurrentIndex(i);
		settings_order.setValue(QString::number(i+1),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText());
	}
	settings_order.endGroup();

	settings_order.beginGroup("m_nLength");
	settings_order.setValue("cur",QString::number(m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentIndex()));
	nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->count();
	for (int i = 0;i < nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->setCurrentIndex(i);
		settings_order.setValue(QString::number(i+1),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText());
	}
	settings_order.endGroup();

	settings_order.beginGroup("m_nThickness");
	settings_order.setValue("cur",QString::number(m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentIndex()));
	nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->count();
	for (int i = 0;i < nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->setCurrentIndex(i);
		settings_order.setValue(QString::number(i+1),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText());
	}
	settings_order.endGroup();

	settings_order.beginGroup("m_nSteelTubeLevel");
	settings_order.setValue("cur",QString::number(m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentIndex()));
	nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->count();
	for (int i = 0;i < nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->setCurrentIndex(i);
		settings_order.setValue(QString::number(i+1),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText());
	}
	settings_order.endGroup();
}
void GuanTan::OrderDiaAdd()
{
	QString qsDia = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("添加失败!列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->setCurrentIndex(i);
		if (m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText() != qsDia)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->addItem(qsDia);
		QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("m_nDiameter");
		settings.setValue((QString::number(nAdd+1)),QString(qsDia));
		QMessageBox::information(this,tr("添加"),tr("添加成功!"));
	}
	else
	{
		QMessageBox::warning(this,tr("添加"),tr("添加失败!此栏目已经存在!"));
	}
}

void GuanTan::OrderDiaCut()
{
	int nCurNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentIndex();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->count();
	QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->removeItem(nCurNum);
	settings.beginGroup("m_nDiameter");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	int nlist[80],ntemp;
	for (int i = 0;i<nNum-1;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->setCurrentIndex(i);
		nlist[i] = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText().toInt();
	}
	for (int i = 0;i<nNum-1;i++)
	{
		for (int j = 0;j<nNum-1;j++)
		{
			if (nlist[i]>nlist[j])
			{
				ntemp = nlist[i];
				nlist[i] = nlist[j];
				nlist[j] = ntemp;
			}
		}	
	}
	for (int i = 0;i<nNum-1;i++)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->removeItem(0);
	for (int i = nNum-2;i>=0;i--)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->addItem(QString::number(nlist[i]));
	for (int i = 1;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->setCurrentIndex(i-1);
		settings.setValue(QString::number(i),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText());
	}
}

void GuanTan::OrderLengthAdd()
{
	QString qsLength = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->setCurrentIndex(i);
		if (m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText() != qsLength)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->addItem(qsLength);
		QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("m_nLength");
		settings.setValue((QString::number(nAdd+1)),QString(qsLength));
		QMessageBox::information(this,tr("添加"),tr("添加成功!"));
	}
	else
	{
		QMessageBox::warning(this,tr("添加"),tr("添加失败!此栏目已经存在!"));
	}
}

void GuanTan::OrderLengthCut()
{
	int nCurNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentIndex();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->count();
	QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->removeItem(nCurNum);
	settings.beginGroup("m_nLength");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	int nlist[80],ntemp;
	for (int i = 0;i<nNum-1;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->setCurrentIndex(i);
		nlist[i] = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText().toInt();
	}
	for (int i = 0;i<nNum-1;i++)
	{
		for (int j = 0;j<nNum-1;j++)
		{
			if (nlist[i]>nlist[j])
			{
				ntemp = nlist[i];
				nlist[i] = nlist[j];
				nlist[j] = ntemp;
			}
		}	
	}
	for (int i = 0;i<nNum-1;i++)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->removeItem(0);
	for (int i = nNum-2;i>=0;i--)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->addItem(QString::number(nlist[i]));
	for (int i = 1;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->setCurrentIndex(i-1);
		settings.setValue(QString::number(i),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText());
	}
}

void GuanTan::OrderPlyAdd()
{
	QString qsPly = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->setCurrentIndex(i);
		if (m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText() != qsPly)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->addItem(qsPly);
		QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("m_nThickness");
		settings.setValue((QString::number(nAdd+1)),QString(qsPly));
		QMessageBox::information(this,tr("添加"),tr("添加成功!"));
	}
	else
	{
		QMessageBox::warning(this,tr("添加"),tr("添加失败!此栏目已经存在!"));
	}
}

void GuanTan::OrderPlyCut()
{
	int nCurNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentIndex();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->count();
	QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->removeItem(nCurNum);
	settings.beginGroup("m_nThickness");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	int nlist[80],ntemp;
	for (int i = 0;i<nNum-1;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->setCurrentIndex(i);
		nlist[i] = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText().toInt();
	}
	for (int i = 0;i<nNum-1;i++)
	{
		for (int j = 0;j<nNum-1;j++)
		{
			if (nlist[i]>nlist[j])
			{
				ntemp = nlist[i];
				nlist[i] = nlist[j];
				nlist[j] = ntemp;
			}
		}	
	}
	for (int i = 0;i<nNum-1;i++)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->removeItem(0);
	for (int i = nNum-2;i>=0;i--)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->addItem(QString::number(nlist[i]));
	for (int i = 1;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->setCurrentIndex(i-1);
		settings.setValue(QString::number(i),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText());
	}
}

void GuanTan::OrderRankAdd()
{
	QString qsRank = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->setCurrentIndex(i);
		if (m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText() != qsRank)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->addItem(qsRank);
		QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("m_nSteelTubeLevel");
		settings.setValue((QString::number(nAdd+1)),QString(qsRank));
		QMessageBox::information(this,tr("添加"),tr("添加成功!"));
	}
	else
	{
		QMessageBox::warning(this,tr("添加"),tr("添加失败!此栏目已经存在!"));
	}
}

void GuanTan::OrderRankCut()
{
	int nCurNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentIndex();
	int nNum = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->count();
	QSettings settings(m_ParameterSetting.m_qsOrderParameter, QSettings::IniFormat); // 当前目录的INI文件
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->removeItem(nCurNum);
	settings.beginGroup("m_nSteelTubeLevel");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	int nlist[80],ntemp;
	for (int i = 0;i<nNum-1;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->setCurrentIndex(i);
		nlist[i] = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText().toInt();
	}
	for (int i = 0;i<nNum-1;i++)
	{
		for (int j = 0;j<nNum-1;j++)
		{
			if (nlist[i]>nlist[j])
			{
				ntemp = nlist[i];
				nlist[i] = nlist[j];
				nlist[j] = ntemp;
			}
		}	
	}
	for (int i = 0;i<nNum-1;i++)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->removeItem(0);
	for (int i = nNum-2;i>=0;i--)
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->addItem(QString::number(nlist[i]));
	for (int i = 1;i<nNum;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->setCurrentIndex(i-1);
		settings.setValue(QString::number(i),m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText());
	}
}

void GuanTan::UltrasoundParameterYes()
{
	m_ParameterSetting.m_UltrasoundParameter.close();
	if (m_bGain)
	{
		QSettings Setting_Gain(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_Gain.setValue("Gain/Probe1",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe1->text());
		Setting_Gain.setValue("Gain/Probe2",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe2->text());
		Setting_Gain.setValue("Gain/Probe3",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe3->text());
		Setting_Gain.setValue("Gain/Probe4",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe4->text());
		Setting_Gain.setValue("Gain/Probe5",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe5->text());
		Setting_Gain.setValue("Gain/Probe6",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe6->text());
		Setting_Gain.setValue("Gain/Probe7",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe7->text());
		Setting_Gain.setValue("Gain/Probe8",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe8->text());
		Setting_Gain.setValue("Gain/Probe9",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe9->text());
		Setting_Gain.setValue("Gain/Probe10",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe10->text());
		Setting_Gain.setValue("Gain/Probe11",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe11->text());
		Setting_Gain.setValue("Gain/Probe12",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe12->text());
		Setting_Gain.setValue("Gain/Probe13",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe13->text());
		Setting_Gain.setValue("Gain/Probe14",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe14->text());
		Setting_Gain.setValue("Gain/Probe15",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe15->text());
		Setting_Gain.setValue("Gain/Probe16",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe16->text());
		Setting_Gain.setValue("Gain/Probe17",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe17->text());
		Setting_Gain.setValue("Gain/Probe18",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe18->text());
		Setting_Gain.setValue("Gain/Probe19",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe19->text());
		Setting_Gain.setValue("Gain/Probe20",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe20->text());
		Setting_Gain.setValue("Gain/Probe21",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe21->text());
		Setting_Gain.setValue("Gain/Probe22",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe22->text());
		Setting_Gain.setValue("Gain/Probe23",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe23->text());
		Setting_Gain.setValue("Gain/Probe24",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe24->text());
		Setting_Gain.setValue("Gain/Probe25",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe25->text());
		Setting_Gain.setValue("Gain/Probe26",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe26->text());
		Setting_Gain.setValue("Gain/Probe27",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe27->text());
		Setting_Gain.setValue("Gain/Probe28",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe28->text());
		Setting_Gain.setValue("Gain/Probe29",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe29->text());
		Setting_Gain.setValue("Gain/Probe30",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe30->text());
		Setting_Gain.setValue("Gain/Probe31",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe31->text());
		Setting_Gain.setValue("Gain/Probe32",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe32->text());
		Setting_Gain.setValue("Gain/Probe33",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe33->text());
		Setting_Gain.setValue("Gain/Probe34",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe34->text());
		Setting_Gain.setValue("Gain/Probe35",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe35->text());
		Setting_Gain.setValue("Gain/Probe36",m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe36->text());
	}
	if (m_bCGain)
	{
		QSettings Setting_CGain(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_CGain.setValue("CGain/Probe1",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe1->text());
		Setting_CGain.setValue("CGain/Probe2",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe2->text());
		Setting_CGain.setValue("CGain/Probe3",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe3->text());
		Setting_CGain.setValue("CGain/Probe4",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe4->text());
		Setting_CGain.setValue("CGain/Probe5",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe5->text());
		Setting_CGain.setValue("CGain/Probe6",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe6->text());
		Setting_CGain.setValue("CGain/Probe7",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe7->text());
		Setting_CGain.setValue("CGain/Probe8",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe8->text());
		Setting_CGain.setValue("CGain/Probe9",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe9->text());
		Setting_CGain.setValue("CGain/Probe10",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe10->text());
		Setting_CGain.setValue("CGain/Probe11",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe11->text());
		Setting_CGain.setValue("CGain/Probe12",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe12->text());
		Setting_CGain.setValue("CGain/Probe13",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe13->text());
		Setting_CGain.setValue("CGain/Probe14",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe14->text());
		Setting_CGain.setValue("CGain/Probe15",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe15->text());
		Setting_CGain.setValue("CGain/Probe16",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe16->text());
		Setting_CGain.setValue("CGain/Probe17",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe17->text());
		Setting_CGain.setValue("CGain/Probe18",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe18->text());
		Setting_CGain.setValue("CGain/Probe19",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe19->text());
		Setting_CGain.setValue("CGain/Probe20",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe20->text());
		Setting_CGain.setValue("CGain/Probe21",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe21->text());
		Setting_CGain.setValue("CGain/Probe22",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe22->text());
		Setting_CGain.setValue("CGain/Probe23",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe23->text());
		Setting_CGain.setValue("CGain/Probe24",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe24->text());
		Setting_CGain.setValue("CGain/Probe25",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe25->text());
		Setting_CGain.setValue("CGain/Probe26",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe26->text());
		Setting_CGain.setValue("CGain/Probe27",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe27->text());
		Setting_CGain.setValue("CGain/Probe28",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe28->text());
		Setting_CGain.setValue("CGain/Probe29",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe29->text());
		Setting_CGain.setValue("CGain/Probe30",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe30->text());
		Setting_CGain.setValue("CGain/Probe31",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe31->text());
		Setting_CGain.setValue("CGain/Probe32",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe32->text());
		Setting_CGain.setValue("CGain/Probe33",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe33->text());
		Setting_CGain.setValue("CGain/Probe34",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe34->text());
		Setting_CGain.setValue("CGain/Probe35",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe35->text());
		Setting_CGain.setValue("CGain/Probe36",m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe36->text());
	}
	if (m_bSoundSpeed)
	{
		QSettings Setting_SoundSpeed(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_SoundSpeed.setValue("SoundSpeed/Probe1",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe1->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe2",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe2->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe3",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe3->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe4",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe4->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe5",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe5->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe6",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe6->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe7",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe7->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe8",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe8->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe9",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe9->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe10",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe10->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe11",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe11->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe12",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe12->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe13",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe13->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe14",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe14->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe15",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe15->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe16",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe16->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe17",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe17->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe18",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe18->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe19",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe19->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe20",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe20->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe21",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe21->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe22",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe22->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe23",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe23->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe24",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe24->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe25",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe25->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe26",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe26->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe27",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe27->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe28",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe28->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe29",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe29->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe30",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe30->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe31",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe31->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe32",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe32->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe33",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe33->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe34",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe34->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe35",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe35->text());
		Setting_SoundSpeed.setValue("SoundSpeed/Probe36",m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe36->text());
	}
	if (m_bDelay)
	{
		QSettings Setting_Delay(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_Delay.setValue("BurstDelay/Probe1",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe1->text());
		Setting_Delay.setValue("BurstDelay/Probe2",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe2->text());
		Setting_Delay.setValue("BurstDelay/Probe3",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe3->text());
		Setting_Delay.setValue("BurstDelay/Probe4",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe4->text());
		Setting_Delay.setValue("BurstDelay/Probe5",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe5->text());
		Setting_Delay.setValue("BurstDelay/Probe6",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe6->text());
		Setting_Delay.setValue("BurstDelay/Probe7",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe7->text());
		Setting_Delay.setValue("BurstDelay/Probe8",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe8->text());
		Setting_Delay.setValue("BurstDelay/Probe9",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe9->text());
		Setting_Delay.setValue("BurstDelay/Probe10",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe10->text());
		Setting_Delay.setValue("BurstDelay/Probe11",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe11->text());
		Setting_Delay.setValue("BurstDelay/Probe12",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe12->text());
		Setting_Delay.setValue("BurstDelay/Probe13",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe13->text());
		Setting_Delay.setValue("BurstDelay/Probe14",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe14->text());
		Setting_Delay.setValue("BurstDelay/Probe15",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe15->text());
		Setting_Delay.setValue("BurstDelay/Probe16",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe16->text());
		Setting_Delay.setValue("BurstDelay/Probe17",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe17->text());
		Setting_Delay.setValue("BurstDelay/Probe18",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe18->text());
		Setting_Delay.setValue("BurstDelay/Probe19",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe19->text());
		Setting_Delay.setValue("BurstDelay/Probe20",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe20->text());
		Setting_Delay.setValue("BurstDelay/Probe21",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe21->text());
		Setting_Delay.setValue("BurstDelay/Probe22",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe22->text());
		Setting_Delay.setValue("BurstDelay/Probe23",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe23->text());
		Setting_Delay.setValue("BurstDelay/Probe24",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe24->text());
		Setting_Delay.setValue("BurstDelay/Probe25",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe25->text());
		Setting_Delay.setValue("BurstDelay/Probe26",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe26->text());
		Setting_Delay.setValue("BurstDelay/Probe27",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe27->text());
		Setting_Delay.setValue("BurstDelay/Probe28",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe28->text());
		Setting_Delay.setValue("BurstDelay/Probe29",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe29->text());
		Setting_Delay.setValue("BurstDelay/Probe30",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe30->text());
		Setting_Delay.setValue("BurstDelay/Probe31",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe31->text());
		Setting_Delay.setValue("BurstDelay/Probe32",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe32->text());
		Setting_Delay.setValue("BurstDelay/Probe33",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe33->text());
		Setting_Delay.setValue("BurstDelay/Probe34",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe34->text());
		Setting_Delay.setValue("BurstDelay/Probe35",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe35->text());
		Setting_Delay.setValue("BurstDelay/Probe36",m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe36->text());
	}
	if (m_bGateSet)
	{
		QSettings setting_GateSet(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		setting_GateSet.setValue("GateSet/Probe1IB",m_Parameter_[0].m_GateInfo[0].m_fFrontGate);//I闸门前沿
		setting_GateSet.setValue("GateSet/Probe2IB",m_Parameter_[1].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe3IB",m_Parameter_[2].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe4IB",m_Parameter_[3].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe5IB",m_Parameter_[4].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe6IB",m_Parameter_[5].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe7IB",m_Parameter_[6].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe8IB",m_Parameter_[7].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe9IB",m_Parameter_[8].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe10IB",m_Parameter_[9].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe11IB",m_Parameter_[10].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe12IB",m_Parameter_[11].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe13IB",m_Parameter_[12].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe14IB",m_Parameter_[13].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe15IB",m_Parameter_[14].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe16IB",m_Parameter_[15].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe17IB",m_Parameter_[16].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe18IB",m_Parameter_[17].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe19IB",m_Parameter_[18].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe20IB",m_Parameter_[19].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe21IB",m_Parameter_[20].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe22IB",m_Parameter_[21].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe23IB",m_Parameter_[22].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe24IB",m_Parameter_[23].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe25IB",m_Parameter_[24].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe26IB",m_Parameter_[25].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe27IB",m_Parameter_[26].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe28IB",m_Parameter_[27].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe29IB",m_Parameter_[28].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe30IB",m_Parameter_[29].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe31IB",m_Parameter_[30].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe32IB",m_Parameter_[31].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe33IB",m_Parameter_[32].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe34IB",m_Parameter_[33].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe35IB",m_Parameter_[34].m_GateInfo[0].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe36IB",m_Parameter_[35].m_GateInfo[0].m_fFrontGate);

		setting_GateSet.setValue("GateSet/Probe1AB",m_Parameter_[0].m_GateInfo[1].m_fFrontGate);//A闸门前沿
		setting_GateSet.setValue("GateSet/Probe2AB",m_Parameter_[1].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe3AB",m_Parameter_[2].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe4AB",m_Parameter_[3].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe5AB",m_Parameter_[4].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe6AB",m_Parameter_[5].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe7AB",m_Parameter_[6].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe8AB",m_Parameter_[7].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe9AB",m_Parameter_[8].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe10AB",m_Parameter_[9].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe11AB",m_Parameter_[10].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe12AB",m_Parameter_[11].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe13AB",m_Parameter_[12].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe14AB",m_Parameter_[13].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe15AB",m_Parameter_[14].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe16AB",m_Parameter_[15].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe17AB",m_Parameter_[16].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe18AB",m_Parameter_[17].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe19AB",m_Parameter_[18].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe20AB",m_Parameter_[19].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe21AB",m_Parameter_[20].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe22AB",m_Parameter_[21].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe23AB",m_Parameter_[22].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe24AB",m_Parameter_[23].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe25AB",m_Parameter_[24].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe26AB",m_Parameter_[25].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe27AB",m_Parameter_[26].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe28AB",m_Parameter_[27].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe29AB",m_Parameter_[28].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe30AB",m_Parameter_[29].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe31AB",m_Parameter_[30].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe32AB",m_Parameter_[31].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe33AB",m_Parameter_[32].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe34AB",m_Parameter_[33].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe35AB",m_Parameter_[34].m_GateInfo[1].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe36AB",m_Parameter_[35].m_GateInfo[1].m_fFrontGate);

		setting_GateSet.setValue("GateSet/Probe1BB",m_Parameter_[0].m_GateInfo[2].m_fFrontGate);//B闸门前沿
		setting_GateSet.setValue("GateSet/Probe2BB",m_Parameter_[1].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe3BB",m_Parameter_[2].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe4BB",m_Parameter_[3].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe5BB",m_Parameter_[4].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe6BB",m_Parameter_[5].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe7BB",m_Parameter_[6].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe8BB",m_Parameter_[7].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe9BB",m_Parameter_[8].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe10BB",m_Parameter_[9].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe11BB",m_Parameter_[10].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe12BB",m_Parameter_[11].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe13BB",m_Parameter_[12].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe14BB",m_Parameter_[13].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe15BB",m_Parameter_[14].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe16BB",m_Parameter_[15].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe17BB",m_Parameter_[16].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe18BB",m_Parameter_[17].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe19BB",m_Parameter_[18].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe20BB",m_Parameter_[19].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe21BB",m_Parameter_[20].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe22BB",m_Parameter_[21].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe23BB",m_Parameter_[22].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe24BB",m_Parameter_[23].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe25BB",m_Parameter_[24].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe26BB",m_Parameter_[25].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe27BB",m_Parameter_[26].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe28BB",m_Parameter_[27].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe29BB",m_Parameter_[28].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe30BB",m_Parameter_[29].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe31BB",m_Parameter_[30].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe32BB",m_Parameter_[31].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe33BB",m_Parameter_[32].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe34BB",m_Parameter_[33].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe35BB",m_Parameter_[34].m_GateInfo[2].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe36BB",m_Parameter_[35].m_GateInfo[2].m_fFrontGate);

		setting_GateSet.setValue("GateSet/Probe1I2B",m_Parameter_[0].m_GateInfo[3].m_fFrontGate);//I2闸门前沿
		setting_GateSet.setValue("GateSet/Probe2I2B",m_Parameter_[1].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe3I2B",m_Parameter_[2].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe4I2B",m_Parameter_[3].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe5I2B",m_Parameter_[4].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe6I2B",m_Parameter_[5].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe7I2B",m_Parameter_[6].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe8I2B",m_Parameter_[7].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe9I2B",m_Parameter_[8].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe10I2B",m_Parameter_[9].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe11I2B",m_Parameter_[10].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe12I2B",m_Parameter_[11].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe13I2B",m_Parameter_[12].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe14I2B",m_Parameter_[13].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe15I2B",m_Parameter_[14].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe16I2B",m_Parameter_[15].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe17I2B",m_Parameter_[16].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe18I2B",m_Parameter_[17].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe19I2B",m_Parameter_[18].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe20I2B",m_Parameter_[19].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe21I2B",m_Parameter_[20].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe22I2B",m_Parameter_[21].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe23I2B",m_Parameter_[22].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe24I2B",m_Parameter_[23].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe25I2B",m_Parameter_[24].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe26I2B",m_Parameter_[25].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe27I2B",m_Parameter_[26].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe28I2B",m_Parameter_[27].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe29I2B",m_Parameter_[28].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe30I2B",m_Parameter_[29].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe31I2B",m_Parameter_[30].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe32I2B",m_Parameter_[31].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe33I2B",m_Parameter_[32].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe34I2B",m_Parameter_[33].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe35I2B",m_Parameter_[34].m_GateInfo[3].m_fFrontGate);
		setting_GateSet.setValue("GateSet/Probe36I2B",m_Parameter_[35].m_GateInfo[3].m_fFrontGate);

		setting_GateSet.setValue("GateSet/Probe1IL",m_Parameter_[0].m_GateInfo[0].m_fBackGate);//I闸门宽度
		setting_GateSet.setValue("GateSet/Probe2IL",m_Parameter_[1].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe3IL",m_Parameter_[2].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe4IL",m_Parameter_[3].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe5IL",m_Parameter_[4].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe6IL",m_Parameter_[5].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe7IL",m_Parameter_[6].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe8IL",m_Parameter_[7].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe9IL",m_Parameter_[8].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe10IL",m_Parameter_[9].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe11IL",m_Parameter_[10].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe12IL",m_Parameter_[11].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe13IL",m_Parameter_[12].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe14IL",m_Parameter_[13].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe15IL",m_Parameter_[14].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe16IL",m_Parameter_[15].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe17IL",m_Parameter_[16].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe18IL",m_Parameter_[17].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe19IL",m_Parameter_[18].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe20IL",m_Parameter_[19].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe21IL",m_Parameter_[20].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe22IL",m_Parameter_[21].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe23IL",m_Parameter_[22].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe24IL",m_Parameter_[23].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe25IL",m_Parameter_[24].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe26IL",m_Parameter_[25].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe27IL",m_Parameter_[26].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe28IL",m_Parameter_[27].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe29IL",m_Parameter_[28].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe30IL",m_Parameter_[29].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe31IL",m_Parameter_[30].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe32IL",m_Parameter_[31].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe33IL",m_Parameter_[32].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe34IL",m_Parameter_[33].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe35IL",m_Parameter_[34].m_GateInfo[0].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe36IL",m_Parameter_[35].m_GateInfo[0].m_fBackGate);

		setting_GateSet.setValue("GateSet/Probe1AL",m_Parameter_[0].m_GateInfo[1].m_fBackGate);//A闸门宽度
		setting_GateSet.setValue("GateSet/Probe2AL",m_Parameter_[1].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe3AL",m_Parameter_[2].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe4AL",m_Parameter_[3].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe5AL",m_Parameter_[4].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe6AL",m_Parameter_[5].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe7AL",m_Parameter_[6].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe8AL",m_Parameter_[7].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe9AL",m_Parameter_[8].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe10AL",m_Parameter_[9].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe11AL",m_Parameter_[10].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe12AL",m_Parameter_[11].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe13AL",m_Parameter_[12].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe14AL",m_Parameter_[13].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe15AL",m_Parameter_[14].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe16AL",m_Parameter_[15].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe17AL",m_Parameter_[16].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe18AL",m_Parameter_[17].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe19AL",m_Parameter_[18].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe20AL",m_Parameter_[19].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe21AL",m_Parameter_[20].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe22AL",m_Parameter_[21].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe23AL",m_Parameter_[22].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe24AL",m_Parameter_[23].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe25AL",m_Parameter_[24].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe26AL",m_Parameter_[25].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe27AL",m_Parameter_[26].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe28AL",m_Parameter_[27].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe29AL",m_Parameter_[28].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe30AL",m_Parameter_[29].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe31AL",m_Parameter_[30].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe32AL",m_Parameter_[31].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe33AL",m_Parameter_[32].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe34AL",m_Parameter_[33].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe35AL",m_Parameter_[34].m_GateInfo[1].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe36AL",m_Parameter_[35].m_GateInfo[1].m_fBackGate);

		setting_GateSet.setValue("GateSet/Probe1BL",m_Parameter_[0].m_GateInfo[2].m_fBackGate);//B闸门宽度
		setting_GateSet.setValue("GateSet/Probe2BL",m_Parameter_[1].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe3BL",m_Parameter_[2].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe4BL",m_Parameter_[3].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe5BL",m_Parameter_[4].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe6BL",m_Parameter_[5].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe7BL",m_Parameter_[6].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe8BL",m_Parameter_[7].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe9BL",m_Parameter_[8].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe10BL",m_Parameter_[9].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe11BL",m_Parameter_[10].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe12BL",m_Parameter_[11].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe13BL",m_Parameter_[12].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe14BL",m_Parameter_[13].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe15BL",m_Parameter_[14].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe16BL",m_Parameter_[15].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe17BL",m_Parameter_[16].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe18BL",m_Parameter_[17].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe19BL",m_Parameter_[18].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe20BL",m_Parameter_[19].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe21BL",m_Parameter_[20].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe22BL",m_Parameter_[21].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe23BL",m_Parameter_[22].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe24BL",m_Parameter_[23].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe25BL",m_Parameter_[24].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe26BL",m_Parameter_[25].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe27BL",m_Parameter_[26].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe28BL",m_Parameter_[27].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe29BL",m_Parameter_[28].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe30BL",m_Parameter_[29].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe31BL",m_Parameter_[30].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe32BL",m_Parameter_[31].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe33BL",m_Parameter_[32].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe34BL",m_Parameter_[33].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe35BL",m_Parameter_[34].m_GateInfo[2].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe36BL",m_Parameter_[35].m_GateInfo[2].m_fBackGate);

		setting_GateSet.setValue("GateSet/Probe1I2L",m_Parameter_[0].m_GateInfo[3].m_fBackGate);//I2闸门宽度
		setting_GateSet.setValue("GateSet/Probe2I2L",m_Parameter_[1].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe3I2L",m_Parameter_[2].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe4I2L",m_Parameter_[3].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe5I2L",m_Parameter_[4].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe6I2L",m_Parameter_[5].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe7I2L",m_Parameter_[6].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe8I2L",m_Parameter_[7].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe9I2L",m_Parameter_[8].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe10I2L",m_Parameter_[9].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe11I2L",m_Parameter_[10].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe12I2L",m_Parameter_[11].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe13I2L",m_Parameter_[12].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe14I2L",m_Parameter_[13].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe15I2L",m_Parameter_[14].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe16I2L",m_Parameter_[15].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe17I2L",m_Parameter_[16].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe18I2L",m_Parameter_[17].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe19I2L",m_Parameter_[18].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe20I2L",m_Parameter_[19].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe21I2L",m_Parameter_[20].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe22I2L",m_Parameter_[21].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe23I2L",m_Parameter_[22].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe24I2L",m_Parameter_[23].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe25I2L",m_Parameter_[24].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe26I2L",m_Parameter_[25].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe27I2L",m_Parameter_[26].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe28I2L",m_Parameter_[27].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe29I2L",m_Parameter_[28].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe30I2L",m_Parameter_[29].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe31I2L",m_Parameter_[30].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe32I2L",m_Parameter_[31].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe33I2L",m_Parameter_[32].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe34I2L",m_Parameter_[33].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe35I2L",m_Parameter_[34].m_GateInfo[3].m_fBackGate);
		setting_GateSet.setValue("GateSet/Probe36I2L",m_Parameter_[35].m_GateInfo[3].m_fBackGate);

		setting_GateSet.setValue("GateSet/Probe1IT",m_Parameter_[0].m_GateInfo[0].m_fPeakGate);//I闸门阈值
		setting_GateSet.setValue("GateSet/Probe2IT",m_Parameter_[1].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe3IT",m_Parameter_[2].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe4IT",m_Parameter_[3].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe5IT",m_Parameter_[4].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe6IT",m_Parameter_[5].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe7IT",m_Parameter_[6].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe8IT",m_Parameter_[7].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe9IT",m_Parameter_[8].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe10IT",m_Parameter_[9].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe11IT",m_Parameter_[10].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe12IT",m_Parameter_[11].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe13IT",m_Parameter_[12].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe14IT",m_Parameter_[13].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe15IT",m_Parameter_[14].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe16IT",m_Parameter_[15].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe17IT",m_Parameter_[16].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe18IT",m_Parameter_[17].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe19IT",m_Parameter_[18].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe20IT",m_Parameter_[19].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe21IT",m_Parameter_[20].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe22IT",m_Parameter_[21].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe23IT",m_Parameter_[22].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe24IT",m_Parameter_[23].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe25IT",m_Parameter_[24].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe26IT",m_Parameter_[25].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe27IT",m_Parameter_[26].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe28IT",m_Parameter_[27].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe29IT",m_Parameter_[28].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe30IT",m_Parameter_[29].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe31IT",m_Parameter_[30].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe32IT",m_Parameter_[31].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe33IT",m_Parameter_[32].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe34IT",m_Parameter_[33].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe35IT",m_Parameter_[34].m_GateInfo[0].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe36IT",m_Parameter_[35].m_GateInfo[0].m_fPeakGate);

		setting_GateSet.setValue("GateSet/Probe1AT",m_Parameter_[0].m_GateInfo[1].m_fPeakGate);//A闸门阈值
		setting_GateSet.setValue("GateSet/Probe2AT",m_Parameter_[1].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe3AT",m_Parameter_[2].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe4AT",m_Parameter_[3].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe5AT",m_Parameter_[4].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe6AT",m_Parameter_[5].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe7AT",m_Parameter_[6].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe8AT",m_Parameter_[7].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe9AT",m_Parameter_[8].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe10AT",m_Parameter_[9].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe11AT",m_Parameter_[10].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe12AT",m_Parameter_[11].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe13AT",m_Parameter_[12].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe14AT",m_Parameter_[13].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe15AT",m_Parameter_[14].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe16AT",m_Parameter_[15].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe17AT",m_Parameter_[16].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe18AT",m_Parameter_[17].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe19AT",m_Parameter_[18].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe20AT",m_Parameter_[19].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe21AT",m_Parameter_[20].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe22AT",m_Parameter_[21].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe23AT",m_Parameter_[22].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe24AT",m_Parameter_[23].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe25AT",m_Parameter_[24].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe26AT",m_Parameter_[25].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe27AT",m_Parameter_[26].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe28AT",m_Parameter_[27].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe29AT",m_Parameter_[28].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe30AT",m_Parameter_[29].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe31AT",m_Parameter_[30].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe32AT",m_Parameter_[31].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe33AT",m_Parameter_[32].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe34AT",m_Parameter_[33].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe35AT",m_Parameter_[34].m_GateInfo[1].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe36AT",m_Parameter_[35].m_GateInfo[1].m_fPeakGate);

		setting_GateSet.setValue("GateSet/Probe1BT",m_Parameter_[0].m_GateInfo[2].m_fPeakGate);//B闸门阈值
		setting_GateSet.setValue("GateSet/Probe2BT",m_Parameter_[1].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe3BT",m_Parameter_[2].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe4BT",m_Parameter_[3].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe5BT",m_Parameter_[4].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe6BT",m_Parameter_[5].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe7BT",m_Parameter_[6].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe8BT",m_Parameter_[7].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe9BT",m_Parameter_[8].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe10BT",m_Parameter_[9].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe11BT",m_Parameter_[10].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe12BT",m_Parameter_[11].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe13BT",m_Parameter_[12].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe14BT",m_Parameter_[13].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe15BT",m_Parameter_[14].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe16BT",m_Parameter_[15].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe17BT",m_Parameter_[16].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe18BT",m_Parameter_[17].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe19BT",m_Parameter_[18].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe20BT",m_Parameter_[19].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe21BT",m_Parameter_[20].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe22BT",m_Parameter_[21].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe23BT",m_Parameter_[22].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe24BT",m_Parameter_[23].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe25BT",m_Parameter_[24].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe26BT",m_Parameter_[25].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe27BT",m_Parameter_[26].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe28BT",m_Parameter_[27].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe29BT",m_Parameter_[28].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe30BT",m_Parameter_[29].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe31BT",m_Parameter_[30].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe32BT",m_Parameter_[31].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe33BT",m_Parameter_[32].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe34BT",m_Parameter_[33].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe35BT",m_Parameter_[34].m_GateInfo[2].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe36BT",m_Parameter_[35].m_GateInfo[2].m_fPeakGate);

		setting_GateSet.setValue("GateSet/Probe1I2T",m_Parameter_[0].m_GateInfo[3].m_fPeakGate);//I2闸门阈值
		setting_GateSet.setValue("GateSet/Probe2I2T",m_Parameter_[1].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe3I2T",m_Parameter_[2].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe4I2T",m_Parameter_[3].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe5I2T",m_Parameter_[4].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe6I2T",m_Parameter_[5].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe7I2T",m_Parameter_[6].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe8I2T",m_Parameter_[7].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe9I2T",m_Parameter_[8].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe10I2T",m_Parameter_[9].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe11I2T",m_Parameter_[10].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe12I2T",m_Parameter_[11].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe13I2T",m_Parameter_[12].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe14I2T",m_Parameter_[13].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe15I2T",m_Parameter_[14].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe16I2T",m_Parameter_[15].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe17I2T",m_Parameter_[16].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe18I2T",m_Parameter_[17].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe19I2T",m_Parameter_[18].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe20I2T",m_Parameter_[19].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe21I2T",m_Parameter_[20].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe22I2T",m_Parameter_[21].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe23I2T",m_Parameter_[22].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe24I2T",m_Parameter_[23].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe25I2T",m_Parameter_[24].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe26I2T",m_Parameter_[25].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe27I2T",m_Parameter_[26].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe28I2T",m_Parameter_[27].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe29I2T",m_Parameter_[28].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe30I2T",m_Parameter_[29].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe31I2T",m_Parameter_[30].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe32I2T",m_Parameter_[31].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe33I2T",m_Parameter_[32].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe34I2T",m_Parameter_[33].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe35I2T",m_Parameter_[34].m_GateInfo[3].m_fPeakGate);
		setting_GateSet.setValue("GateSet/Probe36I2T",m_Parameter_[35].m_GateInfo[3].m_fPeakGate);
	}
	if (m_bJudge)
	{
		QSettings Setting_Judge(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_Judge.setValue("Judge/IProbe1",m_Parameter_[0].m_GateInfo[0].m_bOpen);//I闸门评判模式
		Setting_Judge.setValue("Judge/IProbe2",m_Parameter_[1].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe3",m_Parameter_[2].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe4",m_Parameter_[3].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe5",m_Parameter_[4].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe6",m_Parameter_[5].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe7",m_Parameter_[6].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe8",m_Parameter_[7].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe9",m_Parameter_[8].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe10",m_Parameter_[9].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe11",m_Parameter_[10].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe12",m_Parameter_[11].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe13",m_Parameter_[12].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe14",m_Parameter_[13].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe15",m_Parameter_[14].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe16",m_Parameter_[15].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe17",m_Parameter_[16].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe18",m_Parameter_[17].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe19",m_Parameter_[18].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe20",m_Parameter_[19].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe21",m_Parameter_[20].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe22",m_Parameter_[21].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe23",m_Parameter_[22].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe24",m_Parameter_[23].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe25",m_Parameter_[24].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe26",m_Parameter_[25].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe27",m_Parameter_[26].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe28",m_Parameter_[27].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe29",m_Parameter_[28].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe30",m_Parameter_[29].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe31",m_Parameter_[30].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe32",m_Parameter_[31].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe33",m_Parameter_[32].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe34",m_Parameter_[33].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe35",m_Parameter_[34].m_GateInfo[0].m_bOpen);
		Setting_Judge.setValue("Judge/IProbe36",m_Parameter_[35].m_GateInfo[0].m_bOpen);

		Setting_Judge.setValue("Judge/AProbe1",m_Parameter_[0].m_GateInfo[1].m_bOpen);//A闸门评判模式
		Setting_Judge.setValue("Judge/AProbe2",m_Parameter_[1].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe3",m_Parameter_[2].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe4",m_Parameter_[3].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe5",m_Parameter_[4].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe6",m_Parameter_[5].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe7",m_Parameter_[6].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe8",m_Parameter_[7].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe9",m_Parameter_[8].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe10",m_Parameter_[9].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe11",m_Parameter_[10].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe12",m_Parameter_[11].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe13",m_Parameter_[12].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe14",m_Parameter_[13].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe15",m_Parameter_[14].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe16",m_Parameter_[15].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe17",m_Parameter_[16].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe18",m_Parameter_[17].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe19",m_Parameter_[18].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe20",m_Parameter_[19].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe21",m_Parameter_[20].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe22",m_Parameter_[21].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe23",m_Parameter_[22].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe24",m_Parameter_[23].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe25",m_Parameter_[24].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe26",m_Parameter_[25].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe27",m_Parameter_[26].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe28",m_Parameter_[27].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe29",m_Parameter_[28].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe30",m_Parameter_[29].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe31",m_Parameter_[30].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe32",m_Parameter_[31].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe33",m_Parameter_[32].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe34",m_Parameter_[33].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe35",m_Parameter_[34].m_GateInfo[1].m_bOpen);
		Setting_Judge.setValue("Judge/AProbe36",m_Parameter_[35].m_GateInfo[1].m_bOpen);

		Setting_Judge.setValue("Judge/BProbe1",m_Parameter_[0].m_GateInfo[2].m_bOpen);//B闸门评判模式
		Setting_Judge.setValue("Judge/BProbe2",m_Parameter_[1].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe3",m_Parameter_[2].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe4",m_Parameter_[3].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe5",m_Parameter_[4].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe6",m_Parameter_[5].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe7",m_Parameter_[6].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe8",m_Parameter_[7].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe9",m_Parameter_[8].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe10",m_Parameter_[9].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe11",m_Parameter_[10].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe12",m_Parameter_[11].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe13",m_Parameter_[12].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe14",m_Parameter_[13].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe15",m_Parameter_[14].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe16",m_Parameter_[15].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe17",m_Parameter_[16].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe18",m_Parameter_[17].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe19",m_Parameter_[18].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe20",m_Parameter_[19].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe21",m_Parameter_[20].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe22",m_Parameter_[21].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe23",m_Parameter_[22].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe24",m_Parameter_[23].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe25",m_Parameter_[24].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe26",m_Parameter_[25].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe27",m_Parameter_[26].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe28",m_Parameter_[27].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe29",m_Parameter_[28].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe30",m_Parameter_[29].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe31",m_Parameter_[30].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe32",m_Parameter_[31].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe33",m_Parameter_[32].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe34",m_Parameter_[33].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe35",m_Parameter_[34].m_GateInfo[2].m_bOpen);
		Setting_Judge.setValue("Judge/BProbe36",m_Parameter_[35].m_GateInfo[2].m_bOpen);

		Setting_Judge.setValue("Judge/I2Probe1",m_Parameter_[0].m_GateInfo[3].m_bOpen);//I2闸门评判模式
		Setting_Judge.setValue("Judge/I2Probe2",m_Parameter_[1].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe3",m_Parameter_[2].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe4",m_Parameter_[3].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe5",m_Parameter_[4].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe6",m_Parameter_[5].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe7",m_Parameter_[6].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe8",m_Parameter_[7].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe9",m_Parameter_[8].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe10",m_Parameter_[9].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe11",m_Parameter_[10].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe12",m_Parameter_[11].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe13",m_Parameter_[12].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe14",m_Parameter_[13].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe15",m_Parameter_[14].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe16",m_Parameter_[15].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe17",m_Parameter_[16].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe18",m_Parameter_[17].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe19",m_Parameter_[18].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe20",m_Parameter_[19].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe21",m_Parameter_[20].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe22",m_Parameter_[21].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe23",m_Parameter_[22].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe24",m_Parameter_[23].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe25",m_Parameter_[24].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe26",m_Parameter_[25].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe27",m_Parameter_[26].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe28",m_Parameter_[27].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe29",m_Parameter_[28].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe30",m_Parameter_[29].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe31",m_Parameter_[30].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe32",m_Parameter_[31].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe33",m_Parameter_[32].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe34",m_Parameter_[33].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe35",m_Parameter_[34].m_GateInfo[3].m_bOpen);
		Setting_Judge.setValue("Judge/I2Probe36",m_Parameter_[35].m_GateInfo[3].m_bOpen);
	}
	if (m_bStaNoise)
	{
		QSettings Setting_StaNoise(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_StaNoise.setValue("StaNoise/IProbe1",m_Parameter_[0].m_GateInfo[0].m_nStaNoise);//I闸门降噪数
		Setting_StaNoise.setValue("StaNoise/IProbe2",m_Parameter_[1].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe3",m_Parameter_[2].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe4",m_Parameter_[3].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe5",m_Parameter_[4].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe6",m_Parameter_[5].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe7",m_Parameter_[6].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe8",m_Parameter_[7].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe9",m_Parameter_[8].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe10",m_Parameter_[9].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe11",m_Parameter_[10].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe12",m_Parameter_[11].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe13",m_Parameter_[12].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe14",m_Parameter_[13].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe15",m_Parameter_[14].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe16",m_Parameter_[15].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe17",m_Parameter_[16].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe18",m_Parameter_[17].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe19",m_Parameter_[18].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe20",m_Parameter_[19].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe21",m_Parameter_[20].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe22",m_Parameter_[21].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe23",m_Parameter_[22].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe24",m_Parameter_[23].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe25",m_Parameter_[24].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe26",m_Parameter_[25].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe27",m_Parameter_[26].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe28",m_Parameter_[27].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe29",m_Parameter_[28].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe30",m_Parameter_[29].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe31",m_Parameter_[30].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe32",m_Parameter_[31].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe33",m_Parameter_[32].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe34",m_Parameter_[33].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe35",m_Parameter_[34].m_GateInfo[0].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/IProbe36",m_Parameter_[35].m_GateInfo[0].m_nStaNoise);

		Setting_StaNoise.setValue("StaNoise/AProbe1",m_Parameter_[0].m_GateInfo[1].m_nStaNoise);//A闸门降噪数
		Setting_StaNoise.setValue("StaNoise/AProbe2",m_Parameter_[1].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe3",m_Parameter_[2].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe4",m_Parameter_[3].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe5",m_Parameter_[4].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe6",m_Parameter_[5].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe7",m_Parameter_[6].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe8",m_Parameter_[7].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe9",m_Parameter_[8].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe10",m_Parameter_[9].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe11",m_Parameter_[10].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe12",m_Parameter_[11].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe13",m_Parameter_[12].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe14",m_Parameter_[13].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe15",m_Parameter_[14].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe16",m_Parameter_[15].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe17",m_Parameter_[16].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe18",m_Parameter_[17].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe19",m_Parameter_[18].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe20",m_Parameter_[19].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe21",m_Parameter_[20].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe22",m_Parameter_[21].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe23",m_Parameter_[22].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe24",m_Parameter_[23].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe25",m_Parameter_[24].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe26",m_Parameter_[25].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe27",m_Parameter_[26].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe28",m_Parameter_[27].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe29",m_Parameter_[28].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe30",m_Parameter_[29].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe31",m_Parameter_[30].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe32",m_Parameter_[31].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe33",m_Parameter_[32].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe34",m_Parameter_[33].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe35",m_Parameter_[34].m_GateInfo[1].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/AProbe36",m_Parameter_[35].m_GateInfo[1].m_nStaNoise);

		Setting_StaNoise.setValue("StaNoise/BProbe1",m_Parameter_[0].m_GateInfo[2].m_nStaNoise);//B闸门降噪数
		Setting_StaNoise.setValue("StaNoise/BProbe2",m_Parameter_[1].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe3",m_Parameter_[2].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe4",m_Parameter_[3].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe5",m_Parameter_[4].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe6",m_Parameter_[5].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe7",m_Parameter_[6].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe8",m_Parameter_[7].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe9",m_Parameter_[8].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe10",m_Parameter_[9].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe11",m_Parameter_[10].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe12",m_Parameter_[11].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe13",m_Parameter_[12].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe14",m_Parameter_[13].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe15",m_Parameter_[14].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe16",m_Parameter_[15].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe17",m_Parameter_[16].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe18",m_Parameter_[17].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe19",m_Parameter_[18].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe20",m_Parameter_[19].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe21",m_Parameter_[20].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe22",m_Parameter_[21].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe23",m_Parameter_[22].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe24",m_Parameter_[23].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe25",m_Parameter_[24].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe26",m_Parameter_[25].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe27",m_Parameter_[26].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe28",m_Parameter_[27].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe29",m_Parameter_[28].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe30",m_Parameter_[29].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe31",m_Parameter_[30].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe32",m_Parameter_[31].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe33",m_Parameter_[32].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe34",m_Parameter_[33].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe35",m_Parameter_[34].m_GateInfo[2].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/BProbe36",m_Parameter_[35].m_GateInfo[2].m_nStaNoise);

		Setting_StaNoise.setValue("StaNoise/I2Probe1",m_Parameter_[0].m_GateInfo[3].m_nStaNoise);//I2闸门降噪数
		Setting_StaNoise.setValue("StaNoise/I2Probe2",m_Parameter_[1].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe3",m_Parameter_[2].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe4",m_Parameter_[3].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe5",m_Parameter_[4].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe6",m_Parameter_[5].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe7",m_Parameter_[6].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe8",m_Parameter_[7].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe9",m_Parameter_[8].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe10",m_Parameter_[9].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe11",m_Parameter_[10].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe12",m_Parameter_[11].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe13",m_Parameter_[12].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe14",m_Parameter_[13].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe15",m_Parameter_[14].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe16",m_Parameter_[15].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe17",m_Parameter_[16].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe18",m_Parameter_[17].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe19",m_Parameter_[18].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe20",m_Parameter_[19].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe21",m_Parameter_[20].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe22",m_Parameter_[21].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe23",m_Parameter_[22].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe24",m_Parameter_[23].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe25",m_Parameter_[24].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe26",m_Parameter_[25].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe27",m_Parameter_[26].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe28",m_Parameter_[27].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe29",m_Parameter_[28].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe30",m_Parameter_[29].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe31",m_Parameter_[30].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe32",m_Parameter_[31].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe33",m_Parameter_[32].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe34",m_Parameter_[33].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe35",m_Parameter_[34].m_GateInfo[3].m_nStaNoise);
		Setting_StaNoise.setValue("StaNoise/I2Probe36",m_Parameter_[35].m_GateInfo[3].m_nStaNoise);
	}
	if (m_bReFreq)
	{
		QSettings Setting_ReFreq(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_ReFreq.setValue("ReFreq/Probe1",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe1->text());
		Setting_ReFreq.setValue("ReFreq/Probe2",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe2->text());
		Setting_ReFreq.setValue("ReFreq/Probe3",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe3->text());
		Setting_ReFreq.setValue("ReFreq/Probe4",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe4->text());
		Setting_ReFreq.setValue("ReFreq/Probe5",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe5->text());
		Setting_ReFreq.setValue("ReFreq/Probe6",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe6->text());
		Setting_ReFreq.setValue("ReFreq/Probe7",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe7->text());
		Setting_ReFreq.setValue("ReFreq/Probe8",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe8->text());
		Setting_ReFreq.setValue("ReFreq/Probe9",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe9->text());
		Setting_ReFreq.setValue("ReFreq/Probe10",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe10->text());
		Setting_ReFreq.setValue("ReFreq/Probe11",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe11->text());
		Setting_ReFreq.setValue("ReFreq/Probe12",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe12->text());
		Setting_ReFreq.setValue("ReFreq/Probe13",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe13->text());
		Setting_ReFreq.setValue("ReFreq/Probe14",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe14->text());
		Setting_ReFreq.setValue("ReFreq/Probe15",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe15->text());
		Setting_ReFreq.setValue("ReFreq/Probe16",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe16->text());
		Setting_ReFreq.setValue("ReFreq/Probe17",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe17->text());
		Setting_ReFreq.setValue("ReFreq/Probe18",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe18->text());
		Setting_ReFreq.setValue("ReFreq/Probe19",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe19->text());
		Setting_ReFreq.setValue("ReFreq/Probe20",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe20->text());
		Setting_ReFreq.setValue("ReFreq/Probe21",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe21->text());
		Setting_ReFreq.setValue("ReFreq/Probe22",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe22->text());
		Setting_ReFreq.setValue("ReFreq/Probe23",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe23->text());
		Setting_ReFreq.setValue("ReFreq/Probe24",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe24->text());
		Setting_ReFreq.setValue("ReFreq/Probe25",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe25->text());
		Setting_ReFreq.setValue("ReFreq/Probe26",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe26->text());
		Setting_ReFreq.setValue("ReFreq/Probe27",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe27->text());
		Setting_ReFreq.setValue("ReFreq/Probe28",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe28->text());
		Setting_ReFreq.setValue("ReFreq/Probe29",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe29->text());
		Setting_ReFreq.setValue("ReFreq/Probe30",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe30->text());
		Setting_ReFreq.setValue("ReFreq/Probe31",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe31->text());
		Setting_ReFreq.setValue("ReFreq/Probe32",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe32->text());
		Setting_ReFreq.setValue("ReFreq/Probe33",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe33->text());
		Setting_ReFreq.setValue("ReFreq/Probe34",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe34->text());
		Setting_ReFreq.setValue("ReFreq/Probe35",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe35->text());
		Setting_ReFreq.setValue("ReFreq/Probe36",m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe36->text());
	}
	if (m_bDeadZone)
	{
		QSettings Setting_DeadZone(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_DeadZone.setValue("DeadZone/m_nStartDeadZone",m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.ui.lineEditStart->text());
		Setting_DeadZone.setValue("DeadZone/m_nEndDeadZone",m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.ui.lineEditEnd->text());
	}
	if (m_bWidth)
	{
		QSettings Setting_Width(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);
		Setting_Width.setValue("Suppression/Probe1",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe1->text());
		Setting_Width.setValue("Suppression/Probe2",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe2->text());
		Setting_Width.setValue("Suppression/Probe3",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe3->text());
		Setting_Width.setValue("Suppression/Probe4",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe4->text());
		Setting_Width.setValue("Suppression/Probe5",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe5->text());
		Setting_Width.setValue("Suppression/Probe6",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe6->text());
		Setting_Width.setValue("Suppression/Probe7",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe7->text());
		Setting_Width.setValue("Suppression/Probe8",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe8->text());
		Setting_Width.setValue("Suppression/Probe9",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe9->text());
		Setting_Width.setValue("Suppression/Probe10",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe10->text());
		Setting_Width.setValue("Suppression/Probe11",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe11->text());
		Setting_Width.setValue("Suppression/Probe12",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe12->text());
		Setting_Width.setValue("Suppression/Probe13",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe13->text());
		Setting_Width.setValue("Suppression/Probe14",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe14->text());
		Setting_Width.setValue("Suppression/Probe15",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe15->text());
		Setting_Width.setValue("Suppression/Probe16",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe16->text());
		Setting_Width.setValue("Suppression/Probe17",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe17->text());
		Setting_Width.setValue("Suppression/Probe18",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe18->text());
		Setting_Width.setValue("Suppression/Probe19",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe19->text());
		Setting_Width.setValue("Suppression/Probe20",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe20->text());
		Setting_Width.setValue("Suppression/Probe21",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe21->text());
		Setting_Width.setValue("Suppression/Probe22",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe22->text());
		Setting_Width.setValue("Suppression/Probe23",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe23->text());
		Setting_Width.setValue("Suppression/Probe24",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe24->text());
		Setting_Width.setValue("Suppression/Probe25",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe25->text());
		Setting_Width.setValue("Suppression/Probe26",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe26->text());
		Setting_Width.setValue("Suppression/Probe27",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe27->text());
		Setting_Width.setValue("Suppression/Probe28",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe28->text());
		Setting_Width.setValue("Suppression/Probe29",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe29->text());
		Setting_Width.setValue("Suppression/Probe30",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe30->text());
		Setting_Width.setValue("Suppression/Probe31",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe31->text());
		Setting_Width.setValue("Suppression/Probe32",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe32->text());
		Setting_Width.setValue("Suppression/Probe33",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe33->text());
		Setting_Width.setValue("Suppression/Probe34",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe34->text());
		Setting_Width.setValue("Suppression/Probe35",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe35->text());
		Setting_Width.setValue("Suppression/Probe36",m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe36->text());
	}
	if (m_bProbeSet)
	{
		QSettings Setting_ProbeSet(m_ParameterSetting.m_qsUltrasoundparameter, QSettings::IniFormat);
		Setting_ProbeSet.setValue("ProbeSet/Probe1", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe1->text());
		Setting_ProbeSet.setValue("ProbeSet/Probe2", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe2->text());
		Setting_ProbeSet.setValue("ProbeSet/Probe3", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe3->text());
		Setting_ProbeSet.setValue("ProbeSet/Probe4", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe4->text());
		Setting_ProbeSet.setValue("ProbeSet/Probe5", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe5->text());
		Setting_ProbeSet.setValue("ProbeSet/Probe6", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe6->text());

		Setting_ProbeSet.setValue("ProbeSet/m_nfeatureAverageHighCount", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageHigh->text());
		Setting_ProbeSet.setValue("ProbeSet/m_nfeatureAverageLowCount", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageLow->text());
		Setting_ProbeSet.setValue("ProbeSet/m_fHighCorrect", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh->text());
		Setting_ProbeSet.setValue("ProbeSet/m_fLowCorrect", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow->text());
		Setting_ProbeSet.setValue("ProbeSet/m_fHighCorrect2", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh_2->text());
		Setting_ProbeSet.setValue("ProbeSet/m_fLowCorrect2", m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow_2->text());

		m_nfeatureAverageHighCount = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageHigh->text().toInt();
		m_nfeatureAverageLowCount = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageLow->text().toInt();
		m_fHighCorrect = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh->text().toFloat();
		m_fLowCorrect = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow->text().toFloat();
		m_fHighCorrect2 = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh_2->text().toFloat();
		m_fLowCorrect2 = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow_2->text().toFloat();

		m_fProbeCorrect[0] = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe1->text().toFloat();
		m_fProbeCorrect[1] = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe2->text().toFloat();
		m_fProbeCorrect[2] = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe3->text().toFloat();
		m_fProbeCorrect[3] = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe4->text().toFloat();
		m_fProbeCorrect[4] = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe5->text().toFloat();
		m_fProbeCorrect[5] = m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe6->text().toFloat();

		if (m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.checkBoxMark->isChecked())
		{
			m_bMark = 1;
		}
		else
		{
			m_bMark = 0;
		}
	}
}

void GuanTan::UltrasoundParameterNo()
{
	m_ParameterSetting.m_UltrasoundParameter.close();
	m_bGain = false;
	m_bCGain = false;
	m_bSoundSpeed = false;
	m_bDelay = false;
	m_bGateSet = false;
	m_bWidth = false;
	m_bJudge = false;
	m_bStaNoise = false;
	m_bReFreq = false;
	m_bImpedanceSet = false;
	m_bProbeSet = false;
}

void GuanTan::UltrasoundParameterSaveAs()
{
// 	QFileDialog textsave(this,tr("订单参数保存"));
// 	textsave.setAcceptMode(QFileDialog::AcceptSave);
// 	textsave.setFileMode(QFileDialog::AnyFile);
// 	textsave.setViewMode(QFileDialog::Detail);
// 	QStringList qt;
// 	textsave.exec();
// 	qt = textsave.selectedFiles();
// 	QFile file(qt.at(0));
// 	file.open(QIODevice::WriteOnly);
// 	QSettings settings_Ultrasound(qt.at(0), QSettings::IniFormat); // 当前目录的INI文件
	QString str = QFileDialog::getSaveFileName(this, tr("超声参数文件保存"), tr("D:/管探参数/"), "INI(*.ini)"); //xp系统中文版
	QFile file(str);
	file.open(QIODevice::WriteOnly);
	QSettings settings_Ultrasound(str, QSettings::IniFormat);

	//增益另存为
	settings_Ultrasound.beginGroup("Gain");
	settings_Ultrasound.setValue("Probe1",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe1->text()));
	settings_Ultrasound.setValue("Probe2",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe2->text()));
	settings_Ultrasound.setValue("Probe3",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe3->text()));
	settings_Ultrasound.setValue("Probe4",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe4->text()));
	settings_Ultrasound.setValue("Probe5",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe5->text()));
	settings_Ultrasound.setValue("Probe6",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe6->text()));
	settings_Ultrasound.setValue("Probe7",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe7->text()));
	settings_Ultrasound.setValue("Probe8",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe8->text()));
	settings_Ultrasound.setValue("Probe9",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe9->text()));
	settings_Ultrasound.setValue("Probe10",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe10->text()));
	settings_Ultrasound.setValue("Probe11",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe11->text()));
	settings_Ultrasound.setValue("Probe12",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe12->text()));
	settings_Ultrasound.setValue("Probe13",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe13->text()));
	settings_Ultrasound.setValue("Probe14",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe14->text()));
	settings_Ultrasound.setValue("Probe15",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe15->text()));
	settings_Ultrasound.setValue("Probe16",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe16->text()));
	settings_Ultrasound.setValue("Probe17",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe17->text()));
	settings_Ultrasound.setValue("Probe18",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe18->text()));
	settings_Ultrasound.setValue("Probe19",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe19->text()));
	settings_Ultrasound.setValue("Probe20",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe20->text()));
	settings_Ultrasound.setValue("Probe21",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe21->text()));
	settings_Ultrasound.setValue("Probe22",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe22->text()));
	settings_Ultrasound.setValue("Probe23",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe23->text()));
	settings_Ultrasound.setValue("Probe24",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe24->text()));
	settings_Ultrasound.setValue("Probe25",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe25->text()));
	settings_Ultrasound.setValue("Probe26",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe26->text()));
	settings_Ultrasound.setValue("Probe27",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe27->text()));
	settings_Ultrasound.setValue("Probe28",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe28->text()));
	settings_Ultrasound.setValue("Probe29",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe29->text()));
	settings_Ultrasound.setValue("Probe30",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe30->text()));
	settings_Ultrasound.setValue("Probe31",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe31->text()));
	settings_Ultrasound.setValue("Probe32",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe32->text()));
	settings_Ultrasound.setValue("Probe33",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe33->text()));
	settings_Ultrasound.setValue("Probe34",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe34->text()));
	settings_Ultrasound.setValue("Probe35",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe35->text()));
	settings_Ultrasound.setValue("Probe36",QString(m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe36->text()));
	settings_Ultrasound.endGroup();
	
	//参考增益另存为
	settings_Ultrasound.beginGroup("CGain");
	settings_Ultrasound.setValue("Probe1",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe1->text()));
	settings_Ultrasound.setValue("Probe2",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe2->text()));
	settings_Ultrasound.setValue("Probe3",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe3->text()));
	settings_Ultrasound.setValue("Probe4",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe4->text()));
	settings_Ultrasound.setValue("Probe5",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe5->text()));
	settings_Ultrasound.setValue("Probe6",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe6->text()));
	settings_Ultrasound.setValue("Probe7",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe7->text()));
	settings_Ultrasound.setValue("Probe8",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe8->text()));
	settings_Ultrasound.setValue("Probe9",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe9->text()));
	settings_Ultrasound.setValue("Probe10",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe10->text()));
	settings_Ultrasound.setValue("Probe11",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe11->text()));
	settings_Ultrasound.setValue("Probe12",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe12->text()));
	settings_Ultrasound.setValue("Probe13",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe13->text()));
	settings_Ultrasound.setValue("Probe14",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe14->text()));
	settings_Ultrasound.setValue("Probe15",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe15->text()));
	settings_Ultrasound.setValue("Probe16",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe16->text()));
	settings_Ultrasound.setValue("Probe17",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe17->text()));
	settings_Ultrasound.setValue("Probe18",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe18->text()));
	settings_Ultrasound.setValue("Probe19",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe19->text()));
	settings_Ultrasound.setValue("Probe20",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe20->text()));
	settings_Ultrasound.setValue("Probe21",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe21->text()));
	settings_Ultrasound.setValue("Probe22",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe22->text()));
	settings_Ultrasound.setValue("Probe23",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe23->text()));
	settings_Ultrasound.setValue("Probe24",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe24->text()));
	settings_Ultrasound.setValue("Probe25",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe25->text()));
	settings_Ultrasound.setValue("Probe26",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe26->text()));
	settings_Ultrasound.setValue("Probe27",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe27->text()));
	settings_Ultrasound.setValue("Probe28",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe28->text()));
	settings_Ultrasound.setValue("Probe29",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe29->text()));
	settings_Ultrasound.setValue("Probe30",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe30->text()));
	settings_Ultrasound.setValue("Probe31",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe31->text()));
	settings_Ultrasound.setValue("Probe32",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe32->text()));
	settings_Ultrasound.setValue("Probe33",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe33->text()));
	settings_Ultrasound.setValue("Probe34",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe34->text()));
	settings_Ultrasound.setValue("Probe35",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe35->text()));
	settings_Ultrasound.setValue("Probe36",QString(m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe36->text()));
	settings_Ultrasound.endGroup();
	
	
	//声速另存为
	settings_Ultrasound.beginGroup("SoundSpeed");
	settings_Ultrasound.setValue("Probe1",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe1->text()));
	settings_Ultrasound.setValue("Probe2",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe2->text()));
	settings_Ultrasound.setValue("Probe3",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe3->text()));
	settings_Ultrasound.setValue("Probe4",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe4->text()));
	settings_Ultrasound.setValue("Probe5",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe5->text()));
	settings_Ultrasound.setValue("Probe6",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe6->text()));
	settings_Ultrasound.setValue("Probe7",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe7->text()));
	settings_Ultrasound.setValue("Probe8",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe8->text()));
	settings_Ultrasound.setValue("Probe9",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe9->text()));
	settings_Ultrasound.setValue("Probe10",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe10->text()));
	settings_Ultrasound.setValue("Probe11",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe11->text()));
	settings_Ultrasound.setValue("Probe12",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe12->text()));
	settings_Ultrasound.setValue("Probe13",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe13->text()));
	settings_Ultrasound.setValue("Probe14",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe14->text()));
	settings_Ultrasound.setValue("Probe15",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe15->text()));
	settings_Ultrasound.setValue("Probe16",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe16->text()));
	settings_Ultrasound.setValue("Probe17",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe17->text()));
	settings_Ultrasound.setValue("Probe18",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe18->text()));
	settings_Ultrasound.setValue("Probe19",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe19->text()));
	settings_Ultrasound.setValue("Probe20",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe20->text()));
	settings_Ultrasound.setValue("Probe21",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe21->text()));
	settings_Ultrasound.setValue("Probe22",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe22->text()));
	settings_Ultrasound.setValue("Probe23",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe23->text()));
	settings_Ultrasound.setValue("Probe24",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe24->text()));
	settings_Ultrasound.setValue("Probe25",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe25->text()));
	settings_Ultrasound.setValue("Probe26",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe26->text()));
	settings_Ultrasound.setValue("Probe27",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe27->text()));
	settings_Ultrasound.setValue("Probe28",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe28->text()));
	settings_Ultrasound.setValue("Probe29",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe29->text()));
	settings_Ultrasound.setValue("Probe30",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe30->text()));
	settings_Ultrasound.setValue("Probe31",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe31->text()));
	settings_Ultrasound.setValue("Probe32",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe32->text()));
	settings_Ultrasound.setValue("Probe33",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe33->text()));
	settings_Ultrasound.setValue("Probe34",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe34->text()));
	settings_Ultrasound.setValue("Probe35",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe35->text()));
	settings_Ultrasound.setValue("Probe36",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe36->text()));
	settings_Ultrasound.setValue("Speed",QString(m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditSpeed->text()));
	settings_Ultrasound.endGroup();
	
	//延迟另存为
	settings_Ultrasound.beginGroup("BurstDelay");
	settings_Ultrasound.setValue("Probe1",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe1->text()));
	settings_Ultrasound.setValue("Probe2",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe2->text()));
	settings_Ultrasound.setValue("Probe3",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe3->text()));
	settings_Ultrasound.setValue("Probe4",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe4->text()));
	settings_Ultrasound.setValue("Probe5",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe5->text()));
	settings_Ultrasound.setValue("Probe6",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe6->text()));
	settings_Ultrasound.setValue("Probe7",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe7->text()));
	settings_Ultrasound.setValue("Probe8",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe8->text()));
	settings_Ultrasound.setValue("Probe9",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe9->text()));
	settings_Ultrasound.setValue("Probe10",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe10->text()));
	settings_Ultrasound.setValue("Probe11",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe11->text()));
	settings_Ultrasound.setValue("Probe12",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe12->text()));
	settings_Ultrasound.setValue("Probe13",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe13->text()));
	settings_Ultrasound.setValue("Probe14",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe14->text()));
	settings_Ultrasound.setValue("Probe15",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe15->text()));
	settings_Ultrasound.setValue("Probe16",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe16->text()));
	settings_Ultrasound.setValue("Probe17",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe17->text()));
	settings_Ultrasound.setValue("Probe18",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe18->text()));
	settings_Ultrasound.setValue("Probe19",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe19->text()));
	settings_Ultrasound.setValue("Probe20",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe20->text()));
	settings_Ultrasound.setValue("Probe21",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe21->text()));
	settings_Ultrasound.setValue("Probe22",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe22->text()));
	settings_Ultrasound.setValue("Probe23",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe23->text()));
	settings_Ultrasound.setValue("Probe24",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe24->text()));
	settings_Ultrasound.setValue("Probe25",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe25->text()));
	settings_Ultrasound.setValue("Probe26",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe26->text()));
	settings_Ultrasound.setValue("Probe27",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe27->text()));
	settings_Ultrasound.setValue("Probe28",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe28->text()));
	settings_Ultrasound.setValue("Probe29",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe29->text()));
	settings_Ultrasound.setValue("Probe30",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe30->text()));
	settings_Ultrasound.setValue("Probe31",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe31->text()));
	settings_Ultrasound.setValue("Probe32",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe32->text()));
	settings_Ultrasound.setValue("Probe33",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe33->text()));
	settings_Ultrasound.setValue("Probe34",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe34->text()));
	settings_Ultrasound.setValue("Probe35",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe35->text()));
	settings_Ultrasound.setValue("Probe36",QString(m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe36->text()));
	settings_Ultrasound.endGroup();


	//闸门设置另存为
	settings_Ultrasound.beginGroup("GateSet");
	settings_Ultrasound.setValue("Probe1IB",m_Parameter_[0].m_GateInfo[0].m_fFrontGate);//I闸门前沿
	settings_Ultrasound.setValue("Probe2IB",m_Parameter_[1].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe3IB",m_Parameter_[2].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe4IB",m_Parameter_[3].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe5IB",m_Parameter_[4].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe6IB",m_Parameter_[5].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe7IB",m_Parameter_[6].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe8IB",m_Parameter_[7].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe9IB",m_Parameter_[8].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe10IB",m_Parameter_[9].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe11IB",m_Parameter_[10].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe12IB",m_Parameter_[11].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe13IB",m_Parameter_[12].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe14IB",m_Parameter_[13].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe15IB",m_Parameter_[14].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe16IB",m_Parameter_[15].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe17IB",m_Parameter_[16].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe18IB",m_Parameter_[17].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe19IB",m_Parameter_[18].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe20IB",m_Parameter_[19].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe21IB",m_Parameter_[20].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe22IB",m_Parameter_[21].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe23IB",m_Parameter_[22].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe24IB",m_Parameter_[23].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe25IB",m_Parameter_[24].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe26IB",m_Parameter_[25].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe27IB",m_Parameter_[26].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe28IB",m_Parameter_[27].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe29IB",m_Parameter_[28].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe30IB",m_Parameter_[29].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe31IB",m_Parameter_[30].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe32IB",m_Parameter_[31].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe33IB",m_Parameter_[32].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe34IB",m_Parameter_[33].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe35IB",m_Parameter_[34].m_GateInfo[0].m_fFrontGate);
	settings_Ultrasound.setValue("Probe36IB",m_Parameter_[35].m_GateInfo[0].m_fFrontGate);

	settings_Ultrasound.setValue("Probe1AB",m_Parameter_[0].m_GateInfo[1].m_fFrontGate);//A闸门前沿
	settings_Ultrasound.setValue("Probe2AB",m_Parameter_[1].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe3AB",m_Parameter_[2].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe4AB",m_Parameter_[3].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe5AB",m_Parameter_[4].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe6AB",m_Parameter_[5].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe7AB",m_Parameter_[6].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe8AB",m_Parameter_[7].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe9AB",m_Parameter_[8].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe10AB",m_Parameter_[9].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe11AB",m_Parameter_[10].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe12AB",m_Parameter_[11].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe13AB",m_Parameter_[12].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe14AB",m_Parameter_[13].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe15AB",m_Parameter_[14].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe16AB",m_Parameter_[15].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe17AB",m_Parameter_[16].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe18AB",m_Parameter_[17].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe19AB",m_Parameter_[18].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe20AB",m_Parameter_[19].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe21AB",m_Parameter_[20].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe22AB",m_Parameter_[21].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe23AB",m_Parameter_[22].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe24AB",m_Parameter_[23].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe25AB",m_Parameter_[24].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe26AB",m_Parameter_[25].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe27AB",m_Parameter_[26].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe28AB",m_Parameter_[27].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe29AB",m_Parameter_[28].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe30AB",m_Parameter_[29].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe31AB",m_Parameter_[30].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe32AB",m_Parameter_[31].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe33AB",m_Parameter_[32].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe34AB",m_Parameter_[33].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe35AB",m_Parameter_[34].m_GateInfo[1].m_fFrontGate);
	settings_Ultrasound.setValue("Probe36AB",m_Parameter_[35].m_GateInfo[1].m_fFrontGate);

	settings_Ultrasound.setValue("Probe1BB",m_Parameter_[0].m_GateInfo[2].m_fFrontGate);//B闸门前沿
	settings_Ultrasound.setValue("Probe2BB",m_Parameter_[1].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe3BB",m_Parameter_[2].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe4BB",m_Parameter_[3].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe5BB",m_Parameter_[4].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe6BB",m_Parameter_[5].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe7BB",m_Parameter_[6].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe8BB",m_Parameter_[7].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe9BB",m_Parameter_[8].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe10BB",m_Parameter_[9].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe11BB",m_Parameter_[10].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe12BB",m_Parameter_[11].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe13BB",m_Parameter_[12].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe14BB",m_Parameter_[13].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe15BB",m_Parameter_[14].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe16BB",m_Parameter_[15].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe17BB",m_Parameter_[16].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe18BB",m_Parameter_[17].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe19BB",m_Parameter_[18].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe20BB",m_Parameter_[19].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe21BB",m_Parameter_[20].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe22BB",m_Parameter_[21].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe23BB",m_Parameter_[22].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe24BB",m_Parameter_[23].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe25BB",m_Parameter_[24].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe26BB",m_Parameter_[25].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe27BB",m_Parameter_[26].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe28BB",m_Parameter_[27].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe29BB",m_Parameter_[28].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe30BB",m_Parameter_[29].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe31BB",m_Parameter_[30].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe32BB",m_Parameter_[31].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe33BB",m_Parameter_[32].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe34BB",m_Parameter_[33].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe35BB",m_Parameter_[34].m_GateInfo[2].m_fFrontGate);
	settings_Ultrasound.setValue("Probe36BB",m_Parameter_[35].m_GateInfo[2].m_fFrontGate);

	settings_Ultrasound.setValue("Probe1I2B",m_Parameter_[0].m_GateInfo[3].m_fFrontGate);//I2闸门前沿
	settings_Ultrasound.setValue("Probe2I2B",m_Parameter_[1].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe3I2B",m_Parameter_[2].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe4I2B",m_Parameter_[3].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe5I2B",m_Parameter_[4].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe6I2B",m_Parameter_[5].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe7I2B",m_Parameter_[6].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe8I2B",m_Parameter_[7].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe9I2B",m_Parameter_[8].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe10I2B",m_Parameter_[9].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe11I2B",m_Parameter_[10].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe12I2B",m_Parameter_[11].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe13I2B",m_Parameter_[12].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe14I2B",m_Parameter_[13].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe15I2B",m_Parameter_[14].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe16I2B",m_Parameter_[15].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe17I2B",m_Parameter_[16].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe18I2B",m_Parameter_[17].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe19I2B",m_Parameter_[18].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe20I2B",m_Parameter_[19].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe21I2B",m_Parameter_[20].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe22I2B",m_Parameter_[21].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe23I2B",m_Parameter_[22].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe24I2B",m_Parameter_[23].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe25I2B",m_Parameter_[24].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe26I2B",m_Parameter_[25].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe27I2B",m_Parameter_[26].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe28I2B",m_Parameter_[27].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe29I2B",m_Parameter_[28].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe30I2B",m_Parameter_[29].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe31I2B",m_Parameter_[30].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe32I2B",m_Parameter_[31].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe33I2B",m_Parameter_[32].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe34I2B",m_Parameter_[33].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe35I2B",m_Parameter_[34].m_GateInfo[3].m_fFrontGate);
	settings_Ultrasound.setValue("Probe36I2B",m_Parameter_[35].m_GateInfo[3].m_fFrontGate);

	settings_Ultrasound.setValue("Probe1IL",m_Parameter_[0].m_GateInfo[0].m_fBackGate);//I闸门宽度
	settings_Ultrasound.setValue("Probe2IL",m_Parameter_[1].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe3IL",m_Parameter_[2].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe4IL",m_Parameter_[3].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe5IL",m_Parameter_[4].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe6IL",m_Parameter_[5].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe7IL",m_Parameter_[6].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe8IL",m_Parameter_[7].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe9IL",m_Parameter_[8].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe10IL",m_Parameter_[9].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe11IL",m_Parameter_[10].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe12IL",m_Parameter_[11].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe13IL",m_Parameter_[12].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe14IL",m_Parameter_[13].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe15IL",m_Parameter_[14].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe16IL",m_Parameter_[15].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe17IL",m_Parameter_[16].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe18IL",m_Parameter_[17].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe19IL",m_Parameter_[18].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe20IL",m_Parameter_[19].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe21IL",m_Parameter_[20].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe22IL",m_Parameter_[21].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe23IL",m_Parameter_[22].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe24IL",m_Parameter_[23].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe25IL",m_Parameter_[24].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe26IL",m_Parameter_[25].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe27IL",m_Parameter_[26].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe28IL",m_Parameter_[27].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe29IL",m_Parameter_[28].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe30IL",m_Parameter_[29].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe31IL",m_Parameter_[30].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe32IL",m_Parameter_[31].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe33IL",m_Parameter_[32].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe34IL",m_Parameter_[33].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe35IL",m_Parameter_[34].m_GateInfo[0].m_fBackGate);
	settings_Ultrasound.setValue("Probe36IL",m_Parameter_[35].m_GateInfo[0].m_fBackGate);

	settings_Ultrasound.setValue("Probe1AL",m_Parameter_[0].m_GateInfo[1].m_fBackGate);//A闸门宽度
	settings_Ultrasound.setValue("Probe2AL",m_Parameter_[1].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe3AL",m_Parameter_[2].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe4AL",m_Parameter_[3].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe5AL",m_Parameter_[4].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe6AL",m_Parameter_[5].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe7AL",m_Parameter_[6].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe8AL",m_Parameter_[7].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe9AL",m_Parameter_[8].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe10AL",m_Parameter_[9].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe11AL",m_Parameter_[10].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe12AL",m_Parameter_[11].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe13AL",m_Parameter_[12].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe14AL",m_Parameter_[13].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe15AL",m_Parameter_[14].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe16AL",m_Parameter_[15].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe17AL",m_Parameter_[16].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe18AL",m_Parameter_[17].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe19AL",m_Parameter_[18].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe20AL",m_Parameter_[19].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe21AL",m_Parameter_[20].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe22AL",m_Parameter_[21].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe23AL",m_Parameter_[22].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe24AL",m_Parameter_[23].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe25AL",m_Parameter_[24].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe26AL",m_Parameter_[25].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe27AL",m_Parameter_[26].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe28AL",m_Parameter_[27].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe29AL",m_Parameter_[28].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe30AL",m_Parameter_[29].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe31AL",m_Parameter_[30].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe32AL",m_Parameter_[31].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe33AL",m_Parameter_[32].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe34AL",m_Parameter_[33].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe35AL",m_Parameter_[34].m_GateInfo[1].m_fBackGate);
	settings_Ultrasound.setValue("Probe36AL",m_Parameter_[35].m_GateInfo[1].m_fBackGate);

	settings_Ultrasound.setValue("Probe1BL",m_Parameter_[0].m_GateInfo[2].m_fBackGate);//B闸门宽度
	settings_Ultrasound.setValue("Probe2BL",m_Parameter_[1].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe3BL",m_Parameter_[2].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe4BL",m_Parameter_[3].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe5BL",m_Parameter_[4].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe6BL",m_Parameter_[5].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe7BL",m_Parameter_[6].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe8BL",m_Parameter_[7].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe9BL",m_Parameter_[8].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe10BL",m_Parameter_[9].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe11BL",m_Parameter_[10].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe12BL",m_Parameter_[11].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe13BL",m_Parameter_[12].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe14BL",m_Parameter_[13].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe15BL",m_Parameter_[14].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe16BL",m_Parameter_[15].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe17BL",m_Parameter_[16].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe18BL",m_Parameter_[17].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe19BL",m_Parameter_[18].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe20BL",m_Parameter_[19].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe21BL",m_Parameter_[20].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe22BL",m_Parameter_[21].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe23BL",m_Parameter_[22].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe24BL",m_Parameter_[23].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe25BL",m_Parameter_[24].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe26BL",m_Parameter_[25].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe27BL",m_Parameter_[26].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe28BL",m_Parameter_[27].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe29BL",m_Parameter_[28].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe30BL",m_Parameter_[29].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe31BL",m_Parameter_[30].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe32BL",m_Parameter_[31].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe33BL",m_Parameter_[32].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe34BL",m_Parameter_[33].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe35BL",m_Parameter_[34].m_GateInfo[2].m_fBackGate);
	settings_Ultrasound.setValue("Probe36BL",m_Parameter_[35].m_GateInfo[2].m_fBackGate);

	settings_Ultrasound.setValue("Probe1I2L",m_Parameter_[0].m_GateInfo[3].m_fBackGate);//I2闸门宽度
	settings_Ultrasound.setValue("Probe2I2L",m_Parameter_[1].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe3I2L",m_Parameter_[2].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe4I2L",m_Parameter_[3].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe5I2L",m_Parameter_[4].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe6I2L",m_Parameter_[5].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe7I2L",m_Parameter_[6].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe8I2L",m_Parameter_[7].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe9I2L",m_Parameter_[8].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe10I2L",m_Parameter_[9].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe11I2L",m_Parameter_[10].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe12I2L",m_Parameter_[11].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe13I2L",m_Parameter_[12].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe14I2L",m_Parameter_[13].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe15I2L",m_Parameter_[14].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe16I2L",m_Parameter_[15].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe17I2L",m_Parameter_[16].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe18I2L",m_Parameter_[17].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe19I2L",m_Parameter_[18].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe20I2L",m_Parameter_[19].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe21I2L",m_Parameter_[20].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe22I2L",m_Parameter_[21].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe23I2L",m_Parameter_[22].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe24I2L",m_Parameter_[23].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe25I2L",m_Parameter_[24].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe26I2L",m_Parameter_[25].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe27I2L",m_Parameter_[26].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe28I2L",m_Parameter_[27].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe29I2L",m_Parameter_[28].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe30I2L",m_Parameter_[29].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe31I2L",m_Parameter_[30].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe32I2L",m_Parameter_[31].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe33I2L",m_Parameter_[32].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe34I2L",m_Parameter_[33].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe35I2L",m_Parameter_[34].m_GateInfo[3].m_fBackGate);
	settings_Ultrasound.setValue("Probe36I2L",m_Parameter_[35].m_GateInfo[3].m_fBackGate);

	settings_Ultrasound.setValue("Probe1IT",m_Parameter_[0].m_GateInfo[0].m_fPeakGate);//I闸门阈值
	settings_Ultrasound.setValue("Probe2IT",m_Parameter_[1].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe3IT",m_Parameter_[2].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe4IT",m_Parameter_[3].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe5IT",m_Parameter_[4].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe6IT",m_Parameter_[5].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe7IT",m_Parameter_[6].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe8IT",m_Parameter_[7].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe9IT",m_Parameter_[8].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe10IT",m_Parameter_[9].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe11IT",m_Parameter_[10].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe12IT",m_Parameter_[11].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe13IT",m_Parameter_[12].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe14IT",m_Parameter_[13].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe15IT",m_Parameter_[14].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe16IT",m_Parameter_[15].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe17IT",m_Parameter_[16].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe18IT",m_Parameter_[17].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe19IT",m_Parameter_[18].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe20IT",m_Parameter_[19].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe21IT",m_Parameter_[20].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe22IT",m_Parameter_[21].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe23IT",m_Parameter_[22].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe24IT",m_Parameter_[23].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe25IT",m_Parameter_[24].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe26IT",m_Parameter_[25].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe27IT",m_Parameter_[26].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe28IT",m_Parameter_[27].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe29IT",m_Parameter_[28].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe30IT",m_Parameter_[29].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe31IT",m_Parameter_[30].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe32IT",m_Parameter_[31].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe33IT",m_Parameter_[32].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe34IT",m_Parameter_[33].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe35IT",m_Parameter_[34].m_GateInfo[0].m_fPeakGate);
	settings_Ultrasound.setValue("Probe36IT",m_Parameter_[35].m_GateInfo[0].m_fPeakGate);

	settings_Ultrasound.setValue("Probe1AT",m_Parameter_[0].m_GateInfo[1].m_fPeakGate);//A闸门阈值
	settings_Ultrasound.setValue("Probe2AT",m_Parameter_[1].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe3AT",m_Parameter_[2].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe4AT",m_Parameter_[3].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe5AT",m_Parameter_[4].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe6AT",m_Parameter_[5].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe7AT",m_Parameter_[6].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe8AT",m_Parameter_[7].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe9AT",m_Parameter_[8].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe10AT",m_Parameter_[9].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe11AT",m_Parameter_[10].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe12AT",m_Parameter_[11].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe13AT",m_Parameter_[12].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe14AT",m_Parameter_[13].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe15AT",m_Parameter_[14].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe16AT",m_Parameter_[15].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe17AT",m_Parameter_[16].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe18AT",m_Parameter_[17].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe19AT",m_Parameter_[18].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe20AT",m_Parameter_[19].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe21AT",m_Parameter_[20].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe22AT",m_Parameter_[21].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe23AT",m_Parameter_[22].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe24AT",m_Parameter_[23].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe25AT",m_Parameter_[24].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe26AT",m_Parameter_[25].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe27AT",m_Parameter_[26].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe28AT",m_Parameter_[27].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe29AT",m_Parameter_[28].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe30AT",m_Parameter_[29].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe31AT",m_Parameter_[30].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe32AT",m_Parameter_[31].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe33AT",m_Parameter_[32].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe34AT",m_Parameter_[33].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe35AT",m_Parameter_[34].m_GateInfo[1].m_fPeakGate);
	settings_Ultrasound.setValue("Probe36AT",m_Parameter_[35].m_GateInfo[1].m_fPeakGate);

	settings_Ultrasound.setValue("Probe1BT",m_Parameter_[0].m_GateInfo[2].m_fPeakGate);//B闸门阈值
	settings_Ultrasound.setValue("Probe2BT",m_Parameter_[1].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe3BT",m_Parameter_[2].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe4BT",m_Parameter_[3].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe5BT",m_Parameter_[4].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe6BT",m_Parameter_[5].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe7BT",m_Parameter_[6].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe8BT",m_Parameter_[7].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe9BT",m_Parameter_[8].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe10BT",m_Parameter_[9].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe11BT",m_Parameter_[10].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe12BT",m_Parameter_[11].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe13BT",m_Parameter_[12].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe14BT",m_Parameter_[13].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe15BT",m_Parameter_[14].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe16BT",m_Parameter_[15].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe17BT",m_Parameter_[16].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe18BT",m_Parameter_[17].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe19BT",m_Parameter_[18].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe20BT",m_Parameter_[19].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe21BT",m_Parameter_[20].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe22BT",m_Parameter_[21].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe23BT",m_Parameter_[22].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe24BT",m_Parameter_[23].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe25BT",m_Parameter_[24].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe26BT",m_Parameter_[25].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe27BT",m_Parameter_[26].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe28BT",m_Parameter_[27].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe29BT",m_Parameter_[28].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe30BT",m_Parameter_[29].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe31BT",m_Parameter_[30].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe32BT",m_Parameter_[31].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe33BT",m_Parameter_[32].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe34BT",m_Parameter_[33].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe35BT",m_Parameter_[34].m_GateInfo[2].m_fPeakGate);
	settings_Ultrasound.setValue("Probe36BT",m_Parameter_[35].m_GateInfo[2].m_fPeakGate);

	settings_Ultrasound.setValue("Probe1I2T",m_Parameter_[0].m_GateInfo[3].m_fPeakGate);//I2闸门阈值
	settings_Ultrasound.setValue("Probe2I2T",m_Parameter_[1].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe3I2T",m_Parameter_[2].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe4I2T",m_Parameter_[3].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe5I2T",m_Parameter_[4].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe6I2T",m_Parameter_[5].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe7I2T",m_Parameter_[6].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe8I2T",m_Parameter_[7].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe9I2T",m_Parameter_[8].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe10I2T",m_Parameter_[9].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe11I2T",m_Parameter_[10].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe12I2T",m_Parameter_[11].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe13I2T",m_Parameter_[12].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe14I2T",m_Parameter_[13].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe15I2T",m_Parameter_[14].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe16I2T",m_Parameter_[15].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe17I2T",m_Parameter_[16].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe18I2T",m_Parameter_[17].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe19I2T",m_Parameter_[18].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe20I2T",m_Parameter_[19].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe21I2T",m_Parameter_[20].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe22I2T",m_Parameter_[21].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe23I2T",m_Parameter_[22].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe24I2T",m_Parameter_[23].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe25I2T",m_Parameter_[24].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe26I2T",m_Parameter_[25].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe27I2T",m_Parameter_[26].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe28I2T",m_Parameter_[27].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe29I2T",m_Parameter_[28].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe30I2T",m_Parameter_[29].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe31I2T",m_Parameter_[30].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe32I2T",m_Parameter_[31].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe33I2T",m_Parameter_[32].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe34I2T",m_Parameter_[33].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe35I2T",m_Parameter_[34].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.setValue("Probe36I2T",m_Parameter_[35].m_GateInfo[3].m_fPeakGate);
	settings_Ultrasound.endGroup();
	
	
	//闸门开关状态另存为
	settings_Ultrasound.beginGroup("Judge");
	settings_Ultrasound.setValue("IProbe1",m_Parameter_[0].m_GateInfo[0].m_bOpen);//I闸门开关状态
	settings_Ultrasound.setValue("IProbe2",m_Parameter_[1].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe3",m_Parameter_[2].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe4",m_Parameter_[3].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe5",m_Parameter_[4].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe6",m_Parameter_[5].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe7",m_Parameter_[6].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe8",m_Parameter_[7].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe9",m_Parameter_[8].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe10",m_Parameter_[9].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe11",m_Parameter_[10].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe12",m_Parameter_[11].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe13",m_Parameter_[12].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe14",m_Parameter_[13].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe15",m_Parameter_[14].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe16",m_Parameter_[15].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe17",m_Parameter_[16].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe18",m_Parameter_[17].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe19",m_Parameter_[18].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe20",m_Parameter_[19].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe21",m_Parameter_[20].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe22",m_Parameter_[21].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe23",m_Parameter_[22].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe24",m_Parameter_[23].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe25",m_Parameter_[24].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe26",m_Parameter_[25].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe27",m_Parameter_[26].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe28",m_Parameter_[27].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe29",m_Parameter_[28].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe30",m_Parameter_[29].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe31",m_Parameter_[30].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe32",m_Parameter_[31].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe33",m_Parameter_[32].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe34",m_Parameter_[33].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe35",m_Parameter_[34].m_GateInfo[0].m_bOpen);
	settings_Ultrasound.setValue("IProbe36",m_Parameter_[35].m_GateInfo[0].m_bOpen);

	settings_Ultrasound.setValue("AProbe1",m_Parameter_[0].m_GateInfo[1].m_bOpen);//A闸门开关状态
	settings_Ultrasound.setValue("AProbe2",m_Parameter_[1].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe3",m_Parameter_[2].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe4",m_Parameter_[3].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe5",m_Parameter_[4].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe6",m_Parameter_[5].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe7",m_Parameter_[6].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe8",m_Parameter_[7].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe9",m_Parameter_[8].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe10",m_Parameter_[9].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe11",m_Parameter_[10].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe12",m_Parameter_[11].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe13",m_Parameter_[12].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe14",m_Parameter_[13].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe15",m_Parameter_[14].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe16",m_Parameter_[15].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe17",m_Parameter_[16].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe18",m_Parameter_[17].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe19",m_Parameter_[18].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe20",m_Parameter_[19].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe21",m_Parameter_[20].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe22",m_Parameter_[21].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe23",m_Parameter_[22].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe24",m_Parameter_[23].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe25",m_Parameter_[24].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe26",m_Parameter_[25].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe27",m_Parameter_[26].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe28",m_Parameter_[27].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe29",m_Parameter_[28].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe30",m_Parameter_[29].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe31",m_Parameter_[30].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe32",m_Parameter_[31].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe33",m_Parameter_[32].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe34",m_Parameter_[33].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe35",m_Parameter_[34].m_GateInfo[1].m_bOpen);
	settings_Ultrasound.setValue("AProbe36",m_Parameter_[35].m_GateInfo[1].m_bOpen);

	settings_Ultrasound.setValue("BProbe1",m_Parameter_[0].m_GateInfo[2].m_bOpen);//B闸门开关状态
	settings_Ultrasound.setValue("BProbe2",m_Parameter_[1].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe3",m_Parameter_[2].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe4",m_Parameter_[3].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe5",m_Parameter_[4].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe6",m_Parameter_[5].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe7",m_Parameter_[6].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe8",m_Parameter_[7].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe9",m_Parameter_[8].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe10",m_Parameter_[9].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe11",m_Parameter_[10].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe12",m_Parameter_[11].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe13",m_Parameter_[12].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe14",m_Parameter_[13].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe15",m_Parameter_[14].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe16",m_Parameter_[15].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe17",m_Parameter_[16].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe18",m_Parameter_[17].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe19",m_Parameter_[18].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe20",m_Parameter_[19].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe21",m_Parameter_[20].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe22",m_Parameter_[21].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe23",m_Parameter_[22].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe24",m_Parameter_[23].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe25",m_Parameter_[24].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe26",m_Parameter_[25].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe27",m_Parameter_[26].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe28",m_Parameter_[27].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe29",m_Parameter_[28].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe30",m_Parameter_[29].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe31",m_Parameter_[30].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe32",m_Parameter_[31].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe33",m_Parameter_[32].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe34",m_Parameter_[33].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe35",m_Parameter_[34].m_GateInfo[2].m_bOpen);
	settings_Ultrasound.setValue("BProbe36",m_Parameter_[35].m_GateInfo[2].m_bOpen);

	settings_Ultrasound.setValue("I2Probe1",m_Parameter_[0].m_GateInfo[3].m_bOpen);//I2闸门开关状态
	settings_Ultrasound.setValue("I2Probe2",m_Parameter_[1].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe3",m_Parameter_[2].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe4",m_Parameter_[3].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe5",m_Parameter_[4].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe6",m_Parameter_[5].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe7",m_Parameter_[6].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe8",m_Parameter_[7].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe9",m_Parameter_[8].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe10",m_Parameter_[9].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe11",m_Parameter_[10].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe12",m_Parameter_[11].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe13",m_Parameter_[12].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe14",m_Parameter_[13].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe15",m_Parameter_[14].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe16",m_Parameter_[15].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe17",m_Parameter_[16].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe18",m_Parameter_[17].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe19",m_Parameter_[18].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe20",m_Parameter_[19].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe21",m_Parameter_[20].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe22",m_Parameter_[21].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe23",m_Parameter_[22].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe24",m_Parameter_[23].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe25",m_Parameter_[24].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe26",m_Parameter_[25].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe27",m_Parameter_[26].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe28",m_Parameter_[27].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe29",m_Parameter_[28].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe30",m_Parameter_[29].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe31",m_Parameter_[30].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe32",m_Parameter_[31].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe33",m_Parameter_[32].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe34",m_Parameter_[33].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe35",m_Parameter_[34].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.setValue("I2Probe36",m_Parameter_[35].m_GateInfo[3].m_bOpen);
	settings_Ultrasound.endGroup();
	
	
	//降噪数另存为
	settings_Ultrasound.beginGroup("StaNoise");
	settings_Ultrasound.setValue("IProbe1",m_Parameter_[0].m_GateInfo[0].m_nStaNoise);//I闸门降噪数
	settings_Ultrasound.setValue("IProbe2",m_Parameter_[1].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe3",m_Parameter_[2].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe4",m_Parameter_[3].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe5",m_Parameter_[4].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe6",m_Parameter_[5].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe7",m_Parameter_[6].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe8",m_Parameter_[7].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe9",m_Parameter_[8].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe10",m_Parameter_[9].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe11",m_Parameter_[10].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe12",m_Parameter_[11].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe13",m_Parameter_[12].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe14",m_Parameter_[13].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe15",m_Parameter_[14].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe16",m_Parameter_[15].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe17",m_Parameter_[16].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe18",m_Parameter_[17].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe19",m_Parameter_[18].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe20",m_Parameter_[19].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe21",m_Parameter_[20].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe22",m_Parameter_[21].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe23",m_Parameter_[22].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe24",m_Parameter_[23].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe25",m_Parameter_[24].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe26",m_Parameter_[25].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe27",m_Parameter_[26].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe28",m_Parameter_[27].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe29",m_Parameter_[28].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe30",m_Parameter_[29].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe31",m_Parameter_[30].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe32",m_Parameter_[31].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe33",m_Parameter_[32].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe34",m_Parameter_[33].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe35",m_Parameter_[34].m_GateInfo[0].m_nStaNoise);
	settings_Ultrasound.setValue("IProbe36",m_Parameter_[35].m_GateInfo[0].m_nStaNoise);

	settings_Ultrasound.setValue("AProbe1",m_Parameter_[0].m_GateInfo[1].m_nStaNoise);//A闸门降噪数
	settings_Ultrasound.setValue("AProbe2",m_Parameter_[1].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe3",m_Parameter_[2].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe4",m_Parameter_[3].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe5",m_Parameter_[4].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe6",m_Parameter_[5].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe7",m_Parameter_[6].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe8",m_Parameter_[7].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe9",m_Parameter_[8].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe10",m_Parameter_[9].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe11",m_Parameter_[10].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe12",m_Parameter_[11].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe13",m_Parameter_[12].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe14",m_Parameter_[13].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe15",m_Parameter_[14].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe16",m_Parameter_[15].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe17",m_Parameter_[16].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe18",m_Parameter_[17].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe19",m_Parameter_[18].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe20",m_Parameter_[19].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe21",m_Parameter_[20].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe22",m_Parameter_[21].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe23",m_Parameter_[22].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe24",m_Parameter_[23].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe25",m_Parameter_[24].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe26",m_Parameter_[25].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe27",m_Parameter_[26].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe28",m_Parameter_[27].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe29",m_Parameter_[28].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe30",m_Parameter_[29].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe31",m_Parameter_[30].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe32",m_Parameter_[31].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe33",m_Parameter_[32].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe34",m_Parameter_[33].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe35",m_Parameter_[34].m_GateInfo[1].m_nStaNoise);
	settings_Ultrasound.setValue("AProbe36",m_Parameter_[35].m_GateInfo[1].m_nStaNoise);

	settings_Ultrasound.setValue("BProbe1",m_Parameter_[0].m_GateInfo[2].m_nStaNoise);//B闸门降噪数
	settings_Ultrasound.setValue("BProbe2",m_Parameter_[1].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe3",m_Parameter_[2].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe4",m_Parameter_[3].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe5",m_Parameter_[4].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe6",m_Parameter_[5].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe7",m_Parameter_[6].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe8",m_Parameter_[7].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe9",m_Parameter_[8].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe10",m_Parameter_[9].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe11",m_Parameter_[10].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe12",m_Parameter_[11].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe13",m_Parameter_[12].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe14",m_Parameter_[13].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe15",m_Parameter_[14].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe16",m_Parameter_[15].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe17",m_Parameter_[16].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe18",m_Parameter_[17].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe19",m_Parameter_[18].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe20",m_Parameter_[19].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe21",m_Parameter_[20].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe22",m_Parameter_[21].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe23",m_Parameter_[22].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe24",m_Parameter_[23].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe25",m_Parameter_[24].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe26",m_Parameter_[25].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe27",m_Parameter_[26].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe28",m_Parameter_[27].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe29",m_Parameter_[28].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe30",m_Parameter_[29].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe31",m_Parameter_[30].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe32",m_Parameter_[31].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe33",m_Parameter_[32].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe34",m_Parameter_[33].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe35",m_Parameter_[34].m_GateInfo[2].m_nStaNoise);
	settings_Ultrasound.setValue("BProbe36",m_Parameter_[35].m_GateInfo[2].m_nStaNoise);

	settings_Ultrasound.setValue("I2Probe1",m_Parameter_[0].m_GateInfo[3].m_nStaNoise);//I2闸门降噪数
	settings_Ultrasound.setValue("I2Probe2",m_Parameter_[1].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe3",m_Parameter_[2].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe4",m_Parameter_[3].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe5",m_Parameter_[4].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe6",m_Parameter_[5].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe7",m_Parameter_[6].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe8",m_Parameter_[7].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe9",m_Parameter_[8].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe10",m_Parameter_[9].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe11",m_Parameter_[10].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe12",m_Parameter_[11].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe13",m_Parameter_[12].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe14",m_Parameter_[13].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe15",m_Parameter_[14].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe16",m_Parameter_[15].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe17",m_Parameter_[16].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe18",m_Parameter_[17].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe19",m_Parameter_[18].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe20",m_Parameter_[19].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe21",m_Parameter_[20].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe22",m_Parameter_[21].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe23",m_Parameter_[22].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe24",m_Parameter_[23].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe25",m_Parameter_[24].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe26",m_Parameter_[25].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe27",m_Parameter_[26].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe28",m_Parameter_[27].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe29",m_Parameter_[28].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe30",m_Parameter_[29].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe31",m_Parameter_[30].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe32",m_Parameter_[31].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe33",m_Parameter_[32].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe34",m_Parameter_[33].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe35",m_Parameter_[34].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.setValue("I2Probe36",m_Parameter_[35].m_GateInfo[3].m_nStaNoise);
	settings_Ultrasound.endGroup();
	
	
	//重复频率另存为
	settings_Ultrasound.beginGroup("ReFreq");
	settings_Ultrasound.setValue("Probe1",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe1->text()));
	settings_Ultrasound.setValue("Probe2",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe2->text()));
	settings_Ultrasound.setValue("Probe3",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe3->text()));
	settings_Ultrasound.setValue("Probe4",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe4->text()));
	settings_Ultrasound.setValue("Probe5",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe5->text()));
	settings_Ultrasound.setValue("Probe6",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe6->text()));
	settings_Ultrasound.setValue("Probe7",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe7->text()));
	settings_Ultrasound.setValue("Probe8",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe8->text()));
	settings_Ultrasound.setValue("Probe9",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe9->text()));
	settings_Ultrasound.setValue("Probe10",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe10->text()));
	settings_Ultrasound.setValue("Probe11",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe11->text()));
	settings_Ultrasound.setValue("Probe12",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe12->text()));
	settings_Ultrasound.setValue("Probe13",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe13->text()));
	settings_Ultrasound.setValue("Probe14",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe14->text()));
	settings_Ultrasound.setValue("Probe15",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe15->text()));
	settings_Ultrasound.setValue("Probe16",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe16->text()));
	settings_Ultrasound.setValue("Probe17",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe17->text()));
	settings_Ultrasound.setValue("Probe18",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe18->text()));
	settings_Ultrasound.setValue("Probe19",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe19->text()));
	settings_Ultrasound.setValue("Probe20",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe20->text()));
	settings_Ultrasound.setValue("Probe21",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe21->text()));
	settings_Ultrasound.setValue("Probe22",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe22->text()));
	settings_Ultrasound.setValue("Probe23",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe23->text()));
	settings_Ultrasound.setValue("Probe24",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe24->text()));
	settings_Ultrasound.setValue("Probe25",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe25->text()));
	settings_Ultrasound.setValue("Probe26",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe26->text()));
	settings_Ultrasound.setValue("Probe27",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe27->text()));
	settings_Ultrasound.setValue("Probe28",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe28->text()));
	settings_Ultrasound.setValue("Probe29",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe29->text()));
	settings_Ultrasound.setValue("Probe30",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe30->text()));
	settings_Ultrasound.setValue("Probe31",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe31->text()));
	settings_Ultrasound.setValue("Probe32",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe32->text()));
	settings_Ultrasound.setValue("Probe33",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe33->text()));
	settings_Ultrasound.setValue("Probe34",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe34->text()));
	settings_Ultrasound.setValue("Probe35",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe35->text()));
	settings_Ultrasound.setValue("Probe36",QString(m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe36->text()));
	settings_Ultrasound.endGroup();

	//带宽另存为
	settings_Ultrasound.beginGroup("Width");
	settings_Ultrasound.setValue("Probe1",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe1->text()));
	settings_Ultrasound.setValue("Probe2",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe2->text()));
	settings_Ultrasound.setValue("Probe3",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe3->text()));
	settings_Ultrasound.setValue("Probe4",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe4->text()));
	settings_Ultrasound.setValue("Probe5",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe5->text()));
	settings_Ultrasound.setValue("Probe6",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe6->text()));
	settings_Ultrasound.setValue("Probe7",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe7->text()));
	settings_Ultrasound.setValue("Probe8",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe8->text()));
	settings_Ultrasound.setValue("Probe9",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe9->text()));
	settings_Ultrasound.setValue("Probe10",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe10->text()));
	settings_Ultrasound.setValue("Probe11",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe11->text()));
	settings_Ultrasound.setValue("Probe12",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe12->text()));
	settings_Ultrasound.setValue("Probe13",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe13->text()));
	settings_Ultrasound.setValue("Probe14",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe14->text()));
	settings_Ultrasound.setValue("Probe15",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe15->text()));
	settings_Ultrasound.setValue("Probe16",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe16->text()));
	settings_Ultrasound.setValue("Probe17",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe17->text()));
	settings_Ultrasound.setValue("Probe18",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe18->text()));
	settings_Ultrasound.setValue("Probe19",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe19->text()));
	settings_Ultrasound.setValue("Probe20",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe20->text()));
	settings_Ultrasound.setValue("Probe21",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe21->text()));
	settings_Ultrasound.setValue("Probe22",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe22->text()));
	settings_Ultrasound.setValue("Probe23",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe23->text()));
	settings_Ultrasound.setValue("Probe24",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe24->text()));
	settings_Ultrasound.setValue("Probe25",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe25->text()));
	settings_Ultrasound.setValue("Probe26",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe26->text()));
	settings_Ultrasound.setValue("Probe27",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe27->text()));
	settings_Ultrasound.setValue("Probe28",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe28->text()));
	settings_Ultrasound.setValue("Probe29",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe29->text()));
	settings_Ultrasound.setValue("Probe30",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe30->text()));
	settings_Ultrasound.setValue("Probe31",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe31->text()));
	settings_Ultrasound.setValue("Probe32",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe32->text()));
	settings_Ultrasound.setValue("Probe33",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe33->text()));
	settings_Ultrasound.setValue("Probe34",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe34->text()));
	settings_Ultrasound.setValue("Probe35",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe35->text()));
	settings_Ultrasound.setValue("Probe36",QString(m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe36->text()));
	settings_Ultrasound.endGroup();

	//探头设置另存为
	settings_Ultrasound.beginGroup("ProbeSet");
	settings_Ultrasound.setValue("Probe1Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro1Hz->text()));
	settings_Ultrasound.setValue("Probe2Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro2Hz->text()));
	settings_Ultrasound.setValue("Probe3Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro3Hz->text()));
	settings_Ultrasound.setValue("Probe4Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro4Hz->text()));
	settings_Ultrasound.setValue("Probe5Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro5Hz->text()));
	settings_Ultrasound.setValue("Probe6Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro6Hz->text()));
	settings_Ultrasound.setValue("Probe7Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro7Hz->text()));
	settings_Ultrasound.setValue("Probe8Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro8Hz->text()));
	settings_Ultrasound.setValue("Probe9Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro9Hz->text()));
	settings_Ultrasound.setValue("Probe10Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro10Hz->text()));
	settings_Ultrasound.setValue("Probe11Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro11Hz->text()));
	settings_Ultrasound.setValue("Probe12Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro12Hz->text()));
	settings_Ultrasound.setValue("Probe13Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro13Hz->text()));
	settings_Ultrasound.setValue("Probe14Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro14Hz->text()));
	settings_Ultrasound.setValue("Probe15Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro15Hz->text()));
	settings_Ultrasound.setValue("Probe16Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro16Hz->text()));
	settings_Ultrasound.setValue("Probe17Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro17Hz->text()));
	settings_Ultrasound.setValue("Probe18Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro18Hz->text()));
	settings_Ultrasound.setValue("Probe19Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro19Hz->text()));
	settings_Ultrasound.setValue("Probe20Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro20Hz->text()));
	settings_Ultrasound.setValue("Probe21Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro21Hz->text()));
	settings_Ultrasound.setValue("Probe22Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro22Hz->text()));
	settings_Ultrasound.setValue("Probe23Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro23Hz->text()));
	settings_Ultrasound.setValue("Probe24Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro24Hz->text()));
	settings_Ultrasound.setValue("Probe25Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro25Hz->text()));
	settings_Ultrasound.setValue("Probe26Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro26Hz->text()));
	settings_Ultrasound.setValue("Probe27Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro27Hz->text()));
	settings_Ultrasound.setValue("Probe28Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro28Hz->text()));
	settings_Ultrasound.setValue("Probe29Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro29Hz->text()));
	settings_Ultrasound.setValue("Probe30Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro30Hz->text()));
	settings_Ultrasound.setValue("Probe31Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro31Hz->text()));
	settings_Ultrasound.setValue("Probe32Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro32Hz->text()));
	settings_Ultrasound.setValue("Probe33Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro33Hz->text()));
	settings_Ultrasound.setValue("Probe34Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro34Hz->text()));
	settings_Ultrasound.setValue("Probe35Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro35Hz->text()));
	settings_Ultrasound.setValue("Probe36Hz",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro36Hz->text()));

	settings_Ultrasound.setValue("Probe1Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro1Cor->text()));
	settings_Ultrasound.setValue("Probe2Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro2Cor->text()));
	settings_Ultrasound.setValue("Probe3Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro3Cor->text()));
	settings_Ultrasound.setValue("Probe4Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro4Cor->text()));
	settings_Ultrasound.setValue("Probe5Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro5Cor->text()));
	settings_Ultrasound.setValue("Probe6Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro6Cor->text()));
	settings_Ultrasound.setValue("Probe7Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro7Cor->text()));
	settings_Ultrasound.setValue("Probe8Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro8Cor->text()));
	settings_Ultrasound.setValue("Probe9Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro9Cor->text()));
	settings_Ultrasound.setValue("Probe10Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro10Cor->text()));
	settings_Ultrasound.setValue("Probe11Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro11Cor->text()));
	settings_Ultrasound.setValue("Probe12Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro12Cor->text()));
	settings_Ultrasound.setValue("Probe13Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro13Cor->text()));
	settings_Ultrasound.setValue("Probe14Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro14Cor->text()));
	settings_Ultrasound.setValue("Probe15Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro15Cor->text()));
	settings_Ultrasound.setValue("Probe16Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro16Cor->text()));
	settings_Ultrasound.setValue("Probe17Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro17Cor->text()));
	settings_Ultrasound.setValue("Probe18Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro18Cor->text()));
	settings_Ultrasound.setValue("Probe19Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro19Cor->text()));
	settings_Ultrasound.setValue("Probe20Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro20Cor->text()));
	settings_Ultrasound.setValue("Probe21Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro21Cor->text()));
	settings_Ultrasound.setValue("Probe22Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro22Cor->text()));
	settings_Ultrasound.setValue("Probe23Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro23Cor->text()));
	settings_Ultrasound.setValue("Probe24Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro24Cor->text()));
	settings_Ultrasound.setValue("Probe25Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro25Cor->text()));
	settings_Ultrasound.setValue("Probe26Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro26Cor->text()));
	settings_Ultrasound.setValue("Probe27Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro27Cor->text()));
	settings_Ultrasound.setValue("Probe28Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro28Cor->text()));
	settings_Ultrasound.setValue("Probe29Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro29Cor->text()));
	settings_Ultrasound.setValue("Probe30Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro30Cor->text()));
	settings_Ultrasound.setValue("Probe31Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro31Cor->text()));
	settings_Ultrasound.setValue("Probe32Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro32Cor->text()));
	settings_Ultrasound.setValue("Probe33Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro33Cor->text()));
	settings_Ultrasound.setValue("Probe34Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro34Cor->text()));
	settings_Ultrasound.setValue("Probe35Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro35Cor->text()));
	settings_Ultrasound.setValue("Probe36Cor",QString(m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro36Cor->text()));
	settings_Ultrasound.endGroup();

	//抑制另存为
	settings_Ultrasound.beginGroup("Suppression");
	settings_Ultrasound.setValue("Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fRestrain));
	settings_Ultrasound.setValue("Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fRestrain));
	settings_Ultrasound.setValue("Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fRestrain));
	settings_Ultrasound.setValue("Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fRestrain));
	settings_Ultrasound.setValue("Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fRestrain));
	settings_Ultrasound.setValue("Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fRestrain));
	settings_Ultrasound.setValue("Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fRestrain));
	settings_Ultrasound.setValue("Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fRestrain));
	settings_Ultrasound.setValue("Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fRestrain));
	settings_Ultrasound.setValue("Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fRestrain));
	settings_Ultrasound.setValue("Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fRestrain));
	settings_Ultrasound.setValue("Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fRestrain));
	settings_Ultrasound.setValue("Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fRestrain));
	settings_Ultrasound.setValue("Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fRestrain));
	settings_Ultrasound.setValue("Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fRestrain));
	settings_Ultrasound.setValue("Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fRestrain));
	settings_Ultrasound.setValue("Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fRestrain));
	settings_Ultrasound.setValue("Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fRestrain));
	settings_Ultrasound.setValue("Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fRestrain));
	settings_Ultrasound.setValue("Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fRestrain));
	settings_Ultrasound.setValue("Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fRestrain));
	settings_Ultrasound.setValue("Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fRestrain));
	settings_Ultrasound.setValue("Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fRestrain));
	settings_Ultrasound.setValue("Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fRestrain));
	settings_Ultrasound.setValue("Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fRestrain));
	settings_Ultrasound.setValue("Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fRestrain));
	settings_Ultrasound.setValue("Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fRestrain));
	settings_Ultrasound.setValue("Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fRestrain));
	settings_Ultrasound.setValue("Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fRestrain));
	settings_Ultrasound.setValue("Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fRestrain));
	settings_Ultrasound.setValue("Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fRestrain));
	settings_Ultrasound.setValue("Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fRestrain));
	settings_Ultrasound.setValue("Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fRestrain));
	settings_Ultrasound.setValue("Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fRestrain));
	settings_Ultrasound.setValue("Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fRestrain));
	settings_Ultrasound.setValue("Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fRestrain));
	settings_Ultrasound.endGroup();

	//范围另存为
	settings_Ultrasound.beginGroup("Range");
	settings_Ultrasound.setValue("Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fChannelRange));
	settings_Ultrasound.setValue("Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fChannelRange));
	settings_Ultrasound.setValue("Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fChannelRange));
	settings_Ultrasound.setValue("Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fChannelRange));
	settings_Ultrasound.setValue("Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fChannelRange));
	settings_Ultrasound.setValue("Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fChannelRange));
	settings_Ultrasound.setValue("Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fChannelRange));
	settings_Ultrasound.setValue("Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fChannelRange));
	settings_Ultrasound.setValue("Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fChannelRange));
	settings_Ultrasound.setValue("Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fChannelRange));
	settings_Ultrasound.setValue("Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fChannelRange));
	settings_Ultrasound.setValue("Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fChannelRange));
	settings_Ultrasound.setValue("Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fChannelRange));
	settings_Ultrasound.setValue("Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fChannelRange));
	settings_Ultrasound.setValue("Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fChannelRange));
	settings_Ultrasound.setValue("Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fChannelRange));
	settings_Ultrasound.setValue("Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fChannelRange));
	settings_Ultrasound.setValue("Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fChannelRange));
	settings_Ultrasound.setValue("Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fChannelRange));
	settings_Ultrasound.setValue("Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fChannelRange));
	settings_Ultrasound.setValue("Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fChannelRange));
	settings_Ultrasound.setValue("Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fChannelRange));
	settings_Ultrasound.setValue("Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fChannelRange));
	settings_Ultrasound.setValue("Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fChannelRange));
	settings_Ultrasound.setValue("Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fChannelRange));
	settings_Ultrasound.setValue("Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fChannelRange));
	settings_Ultrasound.setValue("Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fChannelRange));
	settings_Ultrasound.setValue("Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fChannelRange));
	settings_Ultrasound.setValue("Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fChannelRange));
	settings_Ultrasound.setValue("Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fChannelRange));
	settings_Ultrasound.setValue("Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fChannelRange));
	settings_Ultrasound.setValue("Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fChannelRange));
	settings_Ultrasound.setValue("Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fChannelRange));
	settings_Ultrasound.setValue("Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fChannelRange));
	settings_Ultrasound.setValue("Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fChannelRange));
	settings_Ultrasound.setValue("Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fChannelRange));
	settings_Ultrasound.endGroup();
}

void GuanTan::ShowParameterYes()
{
	m_ParameterSetting.m_ShowParameter.close();
	QSettings settings_showParameter(m_ParameterSetting.m_qsShowParameter, QSettings::IniFormat); // 当前目录的INI文件 
	settings_showParameter.setValue("0000001/Length",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditLength->text()));
	settings_showParameter.setValue("0000001/ToleranceMin",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditToleranceMin->text()));
	settings_showParameter.setValue("0000001/ToleranceMax",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditToleranceMax->text()));
	settings_showParameter.setValue("0000001/LimitsMin",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditLimitsMin->text()));
	settings_showParameter.setValue("0000001/LimitsMax",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditLimitsMax->text()));
	settings_showParameter.setValue("0000001/Ply",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditPly->text()));
	m_fPIPE_LENGTH = m_ParameterSetting.m_ShowParameter.ui.lineEditLength->text().toFloat();
}

void GuanTan::ShowParameterNo()
{
	m_ParameterSetting.m_ShowParameter.close();
}

void GuanTan::ShowParameterSaveAs()
{
// 	QFileDialog textsave(this,tr("显示参数保存"));
// 	textsave.setAcceptMode(QFileDialog::AcceptSave);
// 	textsave.setFileMode(QFileDialog::AnyFile);
// 	textsave.setViewMode(QFileDialog::Detail);
// 	QStringList qt;
// 	textsave.exec();
// 	qt = textsave.selectedFiles();
// 	QFile file(qt.at(0));
// 	file.open(QIODevice::WriteOnly);
// 	QSettings settings_show(qt.at(0), QSettings::IniFormat); // 当前目录的INI文件 
	QString str = QFileDialog::getSaveFileName(this, tr("显示参数文件保存"), tr("D:/管探参数/"), "INI(*.ini)"); //xp系统中文版
	QFile file(str);
	file.open(QIODevice::WriteOnly);
	QSettings settings_show(str, QSettings::IniFormat);
	settings_show.beginGroup("0000001");
	settings_show.setValue("Length",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditLength->text()));
	settings_show.setValue("ToleranceMin",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditToleranceMin->text()));
	settings_show.setValue("ToleranceMax",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditToleranceMax->text()));
	settings_show.setValue("LimitsMin",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditLimitsMin->text()));
	settings_show.setValue("LimitsMax",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditLimitsMax->text()));
	settings_show.setValue("Ply",QString(m_ParameterSetting.m_ShowParameter.ui.lineEditPly->text()));
	settings_show.endGroup();
}

void GuanTan::JudgeParameterYes()
{
	m_ParameterSetting.m_JudgeParameter.close();
	QSettings settings_judgeParameter(m_ParameterSetting.m_qsJudgeParameter, QSettings::IniFormat); // 当前目录的INI文件 
	settings_judgeParameter.setValue("mark/YOut",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxYOut->currentIndex()));
	settings_judgeParameter.setValue("mark/YIn",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxYIn->currentIndex()));
 	settings_judgeParameter.setValue("mark/XOut",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxXOut->currentIndex()));
 	settings_judgeParameter.setValue("mark/XIn",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxXIn->currentIndex()));
 	settings_judgeParameter.setValue("mark/PlyCut",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxPlyCut->currentIndex()));
 	settings_judgeParameter.setValue("mark/PlyAdd",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxPlyAdd->currentIndex()));
 	settings_judgeParameter.setValue("mark/Layering",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxLayering->currentIndex()));
 	settings_judgeParameter.setValue("chose/YesCouplingNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesCouplingNumber->text()));
 	settings_judgeParameter.setValue("chose/YesCouplingLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesCouplingLength->text()));
 	settings_judgeParameter.setValue("chose/YesFaultNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesFaultNumber->text()));
 	settings_judgeParameter.setValue("chose/YesFaultLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesFaultLength->text()));
 	settings_judgeParameter.setValue("chose/NoCouplingNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoCouplingNumber->text()));
 	settings_judgeParameter.setValue("chose/NoCouplingLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoCouplingLength->text()));
 	settings_judgeParameter.setValue("chose/NoFaultNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoFaultNumber->text()));
 	settings_judgeParameter.setValue("chose/NoFaultLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoFaultLength->text()));
 	settings_judgeParameter.setValue("chose/CouplingNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditCouplingNumber->text()));
 	settings_judgeParameter.setValue("chose/CouplingLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditCouplingLength->text()));
 	settings_judgeParameter.setValue("alarm/m_bSoundOpen",QString::number(m_ParameterSetting.m_JudgeParameter.m_bSoundOpen));
 	settings_judgeParameter.setValue("alarm/m_bLightOpen",QString::number(m_ParameterSetting.m_JudgeParameter.m_bLightOpen));

	ThickDrawTypeChanged();
	m_nCutNoise = m_ParameterSetting.m_JudgeParameter.ui.lineEditCutNoise->text().toInt();
	m_nCutNoise2 = m_ParameterSetting.m_JudgeParameter.ui.lineEditCutNoise_2->text().toInt();
}

void GuanTan::JudgeParameterNo()
{
	m_ParameterSetting.m_JudgeParameter.close();
}

void GuanTan::JudgeParameterSaveAs()
{
// 	QFileDialog textsave(this,tr("显示参数保存"));
// 	textsave.setAcceptMode(QFileDialog::AcceptSave);
// 	textsave.setFileMode(QFileDialog::AnyFile);
// 	textsave.setViewMode(QFileDialog::Detail);
// 	QStringList qt;
// 	textsave.exec();
// 	qt = textsave.selectedFiles();
// 	QFile file(qt.at(0));
// 	file.open(QIODevice::WriteOnly);
// 	QSettings settings_judge(qt.at(0), QSettings::IniFormat); // 当前目录的INI文件 
	QString str = QFileDialog::getSaveFileName(this, tr("评判参数文件保存"), tr("D:/管探参数/"), "INI(*.ini)"); //xp系统中文版
	QFile file(str);
	file.open(QIODevice::WriteOnly);
	QSettings settings_judge(str, QSettings::IniFormat);
	settings_judge.beginGroup("mark");
	settings_judge.setValue("YOut",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxYOut->currentIndex()));
	settings_judge.setValue("YIn",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxYIn->currentIndex()));
	settings_judge.setValue("XOut",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxXOut->currentIndex()));
	settings_judge.setValue("XIn",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxXIn->currentIndex()));
	settings_judge.setValue("PlyCut",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxPlyCut->currentIndex()));
	settings_judge.setValue("PlyAdd",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxPlyAdd->currentIndex()));
	settings_judge.setValue("Layering",QString::number(m_ParameterSetting.m_JudgeParameter.ui.comboBoxLayering->currentIndex()));
	settings_judge.endGroup();
	settings_judge.beginGroup("chose");
	settings_judge.setValue("YesCouplingNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesCouplingNumber->text()));
	settings_judge.setValue("YesCouplingLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesCouplingLength->text()));
	settings_judge.setValue("YesFaultNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesFaultNumber->text()));
	settings_judge.setValue("YesFaultLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditYesFaultLength->text()));
	settings_judge.setValue("NoCouplingNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoCouplingNumber->text()));
	settings_judge.setValue("NoCouplingLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoCouplingLength->text()));
	settings_judge.setValue("NoFaultNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoFaultNumber->text()));
	settings_judge.setValue("NoFaultLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditNoFaultLength->text()));
	settings_judge.setValue("CouplingNumber",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditCouplingNumber->text()));
	settings_judge.setValue("CouplingLength",QString(m_ParameterSetting.m_JudgeParameter.ui.lineEditCouplingLength->text()));
	settings_judge.endGroup();
	settings_judge.beginGroup("alarm");
	settings_judge.setValue("m_bSoundOpen",QString::number(m_ParameterSetting.m_JudgeParameter.m_bSoundOpen));
	settings_judge.setValue("m_bLightOpen",QString::number(m_ParameterSetting.m_JudgeParameter.m_bLightOpen));
	settings_judge.endGroup();
}

void GuanTan::LeftPartUpdate()
{
	m_nLeftPart = spinBoxLeftPart->value();
	double a = m_nLeftPart;
	m_dProportionLeft = a/m_fPIPE_LENGTH;
	if (m_nLeftPart > m_nRightPart - PIPE_MIN_SHOW_LENGTH)
	{
		m_nRightPart = m_nLeftPart + PIPE_MIN_SHOW_LENGTH;
		spinBoxRightPart->setValue(m_nRightPart);
	}
	update();
}

void GuanTan::RightPartUpdate()
{
	m_nRightPart = spinBoxRightPart->value();
	double b = m_nRightPart;
	m_dProportionRight = b/m_fPIPE_LENGTH;
	if (m_nLeftPart > m_nRightPart - PIPE_MIN_SHOW_LENGTH)
	{
		m_nLeftPart = m_nRightPart - PIPE_MIN_SHOW_LENGTH;
		spinBoxLeftPart->setValue(m_nLeftPart);
	}
	update();
}
void GuanTan::SliderNoPresse()
{
	if (!(m_bSliderLeftPresse&&m_bSliderLeftPressed)||(m_bSliderPresse&&m_bSliderPressed)||(m_bSliderRightPresse&&m_bSliderRightPressed))
	{
			m_rectWaveSliderUp.setRect(m_rectWaveSliderDown.left()+SLIDER_LENGTH*m_dProportionLeft,widget_9->rect().top()+widget->rect().height()+widget_2->rect().height()+70,SLIDER_LENGTH*(m_dProportionRight-m_dProportionLeft),10);
	}
}
void GuanTan::BurstDelayShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.show();
}
void GuanTan::CGainShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.show();
}
void GuanTan::GainShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.show();
}
void GuanTan::GateSetShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.show();
}
void GuanTan::ImpedanceSetShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.show();
}
void GuanTan::JudgeShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.show();
}
void GuanTan::ProbeSetShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.show();
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageHigh->setText(QString::number(m_nfeatureAverageHighCount));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageLow->setText(QString::number(m_nfeatureAverageLowCount));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh->setText(QString::number(m_fHighCorrect));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow->setText(QString::number(m_fLowCorrect));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh_2->setText(QString::number(m_fHighCorrect2));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow_2->setText(QString::number(m_fLowCorrect2));

	if (m_bMark)
	{
		m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.checkBoxMark->setChecked(true);
	}
	else
	{
		m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.checkBoxMark->setChecked(false);
	}
}
void GuanTan::ReFreqShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.show();
}
void GuanTan::SoundSpeedShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.show();
}
void GuanTan::StaNoiseShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.show();
}
void GuanTan::WidthShow()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Width.show();
}
void GuanTan::BurstDelayYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.close();
	m_bDelay = true;
}
void GuanTan::BurstDelayNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.close();
	m_bDelay = false;
}
void GuanTan::CGainYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.close();
	m_bCGain = true;
}
void GuanTan::CGainNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.close();
	m_bCGain = false;
}
void GuanTan::GainYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.close();
	m_bGain = true;
}
void GuanTan::GainNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.close();
	m_bGain = false;
}
void GuanTan::GateSetYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.close();
	m_bGateSet = true;
}
void GuanTan::GateSetNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.close();
	m_bGateSet = false;
}
void GuanTan::ImpedanceSetYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.close();
	m_bImpedanceSet = true;
}
void GuanTan::ImpedanceSetNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.close();
	m_bImpedanceSet = false;
}
void GuanTan::JudgeYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.close();
	m_bJudge = true;
}
void GuanTan::JudgeNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.close();
	m_bJudge = false;
}
void GuanTan::ProbeSetYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.close();
	m_bProbeSet = true;
}
void GuanTan::ProbeSetNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.close();
	m_bProbeSet = false;
}
void GuanTan::ReFreqYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.close();
	m_bReFreq = true;
}
void GuanTan::ReFreqNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.close();
	m_bReFreq = false;
}
void GuanTan::SoundSpeedYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.close();
	m_bSoundSpeed = true;
}
void GuanTan::SoundSpeedNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.close();
	m_bSoundSpeed = false;
}
void GuanTan::StaNoiseYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.close();
	m_bStaNoise = true;
}
void GuanTan::StaNoiseNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.close();
	m_bStaNoise = false;
}
void GuanTan::WidthYes()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Width.close();
	m_bWidth = true;
}
void GuanTan::WidthNo()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Width.close();
	m_bWidth = false;
}
void GuanTan::StaNoiseCheck1_12()
{
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe1->setText(QString::number(m_Parameter_[0].m_GateInfo[0].m_nStaNoise));//读取I闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe2->setText(QString::number(m_Parameter_[1].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe3->setText(QString::number(m_Parameter_[2].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe4->setText(QString::number(m_Parameter_[3].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe5->setText(QString::number(m_Parameter_[4].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe6->setText(QString::number(m_Parameter_[5].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe7->setText(QString::number(m_Parameter_[6].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe8->setText(QString::number(m_Parameter_[7].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe9->setText(QString::number(m_Parameter_[8].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe0->setText(QString::number(m_Parameter_[9].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe11->setText(QString::number(m_Parameter_[10].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe12->setText(QString::number(m_Parameter_[11].m_GateInfo[0].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe1->setText(QString::number(m_Parameter_[0].m_GateInfo[1].m_nStaNoise));//读取A闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe2->setText(QString::number(m_Parameter_[1].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe3->setText(QString::number(m_Parameter_[2].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe4->setText(QString::number(m_Parameter_[3].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe5->setText(QString::number(m_Parameter_[4].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe6->setText(QString::number(m_Parameter_[5].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe7->setText(QString::number(m_Parameter_[6].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe8->setText(QString::number(m_Parameter_[7].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe9->setText(QString::number(m_Parameter_[8].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe0->setText(QString::number(m_Parameter_[9].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe11->setText(QString::number(m_Parameter_[10].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe12->setText(QString::number(m_Parameter_[11].m_GateInfo[1].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe1->setText(QString::number(m_Parameter_[0].m_GateInfo[2].m_nStaNoise));//读取B闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe2->setText(QString::number(m_Parameter_[1].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe3->setText(QString::number(m_Parameter_[2].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe4->setText(QString::number(m_Parameter_[3].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe5->setText(QString::number(m_Parameter_[4].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe6->setText(QString::number(m_Parameter_[5].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe7->setText(QString::number(m_Parameter_[6].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe8->setText(QString::number(m_Parameter_[7].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe9->setText(QString::number(m_Parameter_[8].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe0->setText(QString::number(m_Parameter_[9].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe11->setText(QString::number(m_Parameter_[10].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe12->setText(QString::number(m_Parameter_[11].m_GateInfo[2].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe1->setText(QString::number(m_Parameter_[0].m_GateInfo[3].m_nStaNoise));//读取I2闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe2->setText(QString::number(m_Parameter_[1].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe3->setText(QString::number(m_Parameter_[2].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe4->setText(QString::number(m_Parameter_[3].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe5->setText(QString::number(m_Parameter_[4].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe6->setText(QString::number(m_Parameter_[5].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe7->setText(QString::number(m_Parameter_[6].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe8->setText(QString::number(m_Parameter_[7].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe9->setText(QString::number(m_Parameter_[8].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe0->setText(QString::number(m_Parameter_[9].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe11->setText(QString::number(m_Parameter_[10].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe12->setText(QString::number(m_Parameter_[11].m_GateInfo[3].m_nStaNoise));
}
void GuanTan::StaNoiseCheck13_24()
{
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe1->setText(QString::number(m_Parameter_[12].m_GateInfo[0].m_nStaNoise));//读取I闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe2->setText(QString::number(m_Parameter_[13].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe3->setText(QString::number(m_Parameter_[14].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe4->setText(QString::number(m_Parameter_[15].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe5->setText(QString::number(m_Parameter_[16].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe6->setText(QString::number(m_Parameter_[17].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe7->setText(QString::number(m_Parameter_[18].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe8->setText(QString::number(m_Parameter_[19].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe9->setText(QString::number(m_Parameter_[20].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe0->setText(QString::number(m_Parameter_[21].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe11->setText(QString::number(m_Parameter_[22].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe12->setText(QString::number(m_Parameter_[23].m_GateInfo[0].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe1->setText(QString::number(m_Parameter_[12].m_GateInfo[1].m_nStaNoise));//读取A闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe2->setText(QString::number(m_Parameter_[13].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe3->setText(QString::number(m_Parameter_[14].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe4->setText(QString::number(m_Parameter_[15].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe5->setText(QString::number(m_Parameter_[16].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe6->setText(QString::number(m_Parameter_[17].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe7->setText(QString::number(m_Parameter_[18].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe8->setText(QString::number(m_Parameter_[19].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe9->setText(QString::number(m_Parameter_[20].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe0->setText(QString::number(m_Parameter_[21].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe11->setText(QString::number(m_Parameter_[22].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe12->setText(QString::number(m_Parameter_[23].m_GateInfo[1].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe1->setText(QString::number(m_Parameter_[12].m_GateInfo[2].m_nStaNoise));//读取B闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe2->setText(QString::number(m_Parameter_[13].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe3->setText(QString::number(m_Parameter_[14].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe4->setText(QString::number(m_Parameter_[15].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe5->setText(QString::number(m_Parameter_[16].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe6->setText(QString::number(m_Parameter_[17].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe7->setText(QString::number(m_Parameter_[18].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe8->setText(QString::number(m_Parameter_[19].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe9->setText(QString::number(m_Parameter_[20].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe0->setText(QString::number(m_Parameter_[21].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe11->setText(QString::number(m_Parameter_[22].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe12->setText(QString::number(m_Parameter_[23].m_GateInfo[2].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe1->setText(QString::number(m_Parameter_[12].m_GateInfo[3].m_nStaNoise));//读取I2闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe2->setText(QString::number(m_Parameter_[13].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe3->setText(QString::number(m_Parameter_[14].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe4->setText(QString::number(m_Parameter_[15].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe5->setText(QString::number(m_Parameter_[16].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe6->setText(QString::number(m_Parameter_[17].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe7->setText(QString::number(m_Parameter_[18].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe8->setText(QString::number(m_Parameter_[19].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe9->setText(QString::number(m_Parameter_[20].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe0->setText(QString::number(m_Parameter_[21].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe11->setText(QString::number(m_Parameter_[22].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe12->setText(QString::number(m_Parameter_[23].m_GateInfo[3].m_nStaNoise));
}
void GuanTan::StaNoiseCheck25_36()
{
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe1->setText(QString::number(m_Parameter_[24].m_GateInfo[0].m_nStaNoise));//读取I闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe2->setText(QString::number(m_Parameter_[25].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe3->setText(QString::number(m_Parameter_[26].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe4->setText(QString::number(m_Parameter_[27].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe5->setText(QString::number(m_Parameter_[28].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe6->setText(QString::number(m_Parameter_[29].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe7->setText(QString::number(m_Parameter_[30].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe8->setText(QString::number(m_Parameter_[31].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe9->setText(QString::number(m_Parameter_[32].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe0->setText(QString::number(m_Parameter_[33].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe11->setText(QString::number(m_Parameter_[34].m_GateInfo[0].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditIProbe12->setText(QString::number(m_Parameter_[35].m_GateInfo[0].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe1->setText(QString::number(m_Parameter_[24].m_GateInfo[1].m_nStaNoise));//读取A闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe2->setText(QString::number(m_Parameter_[25].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe3->setText(QString::number(m_Parameter_[26].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe4->setText(QString::number(m_Parameter_[27].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe5->setText(QString::number(m_Parameter_[28].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe6->setText(QString::number(m_Parameter_[29].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe7->setText(QString::number(m_Parameter_[30].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe8->setText(QString::number(m_Parameter_[31].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe9->setText(QString::number(m_Parameter_[32].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe0->setText(QString::number(m_Parameter_[33].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe11->setText(QString::number(m_Parameter_[34].m_GateInfo[1].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAProbe12->setText(QString::number(m_Parameter_[35].m_GateInfo[1].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe1->setText(QString::number(m_Parameter_[24].m_GateInfo[2].m_nStaNoise));//读取B闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe2->setText(QString::number(m_Parameter_[25].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe3->setText(QString::number(m_Parameter_[26].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe4->setText(QString::number(m_Parameter_[27].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe5->setText(QString::number(m_Parameter_[28].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe6->setText(QString::number(m_Parameter_[29].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe7->setText(QString::number(m_Parameter_[30].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe8->setText(QString::number(m_Parameter_[31].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe9->setText(QString::number(m_Parameter_[32].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe0->setText(QString::number(m_Parameter_[33].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe11->setText(QString::number(m_Parameter_[34].m_GateInfo[2].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditBProbe12->setText(QString::number(m_Parameter_[35].m_GateInfo[2].m_nStaNoise));

	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe1->setText(QString::number(m_Parameter_[24].m_GateInfo[3].m_nStaNoise));//读取I2闸门降噪数
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe2->setText(QString::number(m_Parameter_[25].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe3->setText(QString::number(m_Parameter_[26].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe4->setText(QString::number(m_Parameter_[27].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe5->setText(QString::number(m_Parameter_[28].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe6->setText(QString::number(m_Parameter_[29].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe7->setText(QString::number(m_Parameter_[30].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe8->setText(QString::number(m_Parameter_[31].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe9->setText(QString::number(m_Parameter_[32].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe0->setText(QString::number(m_Parameter_[33].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe11->setText(QString::number(m_Parameter_[34].m_GateInfo[3].m_nStaNoise));
	m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditI2Probe12->setText(QString::number(m_Parameter_[35].m_GateInfo[3].m_nStaNoise));
}
void GuanTan::GateSetCheck1_12()
{
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IB->setText(QString::number(m_Parameter_[0].m_GateInfo[0].m_fFrontGate));//读取I闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IB->setText(QString::number(m_Parameter_[1].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IB->setText(QString::number(m_Parameter_[2].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IB->setText(QString::number(m_Parameter_[3].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IB->setText(QString::number(m_Parameter_[4].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IB->setText(QString::number(m_Parameter_[5].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IB->setText(QString::number(m_Parameter_[6].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IB->setText(QString::number(m_Parameter_[7].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IB->setText(QString::number(m_Parameter_[8].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IB->setText(QString::number(m_Parameter_[9].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IB->setText(QString::number(m_Parameter_[10].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IB->setText(QString::number(m_Parameter_[11].m_GateInfo[0].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AB->setText(QString::number(m_Parameter_[0].m_GateInfo[1].m_fFrontGate));//读取A闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AB->setText(QString::number(m_Parameter_[1].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AB->setText(QString::number(m_Parameter_[2].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AB->setText(QString::number(m_Parameter_[3].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AB->setText(QString::number(m_Parameter_[4].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AB->setText(QString::number(m_Parameter_[5].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AB->setText(QString::number(m_Parameter_[6].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AB->setText(QString::number(m_Parameter_[7].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AB->setText(QString::number(m_Parameter_[8].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AB->setText(QString::number(m_Parameter_[9].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AB->setText(QString::number(m_Parameter_[10].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AB->setText(QString::number(m_Parameter_[11].m_GateInfo[1].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BB->setText(QString::number(m_Parameter_[0].m_GateInfo[2].m_fFrontGate));//读取B闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BB->setText(QString::number(m_Parameter_[1].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BB->setText(QString::number(m_Parameter_[2].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BB->setText(QString::number(m_Parameter_[3].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BB->setText(QString::number(m_Parameter_[4].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BB->setText(QString::number(m_Parameter_[5].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BB->setText(QString::number(m_Parameter_[6].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BB->setText(QString::number(m_Parameter_[7].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BB->setText(QString::number(m_Parameter_[8].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BB->setText(QString::number(m_Parameter_[9].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BB->setText(QString::number(m_Parameter_[10].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BB->setText(QString::number(m_Parameter_[11].m_GateInfo[2].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2B->setText(QString::number(m_Parameter_[0].m_GateInfo[3].m_fFrontGate));//读取I2闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2B->setText(QString::number(m_Parameter_[1].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2B->setText(QString::number(m_Parameter_[2].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2B->setText(QString::number(m_Parameter_[3].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2B->setText(QString::number(m_Parameter_[4].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2B->setText(QString::number(m_Parameter_[5].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2B->setText(QString::number(m_Parameter_[6].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2B->setText(QString::number(m_Parameter_[7].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2B->setText(QString::number(m_Parameter_[8].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2B->setText(QString::number(m_Parameter_[9].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2B->setText(QString::number(m_Parameter_[10].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2B->setText(QString::number(m_Parameter_[11].m_GateInfo[3].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IL->setText(QString::number(m_Parameter_[0].m_GateInfo[0].m_fBackGate));//读取I闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IL->setText(QString::number(m_Parameter_[1].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IL->setText(QString::number(m_Parameter_[2].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IL->setText(QString::number(m_Parameter_[3].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IL->setText(QString::number(m_Parameter_[4].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IL->setText(QString::number(m_Parameter_[5].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IL->setText(QString::number(m_Parameter_[6].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IL->setText(QString::number(m_Parameter_[7].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IL->setText(QString::number(m_Parameter_[8].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IL->setText(QString::number(m_Parameter_[9].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IL->setText(QString::number(m_Parameter_[10].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IL->setText(QString::number(m_Parameter_[11].m_GateInfo[0].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AL->setText(QString::number(m_Parameter_[0].m_GateInfo[1].m_fBackGate));//读取A闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AL->setText(QString::number(m_Parameter_[1].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AL->setText(QString::number(m_Parameter_[2].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AL->setText(QString::number(m_Parameter_[3].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AL->setText(QString::number(m_Parameter_[4].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AL->setText(QString::number(m_Parameter_[5].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AL->setText(QString::number(m_Parameter_[6].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AL->setText(QString::number(m_Parameter_[7].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AL->setText(QString::number(m_Parameter_[8].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AL->setText(QString::number(m_Parameter_[9].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AL->setText(QString::number(m_Parameter_[10].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AL->setText(QString::number(m_Parameter_[11].m_GateInfo[1].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BL->setText(QString::number(m_Parameter_[0].m_GateInfo[2].m_fBackGate));//读取B闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BL->setText(QString::number(m_Parameter_[1].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BL->setText(QString::number(m_Parameter_[2].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BL->setText(QString::number(m_Parameter_[3].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BL->setText(QString::number(m_Parameter_[4].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BL->setText(QString::number(m_Parameter_[5].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BL->setText(QString::number(m_Parameter_[6].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BL->setText(QString::number(m_Parameter_[7].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BL->setText(QString::number(m_Parameter_[8].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BL->setText(QString::number(m_Parameter_[9].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BL->setText(QString::number(m_Parameter_[10].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BL->setText(QString::number(m_Parameter_[11].m_GateInfo[2].m_fBackGate));


	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2L->setText(QString::number(m_Parameter_[0].m_GateInfo[3].m_fBackGate));//读取I2闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2L->setText(QString::number(m_Parameter_[1].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2L->setText(QString::number(m_Parameter_[2].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2L->setText(QString::number(m_Parameter_[3].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2L->setText(QString::number(m_Parameter_[4].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2L->setText(QString::number(m_Parameter_[5].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2L->setText(QString::number(m_Parameter_[6].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2L->setText(QString::number(m_Parameter_[7].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2L->setText(QString::number(m_Parameter_[8].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2L->setText(QString::number(m_Parameter_[9].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2L->setText(QString::number(m_Parameter_[10].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2L->setText(QString::number(m_Parameter_[11].m_GateInfo[3].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IT->setText(QString::number(m_Parameter_[0].m_GateInfo[0].m_fPeakGate));//读取I闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IT->setText(QString::number(m_Parameter_[1].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IT->setText(QString::number(m_Parameter_[2].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IT->setText(QString::number(m_Parameter_[3].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IT->setText(QString::number(m_Parameter_[4].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IT->setText(QString::number(m_Parameter_[5].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IT->setText(QString::number(m_Parameter_[6].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IT->setText(QString::number(m_Parameter_[7].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IT->setText(QString::number(m_Parameter_[8].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IT->setText(QString::number(m_Parameter_[9].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IT->setText(QString::number(m_Parameter_[10].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IT->setText(QString::number(m_Parameter_[11].m_GateInfo[0].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AT->setText(QString::number(m_Parameter_[0].m_GateInfo[1].m_fPeakGate));//读取A闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AT->setText(QString::number(m_Parameter_[1].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AT->setText(QString::number(m_Parameter_[2].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AT->setText(QString::number(m_Parameter_[3].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AT->setText(QString::number(m_Parameter_[4].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AT->setText(QString::number(m_Parameter_[5].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AT->setText(QString::number(m_Parameter_[6].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AT->setText(QString::number(m_Parameter_[7].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AT->setText(QString::number(m_Parameter_[8].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AT->setText(QString::number(m_Parameter_[9].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AT->setText(QString::number(m_Parameter_[10].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AT->setText(QString::number(m_Parameter_[11].m_GateInfo[1].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BT->setText(QString::number(m_Parameter_[0].m_GateInfo[2].m_fPeakGate));//读取B闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BT->setText(QString::number(m_Parameter_[1].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BT->setText(QString::number(m_Parameter_[2].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BT->setText(QString::number(m_Parameter_[3].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BT->setText(QString::number(m_Parameter_[4].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BT->setText(QString::number(m_Parameter_[5].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BT->setText(QString::number(m_Parameter_[6].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BT->setText(QString::number(m_Parameter_[7].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BT->setText(QString::number(m_Parameter_[8].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BT->setText(QString::number(m_Parameter_[9].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BT->setText(QString::number(m_Parameter_[10].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BT->setText(QString::number(m_Parameter_[11].m_GateInfo[2].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2T->setText(QString::number(m_Parameter_[0].m_GateInfo[3].m_fPeakGate));//读取I2闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2T->setText(QString::number(m_Parameter_[1].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2T->setText(QString::number(m_Parameter_[2].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2T->setText(QString::number(m_Parameter_[3].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2T->setText(QString::number(m_Parameter_[4].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2T->setText(QString::number(m_Parameter_[5].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2T->setText(QString::number(m_Parameter_[6].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2T->setText(QString::number(m_Parameter_[7].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2T->setText(QString::number(m_Parameter_[8].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2T->setText(QString::number(m_Parameter_[9].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2T->setText(QString::number(m_Parameter_[10].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2T->setText(QString::number(m_Parameter_[11].m_GateInfo[3].m_fPeakGate));
}
void GuanTan::GateSetCheck13_24()
{
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IB->setText(QString::number(m_Parameter_[12].m_GateInfo[0].m_fFrontGate));//读取I闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IB->setText(QString::number(m_Parameter_[13].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IB->setText(QString::number(m_Parameter_[14].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IB->setText(QString::number(m_Parameter_[15].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IB->setText(QString::number(m_Parameter_[16].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IB->setText(QString::number(m_Parameter_[17].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IB->setText(QString::number(m_Parameter_[18].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IB->setText(QString::number(m_Parameter_[19].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IB->setText(QString::number(m_Parameter_[20].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IB->setText(QString::number(m_Parameter_[21].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IB->setText(QString::number(m_Parameter_[22].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IB->setText(QString::number(m_Parameter_[23].m_GateInfo[0].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AB->setText(QString::number(m_Parameter_[12].m_GateInfo[1].m_fFrontGate));//读取A闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AB->setText(QString::number(m_Parameter_[13].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AB->setText(QString::number(m_Parameter_[14].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AB->setText(QString::number(m_Parameter_[15].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AB->setText(QString::number(m_Parameter_[16].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AB->setText(QString::number(m_Parameter_[17].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AB->setText(QString::number(m_Parameter_[18].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AB->setText(QString::number(m_Parameter_[19].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AB->setText(QString::number(m_Parameter_[20].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AB->setText(QString::number(m_Parameter_[21].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AB->setText(QString::number(m_Parameter_[22].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AB->setText(QString::number(m_Parameter_[23].m_GateInfo[1].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BB->setText(QString::number(m_Parameter_[12].m_GateInfo[2].m_fFrontGate));//读取B闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BB->setText(QString::number(m_Parameter_[13].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BB->setText(QString::number(m_Parameter_[14].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BB->setText(QString::number(m_Parameter_[15].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BB->setText(QString::number(m_Parameter_[16].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BB->setText(QString::number(m_Parameter_[17].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BB->setText(QString::number(m_Parameter_[18].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BB->setText(QString::number(m_Parameter_[19].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BB->setText(QString::number(m_Parameter_[20].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BB->setText(QString::number(m_Parameter_[21].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BB->setText(QString::number(m_Parameter_[22].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BB->setText(QString::number(m_Parameter_[23].m_GateInfo[2].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2B->setText(QString::number(m_Parameter_[12].m_GateInfo[3].m_fFrontGate));//读取I2闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2B->setText(QString::number(m_Parameter_[13].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2B->setText(QString::number(m_Parameter_[14].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2B->setText(QString::number(m_Parameter_[15].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2B->setText(QString::number(m_Parameter_[16].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2B->setText(QString::number(m_Parameter_[17].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2B->setText(QString::number(m_Parameter_[18].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2B->setText(QString::number(m_Parameter_[19].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2B->setText(QString::number(m_Parameter_[20].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2B->setText(QString::number(m_Parameter_[21].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2B->setText(QString::number(m_Parameter_[22].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2B->setText(QString::number(m_Parameter_[23].m_GateInfo[3].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IL->setText(QString::number(m_Parameter_[12].m_GateInfo[0].m_fBackGate));//读取I闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IL->setText(QString::number(m_Parameter_[13].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IL->setText(QString::number(m_Parameter_[14].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IL->setText(QString::number(m_Parameter_[15].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IL->setText(QString::number(m_Parameter_[16].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IL->setText(QString::number(m_Parameter_[17].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IL->setText(QString::number(m_Parameter_[18].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IL->setText(QString::number(m_Parameter_[19].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IL->setText(QString::number(m_Parameter_[20].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IL->setText(QString::number(m_Parameter_[21].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IL->setText(QString::number(m_Parameter_[22].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IL->setText(QString::number(m_Parameter_[23].m_GateInfo[0].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AL->setText(QString::number(m_Parameter_[12].m_GateInfo[1].m_fBackGate));//读取A闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AL->setText(QString::number(m_Parameter_[13].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AL->setText(QString::number(m_Parameter_[14].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AL->setText(QString::number(m_Parameter_[15].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AL->setText(QString::number(m_Parameter_[16].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AL->setText(QString::number(m_Parameter_[17].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AL->setText(QString::number(m_Parameter_[18].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AL->setText(QString::number(m_Parameter_[19].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AL->setText(QString::number(m_Parameter_[20].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AL->setText(QString::number(m_Parameter_[21].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AL->setText(QString::number(m_Parameter_[22].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AL->setText(QString::number(m_Parameter_[23].m_GateInfo[1].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BL->setText(QString::number(m_Parameter_[12].m_GateInfo[2].m_fBackGate));//读取B闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BL->setText(QString::number(m_Parameter_[13].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BL->setText(QString::number(m_Parameter_[14].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BL->setText(QString::number(m_Parameter_[15].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BL->setText(QString::number(m_Parameter_[16].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BL->setText(QString::number(m_Parameter_[17].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BL->setText(QString::number(m_Parameter_[18].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BL->setText(QString::number(m_Parameter_[19].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BL->setText(QString::number(m_Parameter_[20].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BL->setText(QString::number(m_Parameter_[21].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BL->setText(QString::number(m_Parameter_[22].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BL->setText(QString::number(m_Parameter_[23].m_GateInfo[2].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2L->setText(QString::number(m_Parameter_[12].m_GateInfo[3].m_fBackGate));//读取I2闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2L->setText(QString::number(m_Parameter_[13].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2L->setText(QString::number(m_Parameter_[14].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2L->setText(QString::number(m_Parameter_[15].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2L->setText(QString::number(m_Parameter_[16].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2L->setText(QString::number(m_Parameter_[17].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2L->setText(QString::number(m_Parameter_[18].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2L->setText(QString::number(m_Parameter_[19].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2L->setText(QString::number(m_Parameter_[20].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2L->setText(QString::number(m_Parameter_[21].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2L->setText(QString::number(m_Parameter_[22].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2L->setText(QString::number(m_Parameter_[23].m_GateInfo[3].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IT->setText(QString::number(m_Parameter_[12].m_GateInfo[0].m_fPeakGate));//读取I闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IT->setText(QString::number(m_Parameter_[13].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IT->setText(QString::number(m_Parameter_[14].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IT->setText(QString::number(m_Parameter_[15].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IT->setText(QString::number(m_Parameter_[16].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IT->setText(QString::number(m_Parameter_[17].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IT->setText(QString::number(m_Parameter_[18].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IT->setText(QString::number(m_Parameter_[19].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IT->setText(QString::number(m_Parameter_[20].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IT->setText(QString::number(m_Parameter_[21].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IT->setText(QString::number(m_Parameter_[22].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IT->setText(QString::number(m_Parameter_[23].m_GateInfo[0].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AT->setText(QString::number(m_Parameter_[12].m_GateInfo[1].m_fPeakGate));//读取A闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AT->setText(QString::number(m_Parameter_[13].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AT->setText(QString::number(m_Parameter_[14].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AT->setText(QString::number(m_Parameter_[15].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AT->setText(QString::number(m_Parameter_[16].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AT->setText(QString::number(m_Parameter_[17].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AT->setText(QString::number(m_Parameter_[18].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AT->setText(QString::number(m_Parameter_[19].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AT->setText(QString::number(m_Parameter_[20].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AT->setText(QString::number(m_Parameter_[21].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AT->setText(QString::number(m_Parameter_[22].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AT->setText(QString::number(m_Parameter_[23].m_GateInfo[1].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BT->setText(QString::number(m_Parameter_[12].m_GateInfo[2].m_fPeakGate));//读取B闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BT->setText(QString::number(m_Parameter_[13].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BT->setText(QString::number(m_Parameter_[14].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BT->setText(QString::number(m_Parameter_[15].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BT->setText(QString::number(m_Parameter_[16].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BT->setText(QString::number(m_Parameter_[17].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BT->setText(QString::number(m_Parameter_[18].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BT->setText(QString::number(m_Parameter_[19].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BT->setText(QString::number(m_Parameter_[20].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BT->setText(QString::number(m_Parameter_[21].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BT->setText(QString::number(m_Parameter_[22].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BT->setText(QString::number(m_Parameter_[23].m_GateInfo[2].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2T->setText(QString::number(m_Parameter_[12].m_GateInfo[3].m_fPeakGate));//读取I2闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2T->setText(QString::number(m_Parameter_[13].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2T->setText(QString::number(m_Parameter_[14].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2T->setText(QString::number(m_Parameter_[15].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2T->setText(QString::number(m_Parameter_[16].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2T->setText(QString::number(m_Parameter_[17].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2T->setText(QString::number(m_Parameter_[18].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2T->setText(QString::number(m_Parameter_[19].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2T->setText(QString::number(m_Parameter_[20].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2T->setText(QString::number(m_Parameter_[21].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2T->setText(QString::number(m_Parameter_[22].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2T->setText(QString::number(m_Parameter_[23].m_GateInfo[3].m_fPeakGate));
}
void GuanTan::GateSetCheck25_36()
{
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IB->setText(QString::number(m_Parameter_[24].m_GateInfo[0].m_fFrontGate));//读取I闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IB->setText(QString::number(m_Parameter_[25].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IB->setText(QString::number(m_Parameter_[26].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IB->setText(QString::number(m_Parameter_[27].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IB->setText(QString::number(m_Parameter_[28].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IB->setText(QString::number(m_Parameter_[29].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IB->setText(QString::number(m_Parameter_[30].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IB->setText(QString::number(m_Parameter_[31].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IB->setText(QString::number(m_Parameter_[32].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IB->setText(QString::number(m_Parameter_[33].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IB->setText(QString::number(m_Parameter_[34].m_GateInfo[0].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IB->setText(QString::number(m_Parameter_[35].m_GateInfo[0].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AB->setText(QString::number(m_Parameter_[24].m_GateInfo[1].m_fFrontGate));//读取A闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AB->setText(QString::number(m_Parameter_[25].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AB->setText(QString::number(m_Parameter_[26].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AB->setText(QString::number(m_Parameter_[27].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AB->setText(QString::number(m_Parameter_[28].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AB->setText(QString::number(m_Parameter_[29].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AB->setText(QString::number(m_Parameter_[30].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AB->setText(QString::number(m_Parameter_[31].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AB->setText(QString::number(m_Parameter_[32].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AB->setText(QString::number(m_Parameter_[33].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AB->setText(QString::number(m_Parameter_[34].m_GateInfo[1].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AB->setText(QString::number(m_Parameter_[35].m_GateInfo[1].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BB->setText(QString::number(m_Parameter_[24].m_GateInfo[2].m_fFrontGate));//读取B闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BB->setText(QString::number(m_Parameter_[25].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BB->setText(QString::number(m_Parameter_[26].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BB->setText(QString::number(m_Parameter_[27].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BB->setText(QString::number(m_Parameter_[28].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BB->setText(QString::number(m_Parameter_[29].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BB->setText(QString::number(m_Parameter_[30].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BB->setText(QString::number(m_Parameter_[31].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BB->setText(QString::number(m_Parameter_[32].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BB->setText(QString::number(m_Parameter_[33].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BB->setText(QString::number(m_Parameter_[34].m_GateInfo[2].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BB->setText(QString::number(m_Parameter_[35].m_GateInfo[2].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2B->setText(QString::number(m_Parameter_[24].m_GateInfo[3].m_fFrontGate));//读取I2闸门起点设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2B->setText(QString::number(m_Parameter_[25].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2B->setText(QString::number(m_Parameter_[26].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2B->setText(QString::number(m_Parameter_[27].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2B->setText(QString::number(m_Parameter_[28].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2B->setText(QString::number(m_Parameter_[29].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2B->setText(QString::number(m_Parameter_[30].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2B->setText(QString::number(m_Parameter_[31].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2B->setText(QString::number(m_Parameter_[32].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2B->setText(QString::number(m_Parameter_[33].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2B->setText(QString::number(m_Parameter_[34].m_GateInfo[3].m_fFrontGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2B->setText(QString::number(m_Parameter_[35].m_GateInfo[3].m_fFrontGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IL->setText(QString::number(m_Parameter_[24].m_GateInfo[0].m_fBackGate));//读取I闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IL->setText(QString::number(m_Parameter_[25].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IL->setText(QString::number(m_Parameter_[26].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IL->setText(QString::number(m_Parameter_[27].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IL->setText(QString::number(m_Parameter_[28].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IL->setText(QString::number(m_Parameter_[29].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IL->setText(QString::number(m_Parameter_[30].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IL->setText(QString::number(m_Parameter_[31].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IL->setText(QString::number(m_Parameter_[32].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IL->setText(QString::number(m_Parameter_[33].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IL->setText(QString::number(m_Parameter_[34].m_GateInfo[0].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IL->setText(QString::number(m_Parameter_[35].m_GateInfo[0].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AL->setText(QString::number(m_Parameter_[24].m_GateInfo[1].m_fBackGate));//读取A闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AL->setText(QString::number(m_Parameter_[25].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AL->setText(QString::number(m_Parameter_[26].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AL->setText(QString::number(m_Parameter_[27].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AL->setText(QString::number(m_Parameter_[28].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AL->setText(QString::number(m_Parameter_[29].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AL->setText(QString::number(m_Parameter_[30].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AL->setText(QString::number(m_Parameter_[31].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AL->setText(QString::number(m_Parameter_[32].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AL->setText(QString::number(m_Parameter_[33].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AL->setText(QString::number(m_Parameter_[34].m_GateInfo[1].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AL->setText(QString::number(m_Parameter_[35].m_GateInfo[1].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BL->setText(QString::number(m_Parameter_[24].m_GateInfo[2].m_fBackGate));//读取B闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BL->setText(QString::number(m_Parameter_[25].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BL->setText(QString::number(m_Parameter_[26].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BL->setText(QString::number(m_Parameter_[27].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BL->setText(QString::number(m_Parameter_[28].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BL->setText(QString::number(m_Parameter_[29].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BL->setText(QString::number(m_Parameter_[30].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BL->setText(QString::number(m_Parameter_[31].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BL->setText(QString::number(m_Parameter_[32].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BL->setText(QString::number(m_Parameter_[33].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BL->setText(QString::number(m_Parameter_[34].m_GateInfo[2].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BL->setText(QString::number(m_Parameter_[35].m_GateInfo[2].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2L->setText(QString::number(m_Parameter_[24].m_GateInfo[3].m_fBackGate));//读取I2闸门长度设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2L->setText(QString::number(m_Parameter_[25].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2L->setText(QString::number(m_Parameter_[26].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2L->setText(QString::number(m_Parameter_[27].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2L->setText(QString::number(m_Parameter_[28].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2L->setText(QString::number(m_Parameter_[29].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2L->setText(QString::number(m_Parameter_[30].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2L->setText(QString::number(m_Parameter_[31].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2L->setText(QString::number(m_Parameter_[32].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2L->setText(QString::number(m_Parameter_[33].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2L->setText(QString::number(m_Parameter_[34].m_GateInfo[3].m_fBackGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2L->setText(QString::number(m_Parameter_[35].m_GateInfo[3].m_fBackGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1IT->setText(QString::number(m_Parameter_[24].m_GateInfo[0].m_fPeakGate));//读取I闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2IT->setText(QString::number(m_Parameter_[25].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3IT->setText(QString::number(m_Parameter_[26].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4IT->setText(QString::number(m_Parameter_[27].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5IT->setText(QString::number(m_Parameter_[28].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6IT->setText(QString::number(m_Parameter_[29].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7IT->setText(QString::number(m_Parameter_[30].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8IT->setText(QString::number(m_Parameter_[31].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9IT->setText(QString::number(m_Parameter_[32].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10IT->setText(QString::number(m_Parameter_[33].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11IT->setText(QString::number(m_Parameter_[34].m_GateInfo[0].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12IT->setText(QString::number(m_Parameter_[35].m_GateInfo[0].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1AT->setText(QString::number(m_Parameter_[24].m_GateInfo[1].m_fPeakGate));//读取A闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2AT->setText(QString::number(m_Parameter_[25].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3AT->setText(QString::number(m_Parameter_[26].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4AT->setText(QString::number(m_Parameter_[27].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5AT->setText(QString::number(m_Parameter_[28].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6AT->setText(QString::number(m_Parameter_[29].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7AT->setText(QString::number(m_Parameter_[30].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8AT->setText(QString::number(m_Parameter_[31].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9AT->setText(QString::number(m_Parameter_[32].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10AT->setText(QString::number(m_Parameter_[33].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11AT->setText(QString::number(m_Parameter_[34].m_GateInfo[1].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12AT->setText(QString::number(m_Parameter_[35].m_GateInfo[1].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1BT->setText(QString::number(m_Parameter_[24].m_GateInfo[2].m_fPeakGate));//读取B闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2BT->setText(QString::number(m_Parameter_[25].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3BT->setText(QString::number(m_Parameter_[26].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4BT->setText(QString::number(m_Parameter_[27].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5BT->setText(QString::number(m_Parameter_[28].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6BT->setText(QString::number(m_Parameter_[29].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7BT->setText(QString::number(m_Parameter_[30].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8BT->setText(QString::number(m_Parameter_[31].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9BT->setText(QString::number(m_Parameter_[32].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10BT->setText(QString::number(m_Parameter_[33].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11BT->setText(QString::number(m_Parameter_[34].m_GateInfo[2].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12BT->setText(QString::number(m_Parameter_[35].m_GateInfo[2].m_fPeakGate));

	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe1I2T->setText(QString::number(m_Parameter_[24].m_GateInfo[3].m_fPeakGate));//读取I2闸门阈值设置
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe2I2T->setText(QString::number(m_Parameter_[25].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe3I2T->setText(QString::number(m_Parameter_[26].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe4I2T->setText(QString::number(m_Parameter_[27].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe5I2T->setText(QString::number(m_Parameter_[28].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe6I2T->setText(QString::number(m_Parameter_[29].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe7I2T->setText(QString::number(m_Parameter_[30].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe8I2T->setText(QString::number(m_Parameter_[31].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe9I2T->setText(QString::number(m_Parameter_[32].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe10I2T->setText(QString::number(m_Parameter_[33].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe11I2T->setText(QString::number(m_Parameter_[34].m_GateInfo[3].m_fPeakGate));
	m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditProbe12I2T->setText(QString::number(m_Parameter_[35].m_GateInfo[3].m_fPeakGate));
}
void GuanTan::JudgeCheck1_12()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe1->setCurrentIndex(m_Parameter_[0].m_GateInfo[0].m_bOpen);//读取I闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe2->setCurrentIndex(m_Parameter_[1].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe3->setCurrentIndex(m_Parameter_[2].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe4->setCurrentIndex(m_Parameter_[3].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe5->setCurrentIndex(m_Parameter_[4].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe6->setCurrentIndex(m_Parameter_[5].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe7->setCurrentIndex(m_Parameter_[6].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe8->setCurrentIndex(m_Parameter_[7].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe9->setCurrentIndex(m_Parameter_[8].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe0->setCurrentIndex(m_Parameter_[9].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe11->setCurrentIndex(m_Parameter_[10].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe12->setCurrentIndex(m_Parameter_[11].m_GateInfo[0].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe1->setCurrentIndex(m_Parameter_[0].m_GateInfo[1].m_bOpen);//读取A闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe2->setCurrentIndex(m_Parameter_[1].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe3->setCurrentIndex(m_Parameter_[2].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe4->setCurrentIndex(m_Parameter_[3].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe5->setCurrentIndex(m_Parameter_[4].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe6->setCurrentIndex(m_Parameter_[5].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe7->setCurrentIndex(m_Parameter_[6].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe8->setCurrentIndex(m_Parameter_[7].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe9->setCurrentIndex(m_Parameter_[8].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe0->setCurrentIndex(m_Parameter_[9].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe11->setCurrentIndex(m_Parameter_[10].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe12->setCurrentIndex(m_Parameter_[11].m_GateInfo[1].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe1->setCurrentIndex(m_Parameter_[0].m_GateInfo[2].m_bOpen);//读取B闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe2->setCurrentIndex(m_Parameter_[1].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe3->setCurrentIndex(m_Parameter_[2].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe4->setCurrentIndex(m_Parameter_[3].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe5->setCurrentIndex(m_Parameter_[4].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe6->setCurrentIndex(m_Parameter_[5].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe7->setCurrentIndex(m_Parameter_[6].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe8->setCurrentIndex(m_Parameter_[7].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe9->setCurrentIndex(m_Parameter_[8].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe0->setCurrentIndex(m_Parameter_[9].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe11->setCurrentIndex(m_Parameter_[10].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe12->setCurrentIndex(m_Parameter_[11].m_GateInfo[2].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe1->setCurrentIndex(m_Parameter_[0].m_GateInfo[3].m_bOpen);//读取I2闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe2->setCurrentIndex(m_Parameter_[1].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe3->setCurrentIndex(m_Parameter_[2].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe4->setCurrentIndex(m_Parameter_[3].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe5->setCurrentIndex(m_Parameter_[4].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe6->setCurrentIndex(m_Parameter_[5].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe7->setCurrentIndex(m_Parameter_[6].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe8->setCurrentIndex(m_Parameter_[7].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe9->setCurrentIndex(m_Parameter_[8].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe0->setCurrentIndex(m_Parameter_[9].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe11->setCurrentIndex(m_Parameter_[10].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe12->setCurrentIndex(m_Parameter_[11].m_GateInfo[3].m_bOpen);
}
void GuanTan::JudgeCheck13_24()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe1->setCurrentIndex(m_Parameter_[12].m_GateInfo[0].m_bOpen);//读取I闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe2->setCurrentIndex(m_Parameter_[13].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe3->setCurrentIndex(m_Parameter_[14].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe4->setCurrentIndex(m_Parameter_[15].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe5->setCurrentIndex(m_Parameter_[16].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe6->setCurrentIndex(m_Parameter_[17].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe7->setCurrentIndex(m_Parameter_[18].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe8->setCurrentIndex(m_Parameter_[19].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe9->setCurrentIndex(m_Parameter_[20].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe0->setCurrentIndex(m_Parameter_[21].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe11->setCurrentIndex(m_Parameter_[22].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe12->setCurrentIndex(m_Parameter_[23].m_GateInfo[0].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe1->setCurrentIndex(m_Parameter_[12].m_GateInfo[1].m_bOpen);//读取A闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe2->setCurrentIndex(m_Parameter_[13].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe3->setCurrentIndex(m_Parameter_[14].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe4->setCurrentIndex(m_Parameter_[15].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe5->setCurrentIndex(m_Parameter_[16].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe6->setCurrentIndex(m_Parameter_[17].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe7->setCurrentIndex(m_Parameter_[18].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe8->setCurrentIndex(m_Parameter_[19].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe9->setCurrentIndex(m_Parameter_[20].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe0->setCurrentIndex(m_Parameter_[21].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe11->setCurrentIndex(m_Parameter_[22].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe12->setCurrentIndex(m_Parameter_[23].m_GateInfo[1].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe1->setCurrentIndex(m_Parameter_[12].m_GateInfo[2].m_bOpen);//读取B闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe2->setCurrentIndex(m_Parameter_[13].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe3->setCurrentIndex(m_Parameter_[14].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe4->setCurrentIndex(m_Parameter_[15].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe5->setCurrentIndex(m_Parameter_[16].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe6->setCurrentIndex(m_Parameter_[17].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe7->setCurrentIndex(m_Parameter_[18].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe8->setCurrentIndex(m_Parameter_[19].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe9->setCurrentIndex(m_Parameter_[20].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe0->setCurrentIndex(m_Parameter_[21].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe11->setCurrentIndex(m_Parameter_[22].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe12->setCurrentIndex(m_Parameter_[23].m_GateInfo[2].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe1->setCurrentIndex(m_Parameter_[12].m_GateInfo[3].m_bOpen);//读取I2闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe2->setCurrentIndex(m_Parameter_[13].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe3->setCurrentIndex(m_Parameter_[14].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe4->setCurrentIndex(m_Parameter_[15].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe5->setCurrentIndex(m_Parameter_[16].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe6->setCurrentIndex(m_Parameter_[17].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe7->setCurrentIndex(m_Parameter_[18].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe8->setCurrentIndex(m_Parameter_[19].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe9->setCurrentIndex(m_Parameter_[20].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe0->setCurrentIndex(m_Parameter_[21].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe11->setCurrentIndex(m_Parameter_[22].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe12->setCurrentIndex(m_Parameter_[23].m_GateInfo[3].m_bOpen);
}
void GuanTan::JudgeCheck25_36()
{
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe1->setCurrentIndex(m_Parameter_[24].m_GateInfo[0].m_bOpen);//读取I闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe2->setCurrentIndex(m_Parameter_[25].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe3->setCurrentIndex(m_Parameter_[26].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe4->setCurrentIndex(m_Parameter_[27].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe5->setCurrentIndex(m_Parameter_[28].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe6->setCurrentIndex(m_Parameter_[29].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe7->setCurrentIndex(m_Parameter_[30].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe8->setCurrentIndex(m_Parameter_[31].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxIProbe9->setCurrentIndex(m_Parameter_[32].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe0->setCurrentIndex(m_Parameter_[33].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe11->setCurrentIndex(m_Parameter_[34].m_GateInfo[0].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe12->setCurrentIndex(m_Parameter_[35].m_GateInfo[0].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe1->setCurrentIndex(m_Parameter_[24].m_GateInfo[1].m_bOpen);//读取A闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe2->setCurrentIndex(m_Parameter_[25].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe3->setCurrentIndex(m_Parameter_[26].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe4->setCurrentIndex(m_Parameter_[27].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe5->setCurrentIndex(m_Parameter_[28].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe6->setCurrentIndex(m_Parameter_[29].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe7->setCurrentIndex(m_Parameter_[30].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe8->setCurrentIndex(m_Parameter_[31].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe9->setCurrentIndex(m_Parameter_[32].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe0->setCurrentIndex(m_Parameter_[33].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe11->setCurrentIndex(m_Parameter_[34].m_GateInfo[1].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAProbe12->setCurrentIndex(m_Parameter_[35].m_GateInfo[1].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe1->setCurrentIndex(m_Parameter_[24].m_GateInfo[2].m_bOpen);//读取B闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe2->setCurrentIndex(m_Parameter_[25].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe3->setCurrentIndex(m_Parameter_[26].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe4->setCurrentIndex(m_Parameter_[27].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe5->setCurrentIndex(m_Parameter_[28].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe6->setCurrentIndex(m_Parameter_[29].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe7->setCurrentIndex(m_Parameter_[30].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe8->setCurrentIndex(m_Parameter_[31].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe9->setCurrentIndex(m_Parameter_[32].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe0->setCurrentIndex(m_Parameter_[33].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe11->setCurrentIndex(m_Parameter_[34].m_GateInfo[2].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxBProbe12->setCurrentIndex(m_Parameter_[35].m_GateInfo[2].m_bOpen);

	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe1->setCurrentIndex(m_Parameter_[24].m_GateInfo[3].m_bOpen);//读取I2闸门评判模式
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe2->setCurrentIndex(m_Parameter_[25].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe3->setCurrentIndex(m_Parameter_[26].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe4->setCurrentIndex(m_Parameter_[27].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe5->setCurrentIndex(m_Parameter_[28].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe6->setCurrentIndex(m_Parameter_[29].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe7->setCurrentIndex(m_Parameter_[30].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe8->setCurrentIndex(m_Parameter_[31].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe9->setCurrentIndex(m_Parameter_[32].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe0->setCurrentIndex(m_Parameter_[33].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe11->setCurrentIndex(m_Parameter_[34].m_GateInfo[3].m_bOpen);
	m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxI2Probe12->setCurrentIndex(m_Parameter_[35].m_GateInfo[3].m_bOpen);
}
void GuanTan::GateSetAllI()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		m_Parameter_[0].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();//前沿
		m_Parameter_[1].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[2].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[3].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[4].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[5].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[6].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[7].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[8].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[9].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[10].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[11].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();

		m_Parameter_[0].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();//宽度
		m_Parameter_[1].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[2].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[3].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[4].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[5].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[6].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[7].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[8].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[9].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[10].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[11].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();

		m_Parameter_[0].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();//阈值
		m_Parameter_[1].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[2].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[3].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[4].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[5].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[6].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[7].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[8].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[9].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[10].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[11].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		m_Parameter_[12].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();//前沿
		m_Parameter_[13].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[14].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[15].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[16].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[17].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[18].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[19].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[20].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[21].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[22].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[23].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();

		m_Parameter_[12].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();//宽度
		m_Parameter_[13].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[14].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[15].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[16].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[17].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[18].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[19].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[20].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[21].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[22].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[23].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();

		m_Parameter_[12].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();//阈值
		m_Parameter_[13].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[14].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[15].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[16].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[17].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[18].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[19].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[20].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[21].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[22].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[23].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		m_Parameter_[24].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();//前沿
		m_Parameter_[25].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[26].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[27].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[28].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[29].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[30].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[31].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[32].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[33].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[34].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();
		m_Parameter_[35].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIB->text().toFloat();

		m_Parameter_[24].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();//宽度
		m_Parameter_[25].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[26].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[27].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[28].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[29].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[30].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[31].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[32].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[33].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[34].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();
		m_Parameter_[35].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIL->text().toFloat();

		m_Parameter_[24].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();//阈值
		m_Parameter_[25].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[26].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[27].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[28].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[29].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[30].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[31].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[32].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[33].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[34].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
		m_Parameter_[35].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllIT->text().toFloat();
	}
}
void GuanTan::GateSetAllA()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAB->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAL->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAT->text().toFloat();//阈值
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAB->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAL->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAT->text().toFloat();//阈值
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAB->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAL->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllAT->text().toFloat();//阈值
		}
	}
}
void GuanTan::GateSetAllB()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBB->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBL->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBT->text().toFloat();//阈值
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBB->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBL->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBT->text().toFloat();//阈值
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBB->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBL->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllBT->text().toFloat();//阈值
		}
	}
}
void GuanTan::GateSetAllI2()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2B->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2L->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2T->text().toFloat();//阈值
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2B->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2L->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2T->text().toFloat();//阈值
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2B->text().toFloat();//前沿
			m_Parameter_[i].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2L->text().toFloat();//宽度
			m_Parameter_[i].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAllI2T->text().toFloat();//阈值
		}
	}
}
void GuanTan::GateSetAnyI()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1->isChecked())
		{
			m_Parameter_[0].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[0].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[0].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe2->isChecked())
		{
			m_Parameter_[1].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[1].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[1].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe3->isChecked())
		{
			m_Parameter_[2].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[2].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[2].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe4->isChecked())
		{
			m_Parameter_[3].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[3].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[3].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe5->isChecked())
		{
			m_Parameter_[4].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[4].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[4].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe6->isChecked())
		{
			m_Parameter_[5].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[5].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[5].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe7->isChecked())
		{
			m_Parameter_[6].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[6].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[6].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe8->isChecked())
		{
			m_Parameter_[7].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[7].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[7].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe9->isChecked())
		{
			m_Parameter_[8].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[8].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[8].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe10->isChecked())
		{
			m_Parameter_[9].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[9].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[9].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe11->isChecked())
		{
			m_Parameter_[10].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[10].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[10].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe12->isChecked())
		{
			m_Parameter_[11].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[11].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[11].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13->isChecked())
		{
			m_Parameter_[12].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[12].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[12].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe14->isChecked())
		{
			m_Parameter_[13].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[13].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[13].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe15->isChecked())
		{
			m_Parameter_[14].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[14].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[14].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe16->isChecked())
		{
			m_Parameter_[15].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[15].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[15].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe17->isChecked())
		{
			m_Parameter_[16].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[16].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[16].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe18->isChecked())
		{
			m_Parameter_[17].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[17].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[17].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe19->isChecked())
		{
			m_Parameter_[18].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[18].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[18].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe20->isChecked())
		{
			m_Parameter_[19].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[19].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[19].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe21->isChecked())
		{
			m_Parameter_[20].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[20].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[20].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe22->isChecked())
		{
			m_Parameter_[21].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[21].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[21].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe23->isChecked())
		{
			m_Parameter_[22].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[22].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[22].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe24->isChecked())
		{
			m_Parameter_[23].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[23].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[23].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25->isChecked())
		{
			m_Parameter_[24].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[24].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[24].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe26->isChecked())
		{
			m_Parameter_[25].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[25].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[25].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe27->isChecked())
		{
			m_Parameter_[26].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[26].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[26].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe28->isChecked())
		{
			m_Parameter_[27].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[27].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[27].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe29->isChecked())
		{
			m_Parameter_[28].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[28].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[28].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe30->isChecked())
		{
			m_Parameter_[29].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[29].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[29].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe31->isChecked())
		{
			m_Parameter_[30].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[30].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[30].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe32->isChecked())
		{
			m_Parameter_[31].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[31].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[31].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe33->isChecked())
		{
			m_Parameter_[32].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[32].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[32].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe34->isChecked())
		{
			m_Parameter_[33].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[33].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[33].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe35->isChecked())
		{
			m_Parameter_[34].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[34].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[34].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe36->isChecked())
		{
			m_Parameter_[35].m_GateInfo[0].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIB->text().toFloat();
			m_Parameter_[35].m_GateInfo[0].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIL->text().toFloat();
			m_Parameter_[35].m_GateInfo[0].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyIT->text().toFloat();
		}
	}
}
void GuanTan::GateSetAnyA()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1->isChecked())
		{
			m_Parameter_[0].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[0].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[0].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe2->isChecked())
		{
			m_Parameter_[1].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[1].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[1].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe3->isChecked())
		{
			m_Parameter_[2].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[2].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[2].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe4->isChecked())
		{
			m_Parameter_[3].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[3].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[3].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe5->isChecked())
		{
			m_Parameter_[4].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[4].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[4].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe6->isChecked())
		{
			m_Parameter_[5].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[5].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[5].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe7->isChecked())
		{
			m_Parameter_[6].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[6].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[6].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe8->isChecked())
		{
			m_Parameter_[7].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[7].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[7].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe9->isChecked())
		{
			m_Parameter_[8].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[8].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[8].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe10->isChecked())
		{
			m_Parameter_[9].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[9].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[9].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe11->isChecked())
		{
			m_Parameter_[10].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[10].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[10].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe12->isChecked())
		{
			m_Parameter_[11].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[11].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[11].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13->isChecked())
		{
			m_Parameter_[12].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[12].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[12].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe14->isChecked())
		{
			m_Parameter_[13].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[13].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[13].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe15->isChecked())
		{
			m_Parameter_[14].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[14].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[14].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe16->isChecked())
		{
			m_Parameter_[15].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[15].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[15].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe17->isChecked())
		{
			m_Parameter_[16].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[16].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[16].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe18->isChecked())
		{
			m_Parameter_[17].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[17].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[17].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe19->isChecked())
		{
			m_Parameter_[18].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[18].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[18].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe20->isChecked())
		{
			m_Parameter_[19].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[19].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[19].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe21->isChecked())
		{
			m_Parameter_[20].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[20].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[20].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe22->isChecked())
		{
			m_Parameter_[21].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[21].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[21].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe23->isChecked())
		{
			m_Parameter_[22].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[22].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[22].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe24->isChecked())
		{
			m_Parameter_[23].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[23].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[23].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25->isChecked())
		{
			m_Parameter_[24].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[24].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[24].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe26->isChecked())
		{
			m_Parameter_[25].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[25].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[25].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe27->isChecked())
		{
			m_Parameter_[26].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[26].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[26].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe28->isChecked())
		{
			m_Parameter_[27].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[27].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[27].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe29->isChecked())
		{
			m_Parameter_[28].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[28].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[28].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe30->isChecked())
		{
			m_Parameter_[29].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[29].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[29].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe31->isChecked())
		{
			m_Parameter_[30].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[30].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[30].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe32->isChecked())
		{
			m_Parameter_[31].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[31].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[31].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe33->isChecked())
		{
			m_Parameter_[32].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[32].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[32].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe34->isChecked())
		{
			m_Parameter_[33].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[33].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[33].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe35->isChecked())
		{
			m_Parameter_[34].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[34].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[34].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe36->isChecked())
		{
			m_Parameter_[35].m_GateInfo[1].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAB->text().toFloat();
			m_Parameter_[35].m_GateInfo[1].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAL->text().toFloat();
			m_Parameter_[35].m_GateInfo[1].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyAT->text().toFloat();
		}
	}
}
void GuanTan::GateSetAnyB()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1->isChecked())
		{
			m_Parameter_[0].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[0].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[0].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe2->isChecked())
		{
			m_Parameter_[1].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[1].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[1].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe3->isChecked())
		{
			m_Parameter_[2].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[2].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[2].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe4->isChecked())
		{
			m_Parameter_[3].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[3].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[3].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe5->isChecked())
		{
			m_Parameter_[4].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[4].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[4].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe6->isChecked())
		{
			m_Parameter_[5].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[5].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[5].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe7->isChecked())
		{
			m_Parameter_[6].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[6].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[6].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe8->isChecked())
		{
			m_Parameter_[7].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[7].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[7].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe9->isChecked())
		{
			m_Parameter_[8].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[8].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[8].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe10->isChecked())
		{
			m_Parameter_[9].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[9].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[9].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe11->isChecked())
		{
			m_Parameter_[10].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[10].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[10].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe12->isChecked())
		{
			m_Parameter_[11].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[11].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[11].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13->isChecked())
		{
			m_Parameter_[12].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[12].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[12].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe14->isChecked())
		{
			m_Parameter_[13].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[13].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[13].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe15->isChecked())
		{
			m_Parameter_[14].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[14].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[14].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe16->isChecked())
		{
			m_Parameter_[15].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[15].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[15].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe17->isChecked())
		{
			m_Parameter_[16].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[16].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[16].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe18->isChecked())
		{
			m_Parameter_[17].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[17].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[17].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe19->isChecked())
		{
			m_Parameter_[18].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[18].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[18].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe20->isChecked())
		{
			m_Parameter_[19].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[19].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[19].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe21->isChecked())
		{
			m_Parameter_[20].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[20].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[20].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe22->isChecked())
		{
			m_Parameter_[21].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[21].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[21].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe23->isChecked())
		{
			m_Parameter_[22].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[22].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[22].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe24->isChecked())
		{
			m_Parameter_[23].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[23].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[23].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25->isChecked())
		{
			m_Parameter_[24].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[24].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[24].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe26->isChecked())
		{
			m_Parameter_[25].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[25].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[25].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe27->isChecked())
		{
			m_Parameter_[26].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[26].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[26].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe28->isChecked())
		{
			m_Parameter_[27].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[27].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[27].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe29->isChecked())
		{
			m_Parameter_[28].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[28].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[28].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe30->isChecked())
		{
			m_Parameter_[29].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[29].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[29].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe31->isChecked())
		{
			m_Parameter_[30].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[30].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[30].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe32->isChecked())
		{
			m_Parameter_[31].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[31].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[31].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe33->isChecked())
		{
			m_Parameter_[32].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[32].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[32].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe34->isChecked())
		{
			m_Parameter_[33].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[33].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[33].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe35->isChecked())
		{
			m_Parameter_[34].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[34].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[34].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe36->isChecked())
		{
			m_Parameter_[35].m_GateInfo[2].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBB->text().toFloat();
			m_Parameter_[35].m_GateInfo[2].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBL->text().toFloat();
			m_Parameter_[35].m_GateInfo[2].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyBT->text().toFloat();
		}
	}
}
void GuanTan::GateSetAnyI2()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1_12->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe1->isChecked())
		{
			m_Parameter_[0].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[0].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[0].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe2->isChecked())
		{
			m_Parameter_[1].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[1].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[1].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe3->isChecked())
		{
			m_Parameter_[2].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[2].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[2].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe4->isChecked())
		{
			m_Parameter_[3].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[3].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[3].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe5->isChecked())
		{
			m_Parameter_[4].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[4].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[4].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe6->isChecked())
		{
			m_Parameter_[5].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[5].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[5].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe7->isChecked())
		{
			m_Parameter_[6].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[6].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[6].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe8->isChecked())
		{
			m_Parameter_[7].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[7].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[7].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe9->isChecked())
		{
			m_Parameter_[8].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[8].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[8].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe10->isChecked())
		{
			m_Parameter_[9].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[9].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[9].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe11->isChecked())
		{
			m_Parameter_[10].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[10].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[10].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe12->isChecked())
		{
			m_Parameter_[11].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[11].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[11].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13_24->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe13->isChecked())
		{
			m_Parameter_[12].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[12].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[12].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe14->isChecked())
		{
			m_Parameter_[13].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[13].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[13].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe15->isChecked())
		{
			m_Parameter_[14].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[14].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[14].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe16->isChecked())
		{
			m_Parameter_[15].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[15].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[15].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe17->isChecked())
		{
			m_Parameter_[16].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[16].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[16].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe18->isChecked())
		{
			m_Parameter_[17].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[17].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[17].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe19->isChecked())
		{
			m_Parameter_[18].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[18].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[18].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe20->isChecked())
		{
			m_Parameter_[19].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[19].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[19].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe21->isChecked())
		{
			m_Parameter_[20].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[20].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[20].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe22->isChecked())
		{
			m_Parameter_[21].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[21].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[21].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe23->isChecked())
		{
			m_Parameter_[22].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[22].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[22].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe24->isChecked())
		{
			m_Parameter_[23].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[23].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[23].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25_36->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe25->isChecked())
		{
			m_Parameter_[24].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[24].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[24].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe26->isChecked())
		{
			m_Parameter_[25].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[25].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[25].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe27->isChecked())
		{
			m_Parameter_[26].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[26].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[26].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe28->isChecked())
		{
			m_Parameter_[27].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[27].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[27].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe29->isChecked())
		{
			m_Parameter_[28].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[28].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[28].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe30->isChecked())
		{
			m_Parameter_[29].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[29].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[29].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe31->isChecked())
		{
			m_Parameter_[30].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[30].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[30].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe32->isChecked())
		{
			m_Parameter_[31].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[31].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[31].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe33->isChecked())
		{
			m_Parameter_[32].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[32].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[32].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe34->isChecked())
		{
			m_Parameter_[33].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[33].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[33].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}	
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe35->isChecked())
		{
			m_Parameter_[34].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[34].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[34].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
		if (m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.checkBoxProbe36->isChecked())
		{
			m_Parameter_[35].m_GateInfo[3].m_fFrontGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2B->text().toFloat();
			m_Parameter_[35].m_GateInfo[3].m_fBackGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2L->text().toFloat();
			m_Parameter_[35].m_GateInfo[3].m_fPeakGate = m_ParameterSetting.m_UltrasoundParameter.m_GateSet.ui.lineEditAnyI2T->text().toFloat();
		}
	}
}
void GuanTan::Order_Parameter()
{
	int nFirst = m_ParameterSetting.m_qsOrderParameter.lastIndexOf(QRegExp(QString("/")),m_ParameterSetting.m_qsOrderParameter.size()-1);
	m_qsShowOrder = m_ParameterSetting.m_qsOrderParameter.right(m_ParameterSetting.m_qsOrderParameter.size()-1-nFirst);
	m_ParameterSetting.ui.lineEditOrder->setText(QString(m_qsShowOrder));
	QSettings setting(m_ParameterSetting.m_qsOrderParameter,QSettings::IniFormat);//读配置文件
	QSettings setting_Parameter(m_ParameterSetting.m_qsParameter,QSettings::IniFormat);
	int NumSteelDia = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->count();
	int NumSteelLength = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->count();
	int NumSteelPly = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->count();
	int NumSteelRank = m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->count();
	int i;
	for (i = 0;i < NumSteelDia;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->removeItem(0);
	}
	for (i = 0;i < NumSteelLength;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->removeItem(0);
	}
	for (i = 0;i < NumSteelPly;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->removeItem(0);
	}
	for (i = 0;i < NumSteelRank;i++)
	{
		m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->removeItem(0);
	}
	if (m_ParameterSetting.m_qsOrderParameter != NULL)
	{
		//添加直径
		setting.beginGroup("m_nDiameter");
		for (int i = 1;i <= 30;i++)
		{
			if (QString(setting.value(QString::number(i)).toString()) != NULL)
				m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->addItem(QString(setting.value(QString::number(i)).toString()));
		}
		setting.endGroup();
		//添加长度
		setting.beginGroup("m_nLength");
		for (int i = 1;i <= 30;i++)
		{
			if (QString(setting.value(QString::number(i)).toString()) != NULL)
				m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->addItem(QString(setting.value(QString::number(i)).toString()));
		}
		setting.endGroup();
		//添加壁厚
		setting.beginGroup("m_nThickness");
		for (int i = 1;i <= 30;i++)
		{
			if (QString(setting.value(QString::number(i)).toString()) != NULL)
				m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->addItem(QString(setting.value(QString::number(i)).toString()));
		}
		setting.endGroup();
		//添加钢级
		setting.beginGroup("m_nSteelTubeLevel");
		for (int i = 1;i <= 30;i++)
		{
			if (QString(setting.value(QString::number(i)).toString()) != NULL)
				m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->addItem(QString(setting.value(QString::number(i)).toString()));
		}
		setting.endGroup();
	}
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->setCurrentIndex(setting.value("m_nDiameter/cur").toInt());
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->setCurrentIndex(setting.value("m_nLength/cur").toInt());
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->setCurrentIndex(setting.value("m_nThickness/cur").toInt());
	m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->setCurrentIndex(setting.value("m_nSteelTubeLevel/cur").toInt());
	m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->setText(QString(setting.value("OrderNumber/num").toString()));
	m_ParameterSetting.m_OrderParameter.ui.lineEditSteelNumber->setText(QString(setting.value("Count/num").toString()));
	m_ParameterSetting.m_OrderParameter.ui.lineEditSteelName->setText(QString(setting.value("SteelNumber/name").toString()));
	if ((m_ParameterSetting.m_qsOrderParameter == setting_Parameter.value("Parameter/Order").toString())&&(m_ParameterSetting.m_qsOrderParameter != NULL))
	{
		m_ParameterSetting.ui.label_Order->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.m_bOrder = true;
	}
	else
	{
		m_ParameterSetting.ui.label_Order->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.m_bOrder = false;
	}
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setEnabled(true);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(true);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
	}
	else
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(false);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(false);
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
	}
	m_bOrderNew = 1;
}
void GuanTan::Ultrasound_Parameter()
{
	int nFirst = m_ParameterSetting.m_qsUltrasoundparameter.lastIndexOf(QRegExp(QString("/")),m_ParameterSetting.m_qsUltrasoundparameter.size()-1);
	m_qsShowUltrasound = m_ParameterSetting.m_qsUltrasoundparameter.right(m_ParameterSetting.m_qsUltrasoundparameter.size()-1-nFirst);
	m_ParameterSetting.ui.lineEditUltrasound->setText(QString(m_qsShowUltrasound));
	QSettings setting_Parameter(m_ParameterSetting.m_qsParameter,QSettings::IniFormat);
	if ((m_ParameterSetting.m_qsUltrasoundparameter == setting_Parameter.value("Parameter/Ultrasound").toString())&&(m_ParameterSetting.m_qsUltrasoundparameter != NULL))
	{
		m_ParameterSetting.ui.label_Ultrasound->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.m_bUltrasound = true;
	}
	else
	{
		m_ParameterSetting.ui.label_Ultrasound->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.m_bUltrasound = false;
	}
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setEnabled(true);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(true);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
	}
	else
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(false);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(false);
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
	}
	BurstDelay();
	CGain();
	Gain();
	ProbeSet();
	ReFreq();
	SoundSpeed();
	Width();
	ImpedanceSet();
	DeadZoneSet();
	Suppression();
}
void GuanTan::Show_Parameter()
{
	int nFirst = m_ParameterSetting.m_qsShowParameter.lastIndexOf(QRegExp(QString("/")),m_ParameterSetting.m_qsShowParameter.size()-1);
	m_qsShowShow = m_ParameterSetting.m_qsShowParameter.right(m_ParameterSetting.m_qsShowParameter.size()-1-nFirst);
	m_ParameterSetting.ui.lineEditShow->setText(QString(m_qsShowShow));
	QSettings setting(m_ParameterSetting.m_qsShowParameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_ShowParameter.ui.lineEditLength->setText(QString(setting.value("0000001/Length").toString()));
	m_ParameterSetting.m_ShowParameter.ui.lineEditToleranceMin->setText(QString(setting.value("0000001/ToleranceMin").toString()));
	m_ParameterSetting.m_ShowParameter.ui.lineEditToleranceMax->setText(QString(setting.value("0000001/ToleranceMax").toString()));
	m_ParameterSetting.m_ShowParameter.ui.lineEditLimitsMin->setText(QString(setting.value("0000001/LimitsMin").toString()));
	m_ParameterSetting.m_ShowParameter.ui.lineEditLimitsMax->setText(QString(setting.value("0000001/LimitsMax").toString()));
	QSettings setting_Parameter(m_ParameterSetting.m_qsParameter,QSettings::IniFormat);
	if ((m_ParameterSetting.m_qsShowParameter == setting_Parameter.value("Parameter/Show").toString())&&(m_ParameterSetting.m_qsShowParameter != NULL))
	{
		m_ParameterSetting.ui.label_Show->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.m_bShow = true;
	}
	else
	{
		m_ParameterSetting.ui.label_Show->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.m_bShow = false;
	}
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setEnabled(true);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(true);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
	}
	else
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(false);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(false);
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
	}
}
void GuanTan::Judge_Parameter()
{
	int nFirst = m_ParameterSetting.m_qsJudgeParameter.lastIndexOf(QRegExp(QString("/")),m_ParameterSetting.m_qsJudgeParameter.size()-1);
	m_qsShowJudge = m_ParameterSetting.m_qsJudgeParameter.right(m_ParameterSetting.m_qsJudgeParameter.size()-1-nFirst);
	m_ParameterSetting.ui.lineEditJudge->setText(QString(m_qsShowJudge));
	QSettings setting(m_ParameterSetting.m_qsJudgeParameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_JudgeParameter.ui.lineEditYesCouplingNumber->setText(QString(setting.value("chose/YesCouplingNumber").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditYesCouplingLength->setText(QString(setting.value("chose/YesCouplingLength").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditYesFaultNumber->setText(QString(setting.value("chose/YesFaultNumber").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditYesFaultLength->setText(QString(setting.value("chose/YesFaultLength").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditNoCouplingNumber->setText(QString(setting.value("chose/NoCouplingNumber").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditNoCouplingLength->setText(QString(setting.value("chose/NoCouplingLength").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditNoFaultNumber->setText(QString(setting.value("chose/NoFaultNumber").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditNoFaultLength->setText(QString(setting.value("chose/NoFaultLength").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditCouplingNumber->setText(QString(setting.value("chose/CouplingNumber").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.lineEditCouplingLength->setText(QString(setting.value("chose/CouplingLength").toString()));
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxYOut->setCurrentIndex(setting.value("mark/YOut").toInt());
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxYIn->setCurrentIndex(setting.value("mark/YIn").toInt());
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxXOut->setCurrentIndex(setting.value("mark/XOut").toInt());
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxXIn->setCurrentIndex(setting.value("mark/XIn").toInt());
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxPlyCut->setCurrentIndex(setting.value("mark/PlyCut").toInt());
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxPlyAdd->setCurrentIndex(setting.value("mark/PlyAdd").toInt());
	m_ParameterSetting.m_JudgeParameter.ui.comboBoxLayering->setCurrentIndex(setting.value("mark/Layering").toInt());
	m_ParameterSetting.m_JudgeParameter.m_bLightOpen = setting.value("alarm/m_bLightOpen").toInt();
	m_ParameterSetting.m_JudgeParameter.m_bSoundOpen = setting.value("alarm/m_bSoundOpen").toInt();

	if (m_ParameterSetting.m_JudgeParameter.m_bLightOpen)
	{
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonLightOpen->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 0, 255);"));
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonLightClose->setStyleSheet(QString::fromUtf8("background-color: rgb(127, 127, 127);"));
	}
	else
	{
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonLightOpen->setStyleSheet(QString::fromUtf8("background-color: rgb(127, 127, 127);"));
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonLightClose->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 0, 255);"));
	}
	if (m_ParameterSetting.m_JudgeParameter.m_bSoundOpen)
	{
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonSoundOpen->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 0, 255);"));
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonSoundClose->setStyleSheet(QString::fromUtf8("background-color: rgb(127, 127, 127);"));
	}
	else
	{
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonSoundOpen->setStyleSheet(QString::fromUtf8("background-color: rgb(127, 127, 127);"));
		m_ParameterSetting.m_JudgeParameter.ui.pushButtonSoundClose->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 0, 255);"));
	}
	QSettings setting_Parameter(m_ParameterSetting.m_qsParameter,QSettings::IniFormat);
	if ((m_ParameterSetting.m_qsJudgeParameter == setting_Parameter.value("Parameter/Judge").toString())&&(m_ParameterSetting.m_qsJudgeParameter != NULL))
	{
		m_ParameterSetting.ui.label_Judge->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.m_bJudge = true;
	}
	else
	{
		m_ParameterSetting.ui.label_Judge->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.m_bJudge = false;
	}
	if (m_ParameterSetting.m_bJudge && m_ParameterSetting.m_bOrder && m_ParameterSetting.m_bShow && m_ParameterSetting.m_bUltrasound)
	{
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 255, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setEnabled(true);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(true);
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(255,255,255)"));
	}
	else
	{
		m_ParameterSetting.ui.pushButtonYes->setEnabled(false);
		m_ParameterSetting.ui.pushButtonSend->setEnabled(false);
		m_ParameterSetting.ui.label_All->setStyleSheet(QString::fromUtf8("background-color: rgb(255, 0, 0);"));
		m_ParameterSetting.ui.pushButtonYes->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
		m_ParameterSetting.ui.pushButtonSend->setStyleSheet(QString::fromUtf8("color:rgb(110,110,110)"));
	}
}
void GuanTan::LeftPartShow()
{
	labelOutVFeatureNum->setText(QString::number(m_nOutVFeatureFlawNum));
	labelInVFeatureNum->setText(QString::number(m_nInVFeatureFlawNum));
	labelOutHFeatureNum->setText(QString::number(m_nOutHFeatureFlawNum));
	labelInHFeatureNum->setText(QString::number(m_nInHFeatureFlawNum));
	labelThickFeatureNum->setText(QString::number(m_nThickFeatureFlawNumAdd));
	labelThickFeatureNum_2->setText(QString::number(m_nThickFeatureFlawNumCut));
	labelThickFeatureNum_3->setText(QString::number(m_nThickFeatureFlawNumAdd2));
	labelThickFeatureNum_4->setText(QString::number(m_nThickFeatureFlawNumCut2));
	labelLayerFeatureNum->setText(QString::number(m_nLayerFeatureFlawNum));
	labelBadCoupleFeatureNum->setText(QString::number(m_nBadCoupleFeatureFlawNum));

	labelOutVFeatureSize->setText(QString::number(m_nOutVFeatureMaxFlawSize));
	labelInVFeatureSize->setText(QString::number(m_nInVFeatureMaxFlawSize));
	labelOutHFeatureSize->setText(QString::number(m_nOutHFeatureMaxFlawSize));
	labelInHFeatureSize->setText(QString::number(m_nInHFeatureMaxFlawSize));
	labelThickFeatureSize->setText(QString::number(m_nThickFeatureMaxFlawSizeAdd));
	labelThickFeatureSize_2->setText(QString::number(m_nThickFeatureMaxFlawSizeCut));
	labelThickFeatureSize_3->setText(QString::number(m_nThickFeatureMaxFlawSizeAdd2));
	labelThickFeatureSize_4->setText(QString::number(m_nThickFeatureMaxFlawSizeCut2));
	labelLayerFeatureSize->setText(QString::number(m_nLayerFeatureMaxFlawSize));
	labelBadCoupleFeatureSize->setText(QString::number(m_nBadCoupleFeatureMaxFlawSize));

	labelOutVFeatureMax->setText(QString::number(m_fOutVFeatureMaxFlawGain,'f',2));
	labelInVFeatureMax->setText(QString::number(m_fInVFeatureMaxFlawGain,'f',2));
	labelOutHFeatureMax->setText(QString::number(m_fOutHFeatureMaxFlawGain,'f',2));
	labelInHFeatureMax->setText(QString::number(m_fInHFeatureMaxFlawGain,'f',2));
	labelThickFeatureMax->setText(QString::number(m_fThickFeatureMaxFlawGain,'f',2));
	labelThickFeatureMin->setText(QString::number(m_fThickFeatureMinFlawGain,'f',2));
	labelThickFeatureMax_2->setText(QString::number(m_fThickFeatureMaxFlawGain2,'f',2));
	labelThickFeatureMin_2->setText(QString::number(m_fThickFeatureMinFlawGain2,'f',2));
	labelLayerFeatureMax->setText(QString::number(m_fLayerFeatureMax,'f',2));
}
void GuanTan::StaNoiseAllI()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllI->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllI->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllI->text().toInt();
		}
	}
}
void GuanTan::StaNoiseAllA()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllA->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllA->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllA->text().toInt();
		}
	}
}
void GuanTan::StaNoiseAllB()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllB->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllB->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllB->text().toInt();
		}
	}
}
void GuanTan::StaNoiseAllI2()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllI2->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllI2->text().toInt();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAllI2->text().toInt();
		}
	}
}
void GuanTan::StaNoiseAnyI()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[0].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI->text().toInt();
	}
}
void GuanTan::StaNoiseAnyA()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[1].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyA->text().toInt();
	}
}
void GuanTan::StaNoiseAnyB()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[2].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyB->text().toInt();
	}
}
void GuanTan::StaNoiseAnyI2()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
		if (m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[3].m_nStaNoise = m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.ui.lineEditAnyI2->text().toInt();
	}
}
void GuanTan::JudgeAllI()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllI->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllI->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllI->currentIndex();
		}
	}
}
void GuanTan::JudgeAllA()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllA->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllA->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllA->currentIndex();
		}
	}	
}
void GuanTan::JudgeAllB()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0; i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllB->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12; i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllB->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24; i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllB->currentIndex();
		}
	}
}

void GuanTan::JudgeAllI2()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		for (int i = 0;i < 12;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllI2->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		for (int i = 12;i < 24;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllI2->currentIndex();
		}
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		for (int i = 24;i < 36;i++)
		{
			m_Parameter_[i].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAllI2->currentIndex();
		}
	}
}
void GuanTan::JudgeAnyI()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[0].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI->currentIndex();
	}
}
void GuanTan::JudgeAnyA()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[1].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyA->currentIndex();
	}
}
void GuanTan::JudgeAnyB()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[2].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyB->currentIndex();
	}
}
void GuanTan::JudgeAnyI2()
{
	if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1_10->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe1->isChecked())
			m_Parameter_[0].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe2->isChecked())
			m_Parameter_[1].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe3->isChecked())
			m_Parameter_[2].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe4->isChecked())
			m_Parameter_[3].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe5->isChecked())
			m_Parameter_[4].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe6->isChecked())
			m_Parameter_[5].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe7->isChecked())
			m_Parameter_[6].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe8->isChecked())
			m_Parameter_[7].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe9->isChecked())
			m_Parameter_[8].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe10->isChecked())
			m_Parameter_[9].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11->isChecked())
			m_Parameter_[10].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe12->isChecked())
			m_Parameter_[11].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe11_20->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe13->isChecked())
			m_Parameter_[12].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe14->isChecked())
			m_Parameter_[13].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe15->isChecked())
			m_Parameter_[14].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe16->isChecked())
			m_Parameter_[15].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe17->isChecked())
			m_Parameter_[16].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe18->isChecked())
			m_Parameter_[17].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe19->isChecked())
			m_Parameter_[18].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe20->isChecked())
			m_Parameter_[19].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21->isChecked())
			m_Parameter_[20].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe22->isChecked())
			m_Parameter_[21].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe23->isChecked())
			m_Parameter_[22].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe24->isChecked())
			m_Parameter_[23].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
	}
	else if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe21_30->isChecked())
	{
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe25->isChecked())
			m_Parameter_[24].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe26->isChecked())
			m_Parameter_[25].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe27->isChecked())
			m_Parameter_[26].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe28->isChecked())
			m_Parameter_[27].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe29->isChecked())
			m_Parameter_[28].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe30->isChecked())
			m_Parameter_[29].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe31->isChecked())
			m_Parameter_[30].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe32->isChecked())
			m_Parameter_[31].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe33->isChecked())
			m_Parameter_[32].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe34->isChecked())
			m_Parameter_[33].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe35->isChecked())
			m_Parameter_[34].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
		if (m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.checkBoxProbe36->isChecked())
			m_Parameter_[35].m_GateInfo[3].m_bOpen = m_ParameterSetting.m_UltrasoundParameter.m_Judge.ui.comboBoxAnyI2->currentIndex();
	}
}

void GuanTan::TestResultProcess()
{
     CalcFlaw(m_vectorOutVFeature,m_nOutVFeatureFlawNum,m_nOutVFeatureMaxFlawSize,m_fOutVFeatureMaxFlawGain);
     CalcFlaw(m_vectorInVFeature,m_nInVFeatureFlawNum,m_nInVFeatureMaxFlawSize,m_fInVFeatureMaxFlawGain);
     CalcFlaw(m_vectorOutHFeature,m_nOutHFeatureFlawNum,m_nOutHFeatureMaxFlawSize,m_fOutHFeatureMaxFlawGain);
     CalcFlaw(m_vectorInHFeature,m_nInHFeatureFlawNum,m_nInHFeatureMaxFlawSize,m_fInHFeatureMaxFlawGain);
	 CalcFlaw(m_vectorLayerFeature,m_nLayerFeatureFlawNum,m_nLayerFeatureMaxFlawSize,m_fLayerFeatureMax);
	 CalcBadCouple(m_vectorBadCoupleFeature,m_nBadCoupleFeatureFlawNum,m_nBadCoupleFeatureMaxFlawSize);
	 CalcThick(m_vectorThickHighFeature,m_vectorThickLowFeature);
	 CalcThick2(m_vectorThickHighFeature2, m_vectorThickLowFeature2);

	 update();
}

void GuanTan::CalcFlaw(VectorPoint vecPoint,int& nFlawNum,int& nMaxFlawSize,float& fMaxFlawHeight)
{
	int nTempFlawSize = 0;
	float fTempFlawHeight = 0.0;
	nMaxFlawSize = 0;
	nFlawNum = 0;
	fMaxFlawHeight = 0.0;
	bool bBreak = false;
	for (int i = 0;i < vecPoint.size();i++)
	{
		if ((i >= m_nStartDeadZone) && (i <= m_nRealSteelL - m_nEndDeadZone))
		{
			if ( vecPoint[i].y() > fTempFlawHeight)
			{
				fTempFlawHeight =  vecPoint[i].y(); 
			}

			if(vecPoint[i].y() > 256.0)//阈值超过50%
			{
				nTempFlawSize++;
				if (nFlawNum == 0)
				{
					nFlawNum = 1;
				}
				if (nTempFlawSize > nMaxFlawSize)
				{
					nMaxFlawSize = nTempFlawSize;
				}
				if (bBreak)
				{
					nFlawNum++;
					bBreak = false;
				}
			}
			else
			{
				if (nTempFlawSize != 0)
				{
					bBreak = true;
					nTempFlawSize = 0;
				}
			}
		}
	} 
	fMaxFlawHeight = fTempFlawHeight/512 *100;//未从阈值转换为DB
}


void GuanTan::CalcBadCouple(VectorPoint vecPoint,int& nFlawNum,int& nMaxFlawSize)
{
	int nTempFlawSize = 0;
	bool bBreak = false;
	for (int i = 0;i < vecPoint.size();i++)
	{
		if ((i >= m_nStartDeadZone) && (i <= m_nRealSteelL - m_nEndDeadZone))
		{
			if(vecPoint[i].y() < BADCOUPLE_RANK)//阈值低于 wangwei modified on 2013-12-6
			{
				nTempFlawSize++;
				if (nFlawNum == 0)
				{
					nFlawNum = 1;
				}
				if (nTempFlawSize > nMaxFlawSize)
				{
					nMaxFlawSize = nTempFlawSize;
				}
				if (bBreak)
				{
					nFlawNum++;
					bBreak = false;
				}
			}
			else
			{
				if (nTempFlawSize != 0)
				{
					bBreak = true;
					nTempFlawSize = 0;
				}
			}
		}
	} 

}

void GuanTan::CalcThick(VectorPoint vecPointHigh,VectorPoint vecPointLow)
{
	int nTempFlawSize = 0;
	float fTempFlawHeight = 0.0f;
	bool bIn = false;
	bool bUp = false;
	bool bDown = false;
	for (int i = 0;i < vecPointHigh.size();i++)
	{
		if ((i >= m_nStartDeadZone) && (i <= m_nRealSteelL - m_nEndDeadZone))
		{
			if ( vecPointHigh[i].y() > fTempFlawHeight)
			{
				fTempFlawHeight =  vecPointHigh[i].y(); 
			}
			if(vecPointHigh[i].y() > (m_fCurThick + m_fThickMaxTolerance))//增厚允许的范围
			{
				if (m_nThickFeatureFlawNumAdd == 0)
				{
					m_nThickFeatureFlawNumAdd = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumAdd++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize = 0;
				}
				if (bDown)
				{
					m_nThickFeatureFlawNumAdd++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize = 0;
				}
				nTempFlawSize++;
				if (nTempFlawSize > m_nThickFeatureMaxFlawSizeAdd)
				{
					m_nThickFeatureMaxFlawSizeAdd = nTempFlawSize;
				}
				bUp = true;
			}
			else if (vecPointHigh[i].y() < (m_fCurThick + m_fThickMinTolerance))
			{
				if (m_nThickFeatureFlawNumAdd == 0)
				{
					m_nThickFeatureFlawNumAdd = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumAdd++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize = 0;
				}
				if (bUp)
				{
					m_nThickFeatureFlawNumAdd++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize = 0;
				}
				nTempFlawSize++;
				if (nTempFlawSize > m_nThickFeatureMaxFlawSizeAdd)
				{
					m_nThickFeatureMaxFlawSizeAdd = nTempFlawSize;
				}
				bDown = true;
			}
			else
			{
				if (nTempFlawSize != 0)
				{
					bUp = false;
					bIn = true;
					bDown = false;
					nTempFlawSize = 0;
				}
			}
		}
	} 
	m_fThickFeatureMaxFlawGain = fTempFlawHeight;//未从阈值转换为DB

	int nTempFlawSize1 = 0;
	float fTempFlawHeight1 = 500.0f;
	bIn = false;
	bUp = false;
	bDown = false;
	for (int i = 0;i < vecPointLow.size();i++)
	{
		if ((i >= m_nStartDeadZone) && (i <= m_nRealSteelL - m_nEndDeadZone))
		{
			if ( vecPointLow[i].y() < fTempFlawHeight1)
			{
				fTempFlawHeight1 =  vecPointLow[i].y(); 
			}
			if(vecPointLow[i].y() > (m_fCurThick + m_fThickMaxTolerance))//增厚允许的范围
			{
				if (m_nThickFeatureFlawNumCut == 0)
				{
					m_nThickFeatureFlawNumCut = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumCut++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize1 = 0;
				}
				if (bDown)
				{
					m_nThickFeatureFlawNumCut++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize1 = 0;
				}
				nTempFlawSize1++;
				if (nTempFlawSize1 > m_nThickFeatureMaxFlawSizeCut)
				{
					m_nThickFeatureMaxFlawSizeCut = nTempFlawSize1;
				}
				bUp = true;
			}
			else if (vecPointLow[i].y() < (m_fCurThick + m_fThickMinTolerance))
			{
				if (m_nThickFeatureFlawNumCut == 0)
				{
					m_nThickFeatureFlawNumCut = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumCut++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize1 = 0;
				}
				if (bUp)
				{
					m_nThickFeatureFlawNumCut++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize1 = 0;
				}
				nTempFlawSize1++;
				if (nTempFlawSize1 > m_nThickFeatureMaxFlawSizeCut)
				{
					m_nThickFeatureMaxFlawSizeCut = nTempFlawSize1;
				}
				bDown = true;
			}
			else
			{
				if (nTempFlawSize1 != 0)
				{
					bUp = false;
					bIn = true;
					bDown = false;
					nTempFlawSize1 = 0;
				}
			}
		}
	} 
	m_fThickFeatureMinFlawGain = fTempFlawHeight1;//未从阈值转换为DB
}

void GuanTan::CalcThick2(VectorPoint vecPointHigh, VectorPoint vecPointLow)
{
	int nTempFlawSize = 0;
	float fTempFlawHeight = 0.0f;
	bool bIn = false;
	bool bUp = false;
	bool bDown = false;
	for (int i = 0; i < vecPointHigh.size(); i++)
	{
		if ((i >= m_nStartDeadZone) && (i <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (vecPointHigh[i].y() > fTempFlawHeight)
			{
				fTempFlawHeight = vecPointHigh[i].y();
			}
			if (vecPointHigh[i].y() > (m_fCurThick + m_fThickMaxTolerance))//增厚允许的范围
			{
				if (m_nThickFeatureFlawNumAdd2 == 0)
				{
					m_nThickFeatureFlawNumAdd2 = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumAdd2++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize = 0;
				}
				if (bDown)
				{
					m_nThickFeatureFlawNumAdd2++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize = 0;
				}
				nTempFlawSize++;
				if (nTempFlawSize > m_nThickFeatureMaxFlawSizeAdd2)
				{
					m_nThickFeatureMaxFlawSizeAdd2 = nTempFlawSize;
				}
				bUp = true;
			}
			else if (vecPointHigh[i].y() < (m_fCurThick + m_fThickMinTolerance))
			{
				if (m_nThickFeatureFlawNumAdd2 == 0)
				{
					m_nThickFeatureFlawNumAdd2 = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumAdd2++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize = 0;
				}
				if (bUp)
				{
					m_nThickFeatureFlawNumAdd2++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize = 0;
				}
				nTempFlawSize++;
				if (nTempFlawSize > m_nThickFeatureMaxFlawSizeAdd2)
				{
					m_nThickFeatureMaxFlawSizeAdd2 = nTempFlawSize;
				}
				bDown = true;
			}
			else
			{
				if (nTempFlawSize != 0)
				{
					bUp = false;
					bIn = true;
					bDown = false;
					nTempFlawSize = 0;
				}
			}
		}
	}
	m_fThickFeatureMaxFlawGain2 = fTempFlawHeight;//未从阈值转换为DB

	int nTempFlawSize1 = 0;
	float fTempFlawHeight1 = 500.0f;
	bIn = false;
	bUp = false;
	bDown = false;
	for (int i = 0; i < vecPointLow.size(); i++)
	{
		if ((i >= m_nStartDeadZone) && (i <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (vecPointLow[i].y() < fTempFlawHeight1)
			{
				fTempFlawHeight1 = vecPointLow[i].y();
			}
			if (vecPointLow[i].y() > (m_fCurThick + m_fThickMaxTolerance))//增厚允许的范围
			{
				if (m_nThickFeatureFlawNumCut2 == 0)
				{
					m_nThickFeatureFlawNumCut2 = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumCut2++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize1 = 0;
				}
				if (bDown)
				{
					m_nThickFeatureFlawNumCut2++;
					bUp = true;
					bIn = false;
					bDown = false;
					nTempFlawSize1 = 0;
				}
				nTempFlawSize1++;
				if (nTempFlawSize1 > m_nThickFeatureMaxFlawSizeCut2)
				{
					m_nThickFeatureMaxFlawSizeCut2 = nTempFlawSize1;
				}
				bUp = true;
			}
			else if (vecPointLow[i].y() < (m_fCurThick + m_fThickMinTolerance))
			{
				if (m_nThickFeatureFlawNumCut2 == 0)
				{
					m_nThickFeatureFlawNumCut2 = 1;
				}
				if (bIn)
				{
					m_nThickFeatureFlawNumCut2++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize1 = 0;
				}
				if (bUp)
				{
					m_nThickFeatureFlawNumCut2++;
					bUp = false;
					bIn = false;
					bDown = true;
					nTempFlawSize1 = 0;
				}
				nTempFlawSize1++;
				if (nTempFlawSize1 > m_nThickFeatureMaxFlawSizeCut2)
				{
					m_nThickFeatureMaxFlawSizeCut2 = nTempFlawSize1;
				}
				bDown = true;
			}
			else
			{
				if (nTempFlawSize1 != 0)
				{
					bUp = false;
					bIn = true;
					bDown = false;
					nTempFlawSize1 = 0;
				}
			}
		}
	}
	m_fThickFeatureMinFlawGain2 = fTempFlawHeight1;//未从阈值转换为DB
}

void GuanTan::DataJudge()		//检测结果评判
{
	QString strFile = "./Order/" + m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text() + ".ini";
	QSettings settingsOrder(strFile,QSettings::IniFormat); // 当前目录的INI文件
	bool bSingleReport = 1;
	bool bSingleScreen = 1;
	int nTempNumber = m_nOutVFeatureFlawNum		// 外部纵向
		+ m_nInVFeatureFlawNum					// 内部纵向
		+ m_nOutHFeatureFlawNum					// 外部横向
		+ m_nInHFeatureFlawNum					// 内部横向
		+ m_nThickFeatureFlawNumAdd2			// 测厚增厚
		+ m_nThickFeatureFlawNumCut2			// 测厚减薄
		+ m_nLayerFeatureFlawNum;				// 分层          各个缺陷数量和

	int nTempSize = 0;
	if (nTempSize < m_nOutVFeatureMaxFlawSize)//比对出最大缺陷长度
	{
		nTempSize = m_nOutVFeatureMaxFlawSize;
	}
	if (nTempSize < m_nInVFeatureMaxFlawSize)
	{
		nTempSize = m_nInVFeatureMaxFlawSize;
	}
	if (nTempSize < m_nOutHFeatureMaxFlawSize)
	{
		nTempSize = m_nOutHFeatureMaxFlawSize;
	}
	if (nTempSize < m_nInHFeatureMaxFlawSize)
	{
		nTempSize = m_nInHFeatureMaxFlawSize;
	}
	if (nTempSize < m_nThickFeatureMaxFlawSizeAdd2)
	{
		nTempSize = m_nThickFeatureMaxFlawSizeAdd2;
	}
	if (nTempSize < m_nThickFeatureMaxFlawSizeCut2)
	{
		nTempSize = m_nThickFeatureMaxFlawSizeCut2;
	}
	if (nTempSize < m_nLayerFeatureMaxFlawSize)
	{
		nTempSize = m_nLayerFeatureMaxFlawSize;
	}

	if ((m_nBadCoupleFeatureFlawNum < m_JADGE_PARAMETER.nYesCouplingNumber)		//合格品条件比对
		&& (m_nBadCoupleFeatureMaxFlawSize < m_JADGE_PARAMETER.nYesCouplingLength)
		&& (nTempNumber < m_JADGE_PARAMETER.nYesFaultNumber)
		&& (nTempSize < m_JADGE_PARAMETER.nYesFaultLength))
	{
		label_48->setStyleSheet(QString::fromUtf8("border-image: url(:/GuanTan/Resources/hege.png);"));
		m_strJudgeResult = tr("合格品");
		if (m_bRunFlag)//如果是离线打印,则不增加统计
		{
			m_nAcCount++;
			QFile file(strFile);
			if (!file.open(QIODevice::ReadWrite | QIODevice::Text))
			{
				QMessageBox::information(this,tr("订单信息"),tr("新订单信息文件已经建立!"));
			}
			settingsOrder.beginGroup(QString::number(m_ORDER_PARAMETER.nSteelNumber));
			settingsOrder.setValue("JugeResult",QString::number(0));		//0是 合格品
			settingsOrder.setValue("m_nAcCount",QString::number(m_nAcCount));
			settingsOrder.setValue("m_nReCount",QString::number(m_nReCount));
			settingsOrder.setValue("m_nBaCount",QString::number(m_nBaCount));
			settingsOrder.setValue("m_strNewResultFile",m_strNewResultFile);
			settingsOrder.endGroup();
			if (m_FormItem.ui.radioButtonOnLine->isChecked())
			{
				if (m_FormItem.m_FormOnline.m_bQualified)
				{
					PrintScreen();
				}
			}
		}
	}
	else if (((m_nBadCoupleFeatureFlawNum < m_JADGE_PARAMETER.nNoCouplingNumber) && (m_nBadCoupleFeatureMaxFlawSize < m_JADGE_PARAMETER.nNoCouplingLength))
		&& ((nTempNumber >= m_JADGE_PARAMETER.nNoFaultNumber) || (nTempSize >= m_JADGE_PARAMETER.nNoFaultLength))) //不合格品条件比对
	{
		label_48->setStyleSheet(QString::fromUtf8("border-image: url(:/GuanTan/Resources/buhege.png);"));
		m_strJudgeResult = tr("不合格品");
		if (m_bRunFlag)
		{
			m_nReCount++;
			QFile file(strFile);
			if (!file.open(QIODevice::ReadWrite | QIODevice::Text))
			{
				QMessageBox::information(this,tr("订单信息"),tr("新订单信息文件已经建立!"));
			}
			settingsOrder.beginGroup(QString::number(m_ORDER_PARAMETER.nSteelNumber));
			settingsOrder.setValue("JugeResult",QString::number(1));		//1是 不合格品
			settingsOrder.setValue("m_nAcCount",QString::number(m_nAcCount));
			settingsOrder.setValue("m_nReCount",QString::number(m_nReCount));
			settingsOrder.setValue("m_nBaCount",QString::number(m_nBaCount));
			settingsOrder.setValue("m_strNewResultFile",m_strNewResultFile);
			settingsOrder.endGroup();
			if (m_FormItem.ui.radioButtonOnLine->isChecked())
			{
				if (m_FormItem.m_FormOnline.m_bDefect)
				{
					PrintScreen();
				}
			}
		}
	}
	else if ((m_nBadCoupleFeatureFlawNum >= m_JADGE_PARAMETER.nCouplingNumber) || (m_nBadCoupleFeatureMaxFlawSize >= m_JADGE_PARAMETER.nCouplingLength))//耦合不良品条件比对
	{
		label_48->setStyleSheet(QString::fromUtf8("border-image: url(:/GuanTan/Resources/ouhebuliang.png);"));
		m_strJudgeResult = tr("耦合不良品");
		if (m_bRunFlag)
		{
			m_nBaCount++;
			QFile file(strFile);
			if (!file.open(QIODevice::ReadWrite | QIODevice::Text))
			{
				QMessageBox::information(this,tr("订单信息"),tr("新订单信息文件已经建立!"));
			}
			settingsOrder.beginGroup(QString::number(m_ORDER_PARAMETER.nSteelNumber));
			settingsOrder.setValue("JugeResult",QString::number(2));		//2是 耦合不良
			settingsOrder.setValue("m_nAcCount",QString::number(m_nAcCount));
			settingsOrder.setValue("m_nReCount",QString::number(m_nReCount));
			settingsOrder.setValue("m_nBaCount",QString::number(m_nBaCount));
			settingsOrder.setValue("m_strNewResultFile",m_strNewResultFile);
			settingsOrder.endGroup();
			if (m_FormItem.ui.radioButtonOnLine->isChecked())
			{
				if (m_FormItem.m_FormOnline.m_bBadCouple)
				{
					PrintScreen();
				}
			}
		}
	}
}

void GuanTan::DateTimeUpdate()
{
	QDateTime dt;  
	QTime time;  
	QDate date;  
	dt.setTime(time.currentTime());  
	dt.setDate(date.currentDate());  
	QString currentDate = dt.toString("yyyy-MM-dd   hh:mm:ss");
	pushButtonCurDate->setText(QString(currentDate));
}

void GuanTan::filePrintPreviewSingle()		//单根报表打印预览
{
	QPrinter printer(QPrinter::ScreenResolution);
	QPrintPreviewDialog preview(&printer,this);
	preview.setWindowTitle(tr("单一报表打印预览"));
	preview.resize(printer.width(),printer.height());
 	connect(&preview, SIGNAL(paintRequested(QPrinter *)),this,SLOT(printPreviewSingle(QPrinter *)));
 	preview.exec();
}

void GuanTan::PrintSingle()					//单根报表直接打印
{
	QPrinter printer(QPrinter::ScreenResolution);
	QPrintPreviewDialog preview(&printer,this);
	preview.resize(printer.width(),printer.height());
	QFile fileFeature1(m_strSingleReport1); 
	if(!fileFeature1.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature2(m_strSingleReport2); 
	if(!fileFeature2.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature3(m_strSingleReport3); 
	if(!fileFeature3.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature4(m_strSingleReport4); 
	if(!fileFeature4.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature5(m_strSingleReport5); 
	if(!fileFeature5.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature6(m_strSingleReport6); 
	if(!fileFeature6.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature7(m_strSingleReport7); 
	if(!fileFeature7.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	QFile fileFeature8(m_strSingleReport8); 
	if(!fileFeature8.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("数据读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	printPreviewSingle(&printer);
}

void GuanTan::printPreviewSingle(QPrinter *printer)//绘制单根报表
{
	QPainter p(printer);
	p.begin(printer);
	p.setViewport(0,0,printer->pageRect().width()/2.13,printer->pageRect().height()/2.13);//调整比例
	p.drawLine(50,50,1600,50);
	p.drawLine(50,50,50,2280);
	p.drawLine(1600,50,1600,2280);
	p.drawLine(50,2280,1600,2280);

	p.drawLine(100,400,1550,400);
	p.drawLine(100,830,1550,830);
	p.drawLine(100,400,100,830);
	p.drawLine(1550,400,1550,830);

	p.drawLine(100,910,100,2230);
	p.drawLine(100,910,1550,910);
	p.drawLine(1550,910,1550,2230);
	p.drawLine(100,2230,1550,2230);
	QFont f;
	f.setPixelSize(70);
	p.setFont(f);
	p.drawText(m_rectTitle, Qt::AlignHCenter ,tr("单根钢管探伤报表"));
	f.setPixelSize(40);
	p.setFont(f);
// 	QPixmap image(":/GuanTan/Resources/CSIC.jpg");//加载图片
// 	QRect src(0,0,300,172);//截取图片的某个区域
// 	p.drawPixmap(QPoint(1200,100),image,src);//显示LOGO图片
	p.drawText(m_rectSteelNum, Qt::AlignLeft ,tr("钢管编号:"));
	p.drawText(m_rectSteelLength, Qt::AlignLeft ,tr("钢管长度:"));
	p.drawText(m_rectOperator, Qt::AlignLeft ,tr("操作者:"));
	p.drawText(m_rectTestStandard, Qt::AlignLeft ,tr("超声检测标准:"));
	p.drawText(m_rectSteelDia, Qt::AlignLeft ,tr("钢管直径:"));
	p.drawText(m_rectSteelThick, Qt::AlignLeft ,tr("钢管壁厚:"));
	p.drawText(m_rectEddyCurrentTestRank, Qt::AlignLeft ,tr("分选结果:"));
	p.drawText(m_rectSortingResult, Qt::AlignLeft ,tr("钢管钢级:"));
	p.drawText(m_rectTestRank, Qt::AlignLeft ,tr("超声检测级别:"));
	p.drawText(m_rectTestTime, Qt::AlignLeft ,tr("检测时间:"));
	p.drawText(m_rectOutVFeature, Qt::AlignRight ,tr("外部纵向缺陷:"));
	p.drawText(m_rectInVFeature, Qt::AlignRight ,tr("内部纵向缺陷:"));
	p.drawText(m_rectOutHFeature, Qt::AlignRight ,tr("外部横向缺陷:"));
	p.drawText(m_rectInHFeature, Qt::AlignRight ,tr("内部横向缺陷:"));
	p.drawText(m_rectThickAdd, Qt::AlignRight ,tr("壁厚增厚:"));
	p.drawText(m_rectThickCut, Qt::AlignRight ,tr("壁厚减薄:"));
	p.drawText(m_rectLayerFeature, Qt::AlignRight ,tr("分层缺陷:"));
	p.drawText(m_rectBadCoupleFeature, Qt::AlignRight ,tr("耦合不良:"));
	p.drawText(m_rectSteelNum_, Qt::AlignLeft ,labelTestSteelNumber->text());
	p.drawText(m_rectPrintTime, Qt::AlignHCenter ,QString(m_strSteelTestDate));
	p.drawText(m_rectTestTime_,Qt::AlignLeft,QString(m_strSteelTestTime));
	p.drawText(m_rectSteelLength_, Qt::AlignLeft ,labelLength->text() + " mm");
	p.drawText(m_rectSteelDia_,Qt::AlignLeft,labelDiameter->text() + " mm");
	p.drawText(m_rectSteelThick_,Qt::AlignLeft,labelThickness->text() + " mm");
	p.drawText(m_rectOperator_,Qt::AlignLeft,QString(m_strOperator));
	p.drawText(m_rectSingleSteelRank_,Qt::AlignLeft,QString(m_strJudgeResult));
	p.drawText(m_rectTestStandard_,Qt::AlignLeft,labelTestStandard->text());
	p.drawText(m_rectTestRank_,Qt::AlignLeft,labelTestLevel->text());
	p.drawText(m_rectSortingResult_,Qt::AlignLeft,labelSteelTubeLevel->text());
	f.setPixelSize(30);
	p.setFont(f);
	p.drawLine(410,1000,1500,1000);
	int add;
	QRect rect;
	int step;
	step = m_fPIPE_LENGTH/10;
	for (int i = 0;i <= m_fPIPE_LENGTH;i += step)		//水平标尺
	{
		add = i/step*100;
		p.drawLine(430+add,980,430+add,1000);
		if (i == 0)
			rect.setRect(425+add,940,75,30);
		else
			rect.setRect(400+add,940,75,30);
		p.drawText(rect,Qt::AlignLeft,QString::number(i));
	}
	f.setPixelSize(50);
	p.setFont(f);
	rect.setRect(330,970,50,60);
	p.drawText(rect,Qt::AlignLeft,tr("mm"));
	p.setPen(Qt::black);
	for (int j = 0;j <= 50;j++)					//竖直虚线
	{
		if (j%5 == 0)
		{
			p.setPen(Qt::blue);
		}
		else
			p.setPen(Qt::black);
		for (int k = 0;k < 20;k++)
		{
			p.drawLine(430+j*20,1000+k*60,430+j*20,1050+k*60);
		}
	}
	p.setPen(Qt::black);
	for (int m = 0;m < 8;m++)					//水平实线
	{
		p.drawLine(410,1120+m*140,1500,1120+m*140);
	}
	QPainterPath path_black,path_green;
	path_black.moveTo(1500,985);				//标尺黑色箭头
	path_black.lineTo(1540,1000);
	path_black.lineTo(1500,1015);
	path_black.lineTo(1500,985);
	p.setPen(Qt::black);
	p.setBrush(Qt::black);
	p.drawPath(path_black);
	for (int n = 0;n < 8;n++)					//绿色箭头
	{
		path_green.moveTo(1500,1105+n*140);
		path_green.lineTo(1540,1120+n*140);
		path_green.lineTo(1500,1135+n*140);
		path_green.lineTo(1500,1105+n*140);
		p.setPen(Qt::black);
		p.setBrush(Qt::black);
		p.drawPath(path_green);
	}
	//设置缺陷颜色和区域
	p.setBrush(Qt::red);
	p.setPen(Qt::red);
	float x1 = 0.0;
	BOOL tempB = false;
	QRect rectOutV(430,1100,1000,40);
	QRect rectInV(430,1240,1000,40);
	QRect rectOutH(430,1380,1000,40);
	QRect rectInH(430,1520,1000,40);
	QRect rectThickAdd(430,1660,1000,40);
	QRect rectThickCut(430,1800,1000,40);
	QRect rectLayer(430,1940,1000,40);
	QRect rectBadCouple(430,2080,1000,40);
	////////////////////////////////////////////////////////////////////////外部纵向缺陷报表打印
	QFile fileFeature1(m_strSingleReport1); 
	tempB = fileFeature1.exists(m_strSingleReport1);
	if(!fileFeature1.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("外部纵伤读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	int nNum1 = 0;
	int nNum2 = 0;
	int nNum3 = 0;
	int nNum4 = 0;
	int nNum5 = 0;
	int nNum6 = 0;
	int nNum7 = 0;
	int nNum8 = 0;
	int nNum9 = 0;
	while(!fileFeature1.atEnd()) 
	{  
		nNum1++;
		QByteArray line = fileFeature1.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum1 >= m_nStartDeadZone) && (nNum1 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (fTempY > 256)
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectOutV.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectOutV.width();
				p.drawRect(x1 + rectOutV.left() - fStep,rectOutV.top(),fStep,40);
			}
		}
	}
	fileFeature1.close();
	////////////////////////////////////////////////////////////////////////内部纵向缺陷报表打印
	QFile fileFeature2(m_strSingleReport2); 
	tempB = fileFeature2.exists(m_strSingleReport2);
	if(!fileFeature2.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("内部纵伤读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature2.atEnd()) 
	{  
		nNum2++;
		QByteArray line = fileFeature2.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum2 >= m_nStartDeadZone) && (nNum2 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (fTempY > 256)
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectInV.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectInV.width();
				p.drawRect(x1 + rectInV.left() - fStep,rectInV.top(),fStep,40);
			}
		}
	}
	fileFeature2.close();
	////////////////////////////////////////////////////////////////////////外部横向缺陷报表打印
	QFile fileFeature3(m_strSingleReport3); 
	tempB = fileFeature3.exists(m_strSingleReport3);
	if(!fileFeature3.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("外部横伤读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature3.atEnd()) 
	{  
		nNum3++;
		QByteArray line = fileFeature3.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum3 >= m_nStartDeadZone) && (nNum3 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (fTempY > 256)
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectOutH.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectOutH.width();
				p.drawRect(x1 + rectOutH.left() - fStep,rectOutH.top(),fStep,40);
			}
		}
	}
	fileFeature3.close();
	////////////////////////////////////////////////////////////////////////内部横向缺陷报表打印
	QFile fileFeature4(m_strSingleReport4); 
	tempB = fileFeature4.exists(m_strSingleReport4);
	if(!fileFeature4.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("内部横伤读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature4.atEnd()) 
	{  
		nNum4++;
		QByteArray line = fileFeature4.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum4 >= m_nStartDeadZone) && (nNum4 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (fTempY > 256)
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectInH.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectInH.width();
				p.drawRect(x1 + rectInH.left() - fStep,rectInH.top(),fStep,40);
			}
		}
	}
	fileFeature4.close();
	////////////////////////////////////////////////////////////////////////壁厚-增厚缺陷报表打印
	QFile fileFeature5(m_strSingleReport5); 
	tempB = fileFeature5.exists(m_strSingleReport5);
	if(!fileFeature5.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("壁厚增厚读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature5.atEnd()) 
	{  
		nNum5++;
		QByteArray line = fileFeature5.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum5 >= m_nStartDeadZone) && (nNum5 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if ((fTempY > (m_fCurThick + m_fThickMaxTolerance)) || (fTempY < (m_fCurThick + m_fThickMinTolerance)))
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectThickAdd.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickAdd.width();
				p.drawRect(x1 + rectThickAdd.left() - fStep,rectThickAdd.top(),fStep,40);
			}
		}
	}
	fileFeature5.close();
	////////////////////////////////////////////////////////////////////////壁厚-减薄缺陷报表打印
	QFile fileFeature6(m_strSingleReport6); 
	tempB = fileFeature6.exists(m_strSingleReport6);
	if(!fileFeature6.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("壁厚减薄读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature6.atEnd()) 
	{  
		nNum6++;
		QByteArray line = fileFeature6.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum6 >= m_nStartDeadZone) && (nNum6 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if ((fTempY > (m_fCurThick + m_fThickMaxTolerance)) || (fTempY < (m_fCurThick + m_fThickMinTolerance)))
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectThickCut.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickCut.width();
				p.drawRect(x1 + rectThickCut.left() - fStep,rectThickCut.top(),fStep,40);
			}
		}
	}
	fileFeature6.close();
	////////////////////////////////////////////////////////////////////////分层缺陷报表打印
	QFile fileFeature7(m_strSingleReport7); 
	tempB = fileFeature7.exists(m_strSingleReport7);
	if(!fileFeature7.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("分层缺陷失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature7.atEnd()) 
	{  
		nNum7++;
		QByteArray line = fileFeature7.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum7 >= m_nStartDeadZone) && (nNum7 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (fTempY > 256)
			{
				int nStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectLayer.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayer.width();
				p.drawRect(x1 + rectLayer.left() - nStep,rectLayer.top(),nStep,40);
			}
		}
	}
	fileFeature7.close();
	////////////////////////////////////////////////////////////////////////耦合不良缺陷报表打印
	QFile fileFeature8(m_strSingleReport8); 
	tempB = fileFeature8.exists(m_strSingleReport8);
	if(!fileFeature8.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("单根报表打印预览"),tr("耦合不良读取失败！当前没有可以用来画伤的数据，请读取离线数据或扫描新数据！")); 
		return;
	}
	while(!fileFeature8.atEnd()) 
	{  
		nNum8++;
		QByteArray line = fileFeature8.readLine();  
		QString strFeatureData(line); 
		float fTempX;
		float fTempY;
		int temp = strFeatureData.indexOf(QRegExp(","),0);
		QString strX = strFeatureData.left(temp);
		QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
		fTempX = strX.toFloat();
		fTempY = strY.toFloat();
		if ((nNum8 >= m_nStartDeadZone) && (nNum8 <= m_nRealSteelL - m_nEndDeadZone))
		{
			if (fTempY < BADCOUPLE_RANK)
			{
				float fStep = GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCouple.width();
				x1 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCouple.width();
				p.drawRect(x1 + rectBadCouple.left() - fStep,rectBadCouple.top(),fStep,40);
			}
		}
	}
	fileFeature8.close();
	p.end();
}

void GuanTan::filePrintPreviewWhole()		//整体报表打印预览
{
	QPrinter printer(QPrinter::ScreenResolution);
	QPrintPreviewDialog preview(&printer,this);
	preview.setWindowTitle(tr("整体报表打印预览"));
	preview.resize(printer.width(),printer.height());
	connect(&preview, SIGNAL(paintRequested(QPrinter *)),this,SLOT(printPreviewWhole(QPrinter *)));
	preview.exec();
}

void GuanTan::PrintWhole()					//整体报表直接打印
{
	if (m_ORDER_PARAMETER.nSteelNumber >= m_ORDER_PARAMETER.nSteelCount)
	{
		QPrinter printer(QPrinter::ScreenResolution);
		QPrintPreviewDialog preview(&printer,this);
		preview.resize(printer.width(),printer.height());
		printPreviewWhole(&printer);
	}
	else
	{
		QMessageBox::warning(this,tr("整体报表打印"),tr("当前订单有未检测的钢管,无法打印整体报表!"));
	}
}

void GuanTan::printPreviewWhole(QPrinter *printer)//绘制整体报表
{
	ReadEddyCurrent();
	QPainter p(printer);
	p.begin(printer);
	p.setViewport(0,0,printer->pageRect().width()/2.13,printer->pageRect().height()/2.13);
	p.drawLine(50,50,1600,50);
	p.drawLine(50,50,50,2280);
	p.drawLine(1600,50,1600,2280);
	p.drawLine(50,2280,1600,2280);

	p.drawLine(100,330,1550,330);
	p.drawLine(100,720,1550,720);
	p.drawLine(100,330,100,720);
	p.drawLine(1550,330,1550,720);

	p.drawLine(100,910,100,1430);
	p.drawLine(100,910,1550,910);
	p.drawLine(1550,910,1550,1430);
	p.drawLine(100,1430,1550,1430);

	p.drawLine(100,1480,100,2130);
	p.drawLine(100,1480,1550,1480);
	p.drawLine(1550,1480,1550,2130);
	p.drawLine(100,2130,1550,2130);
	QFont f;
	f.setPixelSize(70);
	p.setFont(f);
	p.drawText(m_rectTitle, Qt::AlignHCenter ,tr("超声涡流联合探伤报表"));
	f.setPixelSize(55);
	p.setFont(f);
	p.drawText(m_rectSoundResult, Qt::AlignHCenter ,tr("超 声 检 测 结 果"));
	p.drawText(m_rectEddyCurrentResult, Qt::AlignHCenter ,tr("涡 流 检 测 结 果"));
	f.setPixelSize(40);
	p.setFont(f);
// 	QPixmap image(":/GuanTan/Resources/CSIC.jpg");//加载图片
// 	QRect src(0,0,300,172);//截取图片的某个区域
// 	p.drawPixmap(QPoint(1200,100),image,src);//显示图片
	p.drawText(m_rectOrderNumber, Qt::AlignLeft ,tr("订单编号:"));
	p.drawText(m_rectSteelCount, Qt::AlignLeft ,tr("钢管数量:"));
	p.drawText(m_rectSteelLength, Qt::AlignLeft ,tr("钢管长度:"));
	p.drawText(m_rectOperator, Qt::AlignLeft ,tr("操作者:"));
	p.drawText(m_rectTestStandard, Qt::AlignLeft ,tr("超声检测标准:"));
	p.drawText(m_rectSteelDia, Qt::AlignLeft ,tr("钢管直径:"));
	p.drawText(m_rectSteelThick, Qt::AlignLeft ,tr("钢管壁厚:"));
	p.drawText(m_rectSteelRank, Qt::AlignLeft ,tr("钢管钢级:"));
	p.drawText(m_rectTestRank, Qt::AlignLeft ,tr("超声检测级别:"));
	p.drawText(m_rectTestTime1, Qt::AlignLeft ,tr("检测时间:"));
 	p.drawText(m_rectAllParameter, Qt::AlignHCenter ,tr("件 数"));
 	p.drawText(m_rectOrderParameter, Qt::AlignHCenter ,tr("件数百分比"));
	p.drawText(m_rectUltrasoundParameter, Qt::AlignRight ,tr("总计:"));
 	p.drawText(m_rectShowParameter, Qt::AlignRight ,tr("合格品:"));
 	p.drawText(m_rectJudgeParameter, Qt::AlignRight ,tr("不合格品:"));
	p.drawText(m_rectTotal, Qt::AlignRight ,tr("总计:"));
	p.drawText(m_rectQualified, Qt::AlignRight ,tr("合格品:"));
	p.drawText(m_rectFeature, Qt::AlignRight ,tr("不合格品:"));
	p.drawText(m_rectBadCouple, Qt::AlignRight ,tr("耦合不良品:"));
	p.drawText(m_rectCount, Qt::AlignHCenter ,tr("件 数"));
	p.drawText(m_rectCountPercent, Qt::AlignHCenter ,tr("件数百分比"));
// 	p.drawText(m_rectLength, Qt::AlignHCenter ,tr("长 度"));
// 	p.drawText(m_rectLengthPercent, Qt::AlignHCenter ,tr("长度百分比"));
	p.drawText(m_rectEddyCurrentTestRank, Qt::AlignLeft ,tr("涡流检测级别:"));
	p.drawText(m_rectEddyCurrentTestStandard, Qt::AlignLeft ,tr("涡流检测标准:"));
	p.drawText(m_rectName, Qt::AlignLeft ,tr("签字:"));

	p.drawText(m_rectPrintTime, Qt::AlignHCenter ,QString(m_strSteelTestDate));
	p.drawText(m_rectTestTime1_, Qt::AlignLeft ,QString(m_strSteelTestTime));
	p.drawText(m_rectOrderNumber_,Qt::AlignLeft,labelOrderNumber->text());
	p.drawText(m_rectSteelLength_, Qt::AlignLeft ,labelLength->text() + " mm");
	p.drawText(m_rectSteelDia_,Qt::AlignLeft,labelDiameter->text() + " mm");
	p.drawText(m_rectSteelThick_,Qt::AlignLeft,labelThickness->text() + " mm");
	p.drawText(m_rectSteelCount_,Qt::AlignLeft,labelSteelTubeCount->text());
	p.drawText(m_rectSteelRank_,Qt::AlignLeft,labelSteelTubeLevel->text());
	p.drawText(m_rectOperator_,Qt::AlignLeft,m_strOperator);
	p.drawText(m_rectTestStandard_,Qt::AlignLeft,labelTestStandard->text());
	p.drawText(m_rectTestRank_,Qt::AlignLeft,labelTestLevel->text());
	//涡流数据部分
	p.drawText(m_rectEddyCurrentTotal_,Qt::AlignHCenter,QString::number(m_nTOTAL));
	p.drawText(m_rectEddyCurrentAcNum_,Qt::AlignHCenter,QString::number(m_nACCEPTS_CONT));
	p.drawText(m_rectEddyCurrentAcPer_,Qt::AlignHCenter,QString(m_strACCEPTS_PERSENT));
	p.drawText(m_rectEddyCurrentReNum_,Qt::AlignHCenter,QString::number(m_nREJECTS_CONT));
	p.drawText(m_rectEddyCurrentRePer_,Qt::AlignHCenter,QString(m_strREJECTS_PERSENT));
	p.drawText(m_rectEddyCurrentTestStandard_,Qt::AlignLeft,tr("GB/T 7735-2004"));
	p.drawText(m_rectEddyCurrentTestRank_,Qt::AlignLeft,tr("A"));

	p.drawText(m_rectCountTotal_,Qt::AlignHCenter,QString::number(m_ORDER_PARAMETER.nSteelCount));
// 	m_nCountPercentTotal = m_ORDER_PARAMETER.nSteelCount * 100 / m_ORDER_PARAMETER.nSteelCount;//总数百分比
// 	p.drawText(m_rectCountPercentTotal_,Qt::AlignHCenter,QString::number(m_nCountPercentTotal) + "%");
// 	m_nLengthTotal = m_fPIPE_LENGTH;											//总计钢管长度
// 	p.drawText(m_rectLengthTotal_,Qt::AlignHCenter,QString::number(m_nLengthTotal));
// 	m_nLengthPercentTotal = m_fPIPE_LENGTH * 100 / m_fPIPE_LENGTH;				//总计长度百分比
// 	p.drawText(m_rectLengthPercentTotal_,Qt::AlignHCenter,QString::number(m_nLengthPercentTotal) + "%");
	p.drawText(m_rectAcCount_,Qt::AlignHCenter,QString::number(m_nAcCount));	//合格品数量
	m_nAcCountPercent = m_nAcCount * 100 / m_ORDER_PARAMETER.nSteelCount;						//合格品数量百分比
	p.drawText(m_rectAcCountPercent_,Qt::AlignHCenter,QString::number(m_nAcCountPercent) + "%");
// 	p.drawText(m_rectAcLength_,Qt::AlignHCenter,QString::number(m_nAcLength));	//合格品最大缺陷长度
// 	m_nAcLengthPercent = m_nAcLength * 100 / m_nLengthPercentTotal;				//合格品最大缺陷长度百分比
// 	p.drawText(m_rectAcLengthPercent_,Qt::AlignHCenter,QString::number(m_nAcLengthPercent) + "%");
	p.drawText(m_rectReCount_,Qt::AlignHCenter,QString::number(m_nReCount));	//不合格品数量
	m_nReCountPercent = m_nReCount * 100 / m_ORDER_PARAMETER.nSteelCount;						//不合格品数量百分比
	p.drawText(m_rectReCountPercent_,Qt::AlignHCenter,QString::number(m_nReCountPercent) + "%");
// 	p.drawText(m_rectReLength_,Qt::AlignHCenter,QString::number(m_nReLength));	//不合格品最大缺陷长度
// 	m_nReLengthPercent = m_nReLength * 100 / m_nLengthTotal;					//不合格品最大缺陷长度所占百分比
// 	p.drawText(m_rectReLengthPercent_,Qt::AlignHCenter,QString::number(m_nReLengthPercent) + "%");
	p.drawText(m_rectBaCount_,Qt::AlignHCenter,QString::number(m_nBaCount));	//耦合不良品数量
	m_nBaCountPercent = m_nBaCount * 100 / m_ORDER_PARAMETER.nSteelCount;						//耦合不良品数量百分比
	p.drawText(m_rectBaCountPercent_,Qt::AlignHCenter,QString::number(m_nBaCountPercent) + "%");
// 	p.drawText(m_rectBaLength_,Qt::AlignHCenter,QString::number(m_nBaLength));	//耦合不良品最大缺陷长度
// 	m_nBaLengthPercent = m_nBaLength * 100 / m_nLengthTotal;					//耦合不良品最大缺陷长度所占百分比
// 	p.drawText(m_rectBaLengthPercent_,Qt::AlignHCenter,QString::number(m_nBaLengthPercent) + "%");
	p.drawPixmap(0,0,QPixmap::grabWidget(0,0,400,300));
	p.end();
}

void GuanTan::closeEvent(QCloseEvent *event)
{
	QMessageBox::StandardButton button;  
	button = QMessageBox::question(this, tr("退出程序"),  
		QString(tr("警告：程序有一个任务正在运行中，是否结束操作退出?")),  
		QMessageBox::Yes | QMessageBox::No);  

	if (button == QMessageBox::No) 
	{  
		event->ignore();  //忽略退出信号，程序继续运行  
	}  
	else if (button == QMessageBox::Yes) 
	{  
		m_Ascan.close();
		m_UserManagement.close();
		m_ParameterSetting.m_OrderParameter.close();
		m_ParameterSetting.m_ShowParameter.close();
		m_ParameterSetting.m_JudgeParameter.close();
		m_ParameterSetting.m_UltrasoundParameter.m_Gain.close();
		m_ParameterSetting.m_UltrasoundParameter.m_CGain.close();
		m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.close();
		m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.close();
		m_ParameterSetting.m_UltrasoundParameter.m_GateSet.close();
		m_ParameterSetting.m_UltrasoundParameter.m_Width.close();
		m_ParameterSetting.m_UltrasoundParameter.m_Judge.close();
		m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.close();
		m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.close();
		m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.close();
		m_ParameterSetting.m_UltrasoundParameter.m_StaNoise.close();
		m_ParameterSetting.m_UltrasoundParameter.close();
		m_FormItem.m_FormOnline.close();
		m_FormItem.m_FormOffLine.close();
		m_FormItem.close();
		m_ParameterSetting.close();
		event->accept();  //接受退出信号，程序退出  	
	}  
}

void GuanTan::resizeEvent(QResizeEvent *event)
{
	DistributeRegion();
	SliderNoPresse();
}

void GuanTan::AScanSave()
{
	QSettings Setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);

	//增益保存
	Setting.setValue("Gain/Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fChannelPlus));
	Setting.setValue("Gain/Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fChannelPlus));
	Setting.setValue("Gain/Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fChannelPlus));
	Setting.setValue("Gain/Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fChannelPlus));
	Setting.setValue("Gain/Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fChannelPlus));
	Setting.setValue("Gain/Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fChannelPlus));
	Setting.setValue("Gain/Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fChannelPlus));
	Setting.setValue("Gain/Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fChannelPlus));
	Setting.setValue("Gain/Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fChannelPlus));
	Setting.setValue("Gain/Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fChannelPlus));
	Setting.setValue("Gain/Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fChannelPlus));
	Setting.setValue("Gain/Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fChannelPlus));
	Setting.setValue("Gain/Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fChannelPlus));
	Setting.setValue("Gain/Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fChannelPlus));
	Setting.setValue("Gain/Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fChannelPlus));
	Setting.setValue("Gain/Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fChannelPlus));
	Setting.setValue("Gain/Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fChannelPlus));
	Setting.setValue("Gain/Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fChannelPlus));
	Setting.setValue("Gain/Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fChannelPlus));
	Setting.setValue("Gain/Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fChannelPlus));
	Setting.setValue("Gain/Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fChannelPlus));
	Setting.setValue("Gain/Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fChannelPlus));
	Setting.setValue("Gain/Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fChannelPlus));
	Setting.setValue("Gain/Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fChannelPlus));
	Setting.setValue("Gain/Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fChannelPlus));
	Setting.setValue("Gain/Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fChannelPlus));
	Setting.setValue("Gain/Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fChannelPlus));
	Setting.setValue("Gain/Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fChannelPlus));
	Setting.setValue("Gain/Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fChannelPlus));
	Setting.setValue("Gain/Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fChannelPlus));
	Setting.setValue("Gain/Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fChannelPlus));
	Setting.setValue("Gain/Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fChannelPlus));
	Setting.setValue("Gain/Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fChannelPlus));
	Setting.setValue("Gain/Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fChannelPlus));
	Setting.setValue("Gain/Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fChannelPlus));
	Setting.setValue("Gain/Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fChannelPlus));

	//参考增益保存
	Setting.setValue("CGain/Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fChannelCPlus));
	Setting.setValue("CGain/Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fChannelCPlus));
	Setting.setValue("CGain/Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fChannelCPlus));
	Setting.setValue("CGain/Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fChannelCPlus));
	Setting.setValue("CGain/Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fChannelCPlus));
	Setting.setValue("CGain/Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fChannelCPlus));
	Setting.setValue("CGain/Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fChannelCPlus));
	Setting.setValue("CGain/Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fChannelCPlus));
	Setting.setValue("CGain/Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fChannelCPlus));
	Setting.setValue("CGain/Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fChannelCPlus));
	Setting.setValue("CGain/Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fChannelCPlus));
	Setting.setValue("CGain/Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fChannelCPlus));
	Setting.setValue("CGain/Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fChannelCPlus));
	Setting.setValue("CGain/Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fChannelCPlus));
	Setting.setValue("CGain/Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fChannelCPlus));
	Setting.setValue("CGain/Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fChannelCPlus));
	Setting.setValue("CGain/Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fChannelCPlus));
	Setting.setValue("CGain/Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fChannelCPlus));
	Setting.setValue("CGain/Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fChannelCPlus));
	Setting.setValue("CGain/Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fChannelCPlus));
	Setting.setValue("CGain/Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fChannelCPlus));
	Setting.setValue("CGain/Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fChannelCPlus));
	Setting.setValue("CGain/Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fChannelCPlus));
	Setting.setValue("CGain/Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fChannelCPlus));
	Setting.setValue("CGain/Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fChannelCPlus));
	Setting.setValue("CGain/Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fChannelCPlus));
	Setting.setValue("CGain/Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fChannelCPlus));
	Setting.setValue("CGain/Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fChannelCPlus));
	Setting.setValue("CGain/Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fChannelCPlus));
	Setting.setValue("CGain/Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fChannelCPlus));
	Setting.setValue("CGain/Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fChannelCPlus));
	Setting.setValue("CGain/Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fChannelCPlus));
	Setting.setValue("CGain/Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fChannelCPlus));
	Setting.setValue("CGain/Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fChannelCPlus));
	Setting.setValue("CGain/Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fChannelCPlus));
	Setting.setValue("CGain/Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fChannelCPlus));

	//抑制保存
	Setting.setValue("Suppression/Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fRestrain));
	Setting.setValue("Suppression/Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fRestrain));
	Setting.setValue("Suppression/Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fRestrain));
	Setting.setValue("Suppression/Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fRestrain));
	Setting.setValue("Suppression/Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fRestrain));
	Setting.setValue("Suppression/Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fRestrain));
	Setting.setValue("Suppression/Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fRestrain));
	Setting.setValue("Suppression/Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fRestrain));
	Setting.setValue("Suppression/Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fRestrain));
	Setting.setValue("Suppression/Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fRestrain));
	Setting.setValue("Suppression/Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fRestrain));
	Setting.setValue("Suppression/Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fRestrain));
	Setting.setValue("Suppression/Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fRestrain));
	Setting.setValue("Suppression/Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fRestrain));
	Setting.setValue("Suppression/Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fRestrain));
	Setting.setValue("Suppression/Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fRestrain));
	Setting.setValue("Suppression/Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fRestrain));
	Setting.setValue("Suppression/Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fRestrain));
	Setting.setValue("Suppression/Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fRestrain));
	Setting.setValue("Suppression/Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fRestrain));
	Setting.setValue("Suppression/Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fRestrain));
	Setting.setValue("Suppression/Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fRestrain));
	Setting.setValue("Suppression/Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fRestrain));
	Setting.setValue("Suppression/Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fRestrain));
	Setting.setValue("Suppression/Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fRestrain));
	Setting.setValue("Suppression/Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fRestrain));
	Setting.setValue("Suppression/Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fRestrain));
	Setting.setValue("Suppression/Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fRestrain));
	Setting.setValue("Suppression/Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fRestrain));
	Setting.setValue("Suppression/Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fRestrain));
	Setting.setValue("Suppression/Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fRestrain));
	Setting.setValue("Suppression/Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fRestrain));
	Setting.setValue("Suppression/Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fRestrain));
	Setting.setValue("Suppression/Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fRestrain));
	Setting.setValue("Suppression/Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fRestrain));
	Setting.setValue("Suppression/Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fRestrain));

	//延迟保存
	Setting.setValue("BurstDelay/Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fChannelDelay));
	Setting.setValue("BurstDelay/Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fChannelDelay));

	//范围保存
	Setting.setValue("Range/Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_fChannelRange));
	Setting.setValue("Range/Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_fChannelRange));
	Setting.setValue("Range/Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_fChannelRange));
	Setting.setValue("Range/Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_fChannelRange));
	Setting.setValue("Range/Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_fChannelRange));
	Setting.setValue("Range/Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_fChannelRange));
	Setting.setValue("Range/Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_fChannelRange));
	Setting.setValue("Range/Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_fChannelRange));
	Setting.setValue("Range/Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_fChannelRange));
	Setting.setValue("Range/Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_fChannelRange));
	Setting.setValue("Range/Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_fChannelRange));
	Setting.setValue("Range/Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_fChannelRange));
	Setting.setValue("Range/Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_fChannelRange));
	Setting.setValue("Range/Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_fChannelRange));
	Setting.setValue("Range/Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_fChannelRange));
	Setting.setValue("Range/Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_fChannelRange));
	Setting.setValue("Range/Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_fChannelRange));
	Setting.setValue("Range/Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_fChannelRange));
	Setting.setValue("Range/Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_fChannelRange));
	Setting.setValue("Range/Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_fChannelRange));
	Setting.setValue("Range/Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_fChannelRange));
	Setting.setValue("Range/Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_fChannelRange));
	Setting.setValue("Range/Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_fChannelRange));
	Setting.setValue("Range/Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_fChannelRange));
	Setting.setValue("Range/Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_fChannelRange));
	Setting.setValue("Range/Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_fChannelRange));
	Setting.setValue("Range/Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_fChannelRange));
	Setting.setValue("Range/Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_fChannelRange));
	Setting.setValue("Range/Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_fChannelRange));
	Setting.setValue("Range/Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_fChannelRange));
	Setting.setValue("Range/Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_fChannelRange));
	Setting.setValue("Range/Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_fChannelRange));
	Setting.setValue("Range/Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_fChannelRange));
	Setting.setValue("Range/Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_fChannelRange));
	Setting.setValue("Range/Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_fChannelRange));
	Setting.setValue("Range/Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_fChannelRange));

	//重复频率保存
	Setting.setValue("ReFreq/Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_ProbeInfo.m_wReFreq));
	Setting.setValue("ReFreq/Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_ProbeInfo.m_wReFreq));

	//闸门信息保存
	Setting.setValue("GateSet/Probe1IB",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_fFrontGate));//I闸门前沿
	Setting.setValue("GateSet/Probe2IB",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe3IB",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe4IB",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe5IB",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe6IB",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe7IB",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe8IB",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe9IB",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe10IB",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe11IB",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe12IB",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe13IB",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe14IB",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe15IB",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe16IB",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe17IB",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe18IB",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe19IB",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe20IB",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe21IB",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe22IB",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe23IB",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe24IB",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe25IB",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe26IB",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe27IB",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe28IB",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe29IB",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe30IB",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe31IB",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe32IB",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe33IB",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe34IB",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe35IB",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_fFrontGate));
	Setting.setValue("GateSet/Probe36IB",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_fFrontGate));

	Setting.setValue("GateSet/Probe1AB",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_fFrontGate));//A闸门前沿
	Setting.setValue("GateSet/Probe2AB",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe3AB",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe4AB",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe5AB",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe6AB",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe7AB",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe8AB",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe9AB",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe10AB",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe11AB",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe12AB",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe13AB",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe14AB",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe15AB",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe16AB",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe17AB",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe18AB",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe19AB",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe20AB",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe21AB",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe22AB",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe23AB",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe24AB",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe25AB",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe26AB",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe27AB",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe28AB",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe29AB",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe30AB",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe31AB",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe32AB",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe33AB",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe34AB",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe35AB",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_fFrontGate));
	Setting.setValue("GateSet/Probe36AB",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_fFrontGate));

	Setting.setValue("GateSet/Probe1BB",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_fFrontGate));//B闸门前沿
	Setting.setValue("GateSet/Probe2BB",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe3BB",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe4BB",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe5BB",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe6BB",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe7BB",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe8BB",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe9BB",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe10BB",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe11BB",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe12BB",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe13BB",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe14BB",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe15BB",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe16BB",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe17BB",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe18BB",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe19BB",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe20BB",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe21BB",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe22BB",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe23BB",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe24BB",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe25BB",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe26BB",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe27BB",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe28BB",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe29BB",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe30BB",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe31BB",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe32BB",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe33BB",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe34BB",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe35BB",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_fFrontGate));
	Setting.setValue("GateSet/Probe36BB",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_fFrontGate));

	Setting.setValue("GateSet/Probe1I2B",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_fFrontGate));//I2闸门前沿
	Setting.setValue("GateSet/Probe2I2B",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe3I2B",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe4I2B",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe5I2B",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe6I2B",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe7I2B",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe8I2B",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe9I2B",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe10I2B",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe11I2B",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe12I2B",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe13I2B",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe14I2B",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe15I2B",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe16I2B",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe17I2B",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe18I2B",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe19I2B",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe20I2B",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe21I2B",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe22I2B",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe23I2B",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe24I2B",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe25I2B",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe26I2B",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe27I2B",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe28I2B",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe29I2B",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe30I2B",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe31I2B",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe32I2B",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe33I2B",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe34I2B",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe35I2B",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_fFrontGate));
	Setting.setValue("GateSet/Probe36I2B",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_fFrontGate));

	Setting.setValue("GateSet/Probe1IL",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_fBackGate));//I闸门宽度
	Setting.setValue("GateSet/Probe2IL",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe3IL",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe4IL",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe5IL",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe6IL",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe7IL",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe8IL",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe9IL",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe10IL",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe11IL",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe12IL",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe13IL",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe14IL",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe15IL",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe16IL",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe17IL",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe18IL",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe19IL",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe20IL",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe21IL",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe22IL",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe23IL",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe24IL",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe25IL",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe26IL",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe27IL",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe28IL",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe29IL",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe30IL",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe31IL",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe32IL",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe33IL",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe34IL",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe35IL",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_fBackGate));
	Setting.setValue("GateSet/Probe36IL",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_fBackGate));

	Setting.setValue("GateSet/Probe1AL",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_fBackGate));//A闸门宽度
	Setting.setValue("GateSet/Probe2AL",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe3AL",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe4AL",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe5AL",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe6AL",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe7AL",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe8AL",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe9AL",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe10AL",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe11AL",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe12AL",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe13AL",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe14AL",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe15AL",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe16AL",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe17AL",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe18AL",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe19AL",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe20AL",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe21AL",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe22AL",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe23AL",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe24AL",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe25AL",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe26AL",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe27AL",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe28AL",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe29AL",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe30AL",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe31AL",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe32AL",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe33AL",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe34AL",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe35AL",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_fBackGate));
	Setting.setValue("GateSet/Probe36AL",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_fBackGate));

	Setting.setValue("GateSet/Probe1BL",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_fBackGate));//B闸门宽度
	Setting.setValue("GateSet/Probe2BL",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe3BL",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe4BL",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe5BL",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe6BL",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe7BL",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe8BL",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe9BL",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe10BL",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe11BL",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe12BL",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe13BL",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe14BL",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe15BL",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe16BL",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe17BL",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe18BL",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe19BL",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe20BL",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe21BL",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe22BL",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe23BL",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe24BL",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe25BL",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe26BL",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe27BL",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe28BL",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe29BL",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe30BL",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe31BL",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe32BL",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe33BL",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe34BL",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe35BL",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_fBackGate));
	Setting.setValue("GateSet/Probe36BL",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_fBackGate));

	Setting.setValue("GateSet/Probe1I2L",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_fBackGate));//I2闸门宽度
	Setting.setValue("GateSet/Probe2I2L",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe3I2L",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe4I2L",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe5I2L",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe6I2L",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe7I2L",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe8I2L",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe9I2L",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe10I2L",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe11I2L",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe12I2L",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe13I2L",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe14I2L",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe15I2L",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe16I2L",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe17I2L",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe18I2L",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe19I2L",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe20I2L",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe21I2L",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe22I2L",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe23I2L",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe24I2L",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe25I2L",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe26I2L",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe27I2L",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe28I2L",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe29I2L",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe30I2L",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe31I2L",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe32I2L",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe33I2L",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe34I2L",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe35I2L",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_fBackGate));
	Setting.setValue("GateSet/Probe36I2L",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_fBackGate));

	Setting.setValue("GateSet/Probe1IT",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_fPeakGate));//I闸门阈值
	Setting.setValue("GateSet/Probe2IT",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe3IT",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe4IT",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe5IT",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe6IT",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe7IT",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe8IT",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe9IT",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe10IT",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe11IT",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe12IT",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe13IT",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe14IT",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe15IT",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe16IT",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe17IT",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe18IT",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe19IT",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe20IT",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe21IT",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe22IT",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe23IT",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe24IT",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe25IT",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe26IT",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe27IT",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe28IT",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe29IT",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe30IT",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe31IT",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe32IT",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe33IT",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe34IT",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe35IT",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_fPeakGate));
	Setting.setValue("GateSet/Probe36IT",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_fPeakGate));

	Setting.setValue("GateSet/Probe1AT",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_fPeakGate));//A闸门阈值
	Setting.setValue("GateSet/Probe2AT",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe3AT",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe4AT",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe5AT",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe6AT",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe7AT",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe8AT",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe9AT",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe10AT",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe11AT",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe12AT",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe13AT",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe14AT",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe15AT",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe16AT",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe17AT",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe18AT",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe19AT",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe20AT",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe21AT",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe22AT",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe23AT",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe24AT",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe25AT",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe26AT",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe27AT",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe28AT",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe29AT",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe30AT",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe31AT",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe32AT",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe33AT",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe34AT",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe35AT",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_fPeakGate));
	Setting.setValue("GateSet/Probe36AT",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_fPeakGate));

	Setting.setValue("GateSet/Probe1BT",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_fPeakGate));//B闸门阈值
	Setting.setValue("GateSet/Probe2BT",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe3BT",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe4BT",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe5BT",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe6BT",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe7BT",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe8BT",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe9BT",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe10BT",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe11BT",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe12BT",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe13BT",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe14BT",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe15BT",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe16BT",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe17BT",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe18BT",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe19BT",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe20BT",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe21BT",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe22BT",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe23BT",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe24BT",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe25BT",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe26BT",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe27BT",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe28BT",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe29BT",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe30BT",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe31BT",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe32BT",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe33BT",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe34BT",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe35BT",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_fPeakGate));
	Setting.setValue("GateSet/Probe36BT",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_fPeakGate));

	Setting.setValue("GateSet/Probe1I2T",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_fPeakGate));//I2闸门阈值
	Setting.setValue("GateSet/Probe2I2T",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe3I2T",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe4I2T",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe5I2T",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe6I2T",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe7I2T",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe8I2T",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe9I2T",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe10I2T",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe11I2T",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe12I2T",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe13I2T",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe14I2T",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe15I2T",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe16I2T",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe17I2T",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe18I2T",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe19I2T",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe20I2T",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe21I2T",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe22I2T",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe23I2T",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe24I2T",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe25I2T",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe26I2T",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe27I2T",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe28I2T",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe29I2T",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe30I2T",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe31I2T",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe32I2T",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe33I2T",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe34I2T",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe35I2T",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_fPeakGate));
	Setting.setValue("GateSet/Probe36I2T",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_fPeakGate));

	Setting.setValue("Judge/IProbe1",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[0].m_bOpen));//I闸门开关保存
	Setting.setValue("Judge/IProbe2",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe3",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe4",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe5",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe6",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe7",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe8",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe9",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe10",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe11",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe12",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe13",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe14",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe15",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe16",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe17",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe18",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe19",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe20",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe21",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe22",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe23",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe24",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe25",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe26",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe27",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe28",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe29",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe30",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe31",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe32",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe33",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe34",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe35",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[0].m_bOpen));
	Setting.setValue("Judge/IProbe36",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[0].m_bOpen));

	Setting.setValue("Judge/AProbe1",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[1].m_bOpen));//A闸门开关保存
	Setting.setValue("Judge/AProbe2",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe3",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe4",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe5",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe6",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe7",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe8",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe9",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe10",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe11",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe12",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe13",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe14",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe15",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe16",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe17",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe18",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe19",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe20",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe21",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe22",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe23",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe24",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe25",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe26",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe27",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe28",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe29",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe30",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe31",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe32",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe33",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe34",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe35",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[1].m_bOpen));
	Setting.setValue("Judge/AProbe36",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[1].m_bOpen));

	Setting.setValue("Judge/BProbe1",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[2].m_bOpen));//B闸门开关保存
	Setting.setValue("Judge/BProbe2",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe3",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe4",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe5",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe6",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe7",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe8",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe9",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe10",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe11",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe12",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe13",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe14",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe15",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe16",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe17",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe18",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe19",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe20",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe21",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe22",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe23",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe24",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe25",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe26",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe27",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe28",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe29",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe30",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe31",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe32",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe33",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe34",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe35",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[2].m_bOpen));
	Setting.setValue("Judge/BProbe36",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[2].m_bOpen));

	Setting.setValue("Judge/I2Probe1",QString::number(m_Ascan.m_ChannelInfo[0].m_GateInfo[3].m_bOpen));//I2闸门开关保存
	Setting.setValue("Judge/I2Probe2",QString::number(m_Ascan.m_ChannelInfo[1].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe3",QString::number(m_Ascan.m_ChannelInfo[2].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe4",QString::number(m_Ascan.m_ChannelInfo[3].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe5",QString::number(m_Ascan.m_ChannelInfo[4].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe6",QString::number(m_Ascan.m_ChannelInfo[5].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe7",QString::number(m_Ascan.m_ChannelInfo[6].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe8",QString::number(m_Ascan.m_ChannelInfo[7].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe9",QString::number(m_Ascan.m_ChannelInfo[8].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe10",QString::number(m_Ascan.m_ChannelInfo[9].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe11",QString::number(m_Ascan.m_ChannelInfo[10].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe12",QString::number(m_Ascan.m_ChannelInfo[11].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe13",QString::number(m_Ascan.m_ChannelInfo[12].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe14",QString::number(m_Ascan.m_ChannelInfo[13].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe15",QString::number(m_Ascan.m_ChannelInfo[14].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe16",QString::number(m_Ascan.m_ChannelInfo[15].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe17",QString::number(m_Ascan.m_ChannelInfo[16].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe18",QString::number(m_Ascan.m_ChannelInfo[17].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe19",QString::number(m_Ascan.m_ChannelInfo[18].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe20",QString::number(m_Ascan.m_ChannelInfo[19].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe21",QString::number(m_Ascan.m_ChannelInfo[20].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe22",QString::number(m_Ascan.m_ChannelInfo[21].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe23",QString::number(m_Ascan.m_ChannelInfo[22].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe24",QString::number(m_Ascan.m_ChannelInfo[23].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe25",QString::number(m_Ascan.m_ChannelInfo[24].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe26",QString::number(m_Ascan.m_ChannelInfo[25].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe27",QString::number(m_Ascan.m_ChannelInfo[26].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe28",QString::number(m_Ascan.m_ChannelInfo[27].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe29",QString::number(m_Ascan.m_ChannelInfo[28].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe30",QString::number(m_Ascan.m_ChannelInfo[29].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe31",QString::number(m_Ascan.m_ChannelInfo[30].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe32",QString::number(m_Ascan.m_ChannelInfo[31].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe33",QString::number(m_Ascan.m_ChannelInfo[32].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe34",QString::number(m_Ascan.m_ChannelInfo[33].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe35",QString::number(m_Ascan.m_ChannelInfo[34].m_GateInfo[3].m_bOpen));
	Setting.setValue("Judge/I2Probe36",QString::number(m_Ascan.m_ChannelInfo[35].m_GateInfo[3].m_bOpen));
}

void GuanTan::HelpAction()			//帮助
{
#if HAVE_OPC
	;
#else
	if (g_wStartFlag)
	{
		g_wStartFlag = 0;
	}
	else
	{
		g_wStartFlag = 1;	
	}
#endif
}
void GuanTan::FormItemSet()//报表设置界面
{
	QSettings setting(m_strFormItem,QSettings::IniFormat);//读配置文件
	int nTemp1 = m_FormItem.ui.comboBoxOperator->count();//获取四个comboBox的数量
	int nTemp2 = m_FormItem.ui.comboBoxClasse->count();
	int nTemp3 = m_FormItem.ui.comboBoxTestStandard->count();
	int nTemp4 = m_FormItem.ui.comboBoxTestRank->count();
	//操作工的初始化
	for (int i = 0;i < nTemp1;i++)
	{
		m_FormItem.ui.comboBoxOperator->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value("Operator/" + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxOperator->addItem(setting.value("Operator/" + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxOperator->setCurrentIndex(setting.value("Operator/cur").toInt() - 1);
	//班次的初始化
	for (int i = 0;i < nTemp2;i++)
	{
		m_FormItem.ui.comboBoxClasse->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value("Shift/" + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxClasse->addItem(setting.value("Shift/" + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxClasse->setCurrentIndex(setting.value("Shift/cur").toInt() - 1);
	//检测标准的初始化
	for (int i = 0;i < nTemp3;i++)
	{
		m_FormItem.ui.comboBoxTestStandard->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value("Standard/" + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxTestStandard->addItem(setting.value("Standard/" + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxTestStandard->setCurrentIndex(setting.value("Standard/cur").toInt() - 1);
	//报表设置界面窗口显示
	m_FormItem.show();
}

void GuanTan::FormItemYes()//报表确定
{
	QSettings setting(m_strFormItem,QSettings::IniFormat);//读配置文件
	setting.setValue("Operator/cur",QString::number(m_FormItem.ui.comboBoxOperator->currentIndex() + 1));
	setting.setValue("Shift/cur",QString::number(m_FormItem.ui.comboBoxClasse->currentIndex() + 1));
	setting.setValue("Standard/cur",QString::number(m_FormItem.ui.comboBoxTestStandard->currentIndex() + 1));
	setting.setValue(m_FormItem.ui.comboBoxTestStandard->currentText() + "/cur",QString::number(m_FormItem.ui.comboBoxTestRank->currentIndex() + 1));
	labelTestStandard->setText(QString(m_FormItem.ui.comboBoxTestStandard->currentText()));
	labelTestLevel->setText(QString(m_FormItem.ui.comboBoxTestRank->currentText()));
	m_strOperator = m_FormItem.ui.comboBoxOperator->currentText();
	pushButtonOperatorShow->setText(tr("当前操作工:") + m_FormItem.ui.comboBoxOperator->currentText());
}

void GuanTan::FormItemOperatorAdd()//报表操作工添加
{
	QString qsOperator = m_FormItem.ui.comboBoxOperator->currentText();
	int nNum = m_FormItem.ui.comboBoxOperator->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_FormItem.ui.comboBoxOperator->setCurrentIndex(i);
		if (m_FormItem.ui.comboBoxOperator->currentText() != qsOperator)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_FormItem.ui.comboBoxOperator->addItem(qsOperator);
		QSettings settings(m_strFormItem, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("Operator");
		settings.setValue((QString::number(nAdd+1)),QString(qsOperator));
	}
}

void GuanTan::FormItemOperatorCut()//报表操作工删除
{
	int nCurNum = m_FormItem.ui.comboBoxOperator->currentIndex();
	int nNum = m_FormItem.ui.comboBoxOperator->count();
	QSettings settings(m_strFormItem, QSettings::IniFormat); //设置文件路径
	m_FormItem.ui.comboBoxOperator->removeItem(nCurNum);
	settings.beginGroup("Operator");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	for (int i = 0;i < nNum - 1;i++)
	{
		m_FormItem.ui.comboBoxOperator->setCurrentIndex(i);
		settings.setValue(QString::number(i + 1),m_FormItem.ui.comboBoxOperator->currentText());
	}
}

void GuanTan::FormItemShiftAdd()//报表班次添加
{
	QString qsShift = m_FormItem.ui.comboBoxClasse->currentText();
	int nNum = m_FormItem.ui.comboBoxClasse->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_FormItem.ui.comboBoxClasse->setCurrentIndex(i);
		if (m_FormItem.ui.comboBoxClasse->currentText() != qsShift)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_FormItem.ui.comboBoxClasse->addItem(qsShift);
		QSettings settings(m_strFormItem, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("Shift");
		settings.setValue((QString::number(nAdd+1)),QString(qsShift));
	}
}

void GuanTan::FormItemShiftCut()//报表班次删除
{
	int nCurNum = m_FormItem.ui.comboBoxClasse->currentIndex();
	int nNum = m_FormItem.ui.comboBoxClasse->count();
	QSettings settings(m_strFormItem, QSettings::IniFormat); //设置文件路径
	m_FormItem.ui.comboBoxClasse->removeItem(nCurNum);
	settings.beginGroup("Shift");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	for (int i = 0;i < nNum - 1;i++)
	{
		m_FormItem.ui.comboBoxClasse->setCurrentIndex(i);
		settings.setValue(QString::number(i + 1),m_FormItem.ui.comboBoxClasse->currentText());
	}
}

void GuanTan::FormItemStandardAdd()//报表检测标准添加
{
	QString strStandard = m_FormItem.ui.comboBoxTestStandard->currentText();
	int nNum = m_FormItem.ui.comboBoxTestStandard->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_FormItem.ui.comboBoxTestStandard->setCurrentIndex(i);
		if (m_FormItem.ui.comboBoxTestStandard->currentText() != strStandard)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_FormItem.ui.comboBoxTestStandard->addItem(strStandard);
		QSettings settings(m_strFormItem, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup("Standard");
		settings.setValue((QString::number(nAdd+1)),QString(strStandard));
	}
}

void GuanTan::FormItemStandardCut()//报表检测标准删除
{
	int nCurNum = m_FormItem.ui.comboBoxTestStandard->currentIndex();
	int nNum = m_FormItem.ui.comboBoxTestStandard->count();
	QSettings settings(m_strFormItem, QSettings::IniFormat); //设置文件路径
	m_FormItem.ui.comboBoxTestStandard->removeItem(nCurNum);
	settings.beginGroup("Standard");
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	for (int i = 0;i < nNum - 1;i++)
	{
		m_FormItem.ui.comboBoxTestStandard->setCurrentIndex(i);
		settings.setValue(QString::number(i + 1),m_FormItem.ui.comboBoxTestStandard->currentText());
	}
}

void GuanTan::FormItemRankAdd()//报表检测级别添加
{
	QString strStandard = m_FormItem.ui.comboBoxTestStandard->currentText();
	QString strRank = m_FormItem.ui.comboBoxTestRank->currentText();
	int nNum = m_FormItem.ui.comboBoxTestRank->count();
	if (nNum >= 20)
	{
		QMessageBox::warning(this,tr("添加"),tr("列表栏已满,请您删除不常用的栏目~"));
		return;
	}
	int nAdd = 0;
	for(int i=0;i<nNum;i++)
	{
		m_FormItem.ui.comboBoxTestRank->setCurrentIndex(i);
		if (m_FormItem.ui.comboBoxTestRank->currentText() != strRank)
		{
			nAdd +=1; 
		}
	}
	if (nAdd == nNum)
	{
		m_FormItem.ui.comboBoxTestRank->addItem(strRank);
		QSettings settings(m_strFormItem, QSettings::IniFormat); // 当前目录的INI文件
		settings.beginGroup(strStandard);
		settings.setValue((QString::number(nAdd+1)),QString(strRank));
	}
}

void GuanTan::FormItemRankCut()//报表检测级别删除
{
	QString strStandard = m_FormItem.ui.comboBoxTestStandard->currentText();
	int nCurNum = m_FormItem.ui.comboBoxTestRank->currentIndex();
	int nNum = m_FormItem.ui.comboBoxTestRank->count();
	QSettings settings(m_strFormItem, QSettings::IniFormat); //设置文件路径
	m_FormItem.ui.comboBoxTestRank->removeItem(nCurNum);
	settings.beginGroup(strStandard);
	for (int i = 1;i<=nNum;i++)
		settings.setValue(QString::number(i),"");
	for (int i = 0;i < nNum - 1;i++)
	{
		m_FormItem.ui.comboBoxTestRank->setCurrentIndex(i);
		settings.setValue(QString::number(i + 1),m_FormItem.ui.comboBoxTestRank->currentText());
	}
}

void GuanTan::FormItemCurSteelNumber()//设置即将检测的的钢管编号
{
	if (m_FormItem.ui.lineEditNumber->text().toInt() >= 1 && m_FormItem.ui.lineEditNumber->text().toInt() <= m_ORDER_PARAMETER.nSteelCount)
	{
		m_ORDER_PARAMETER.nSteelNumber = m_FormItem.ui.lineEditNumber->text().toInt() - 1;
		QString strFile = "./Order/" + m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text() + ".ini";
		QSettings settingsOrder(strFile,QSettings::IniFormat); // 当前目录的INI文件
		QFile file(strFile);
		if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
		{
			QMessageBox::warning(this,tr("订单信息"),tr("订单信息读取失败!"));
			return;
		}
		if (settingsOrder.value(QString::number(m_ORDER_PARAMETER.nSteelNumber) + "/m_nAcCount").toString() == NULL && m_ORDER_PARAMETER.nSteelNumber != 0)
		{
			QMessageBox::warning(this,tr("订单信息"),tr("对不起,您输入的待检编号之前有未检测的钢管号,请重新输入!"));
			 return;
		}
		if (settingsOrder.value(QString::number(m_ORDER_PARAMETER.nSteelNumber) + "/m_nReCount").toString() == NULL && m_ORDER_PARAMETER.nSteelNumber != 0)
		{
			QMessageBox::warning(this,tr("订单信息"),tr("对不起,您输入的待检编号之前有未检测的钢管号,请重新输入!"));
			return;
		}
		if (settingsOrder.value(QString::number(m_ORDER_PARAMETER.nSteelNumber) + "/m_nBaCount").toString() == NULL && m_ORDER_PARAMETER.nSteelNumber != 0)
		{
			QMessageBox::warning(this,tr("订单信息"),tr("对不起,您输入的待检编号之前有未检测的钢管号,请重新输入!"));
			return;
		}
		m_nAcCount = settingsOrder.value(QString::number(m_ORDER_PARAMETER.nSteelNumber) + "/m_nAcCount").toInt();
		m_nReCount = settingsOrder.value(QString::number(m_ORDER_PARAMETER.nSteelNumber) + "/m_nReCount").toInt();
		m_nBaCount = settingsOrder.value(QString::number(m_ORDER_PARAMETER.nSteelNumber) + "/m_nBaCount").toInt();
		QMessageBox::information(this,tr("更新待检的钢管编号"),tr("待检的钢管编号更新为:") + m_FormItem.ui.lineEditNumber->text() + tr("成功!"));
		//读取此订单下的已有涡流数据文件夹路径
		QString	strPath = "./Order/" + m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text() + ".ini";
		QSettings settingsEddyCurrent(strPath, QSettings::IniFormat);
		settingsEddyCurrent.beginGroup(m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text());
		strEddyCurrent = settingsEddyCurrent.value("strEddyCurrent").toString();
		settingsEddyCurrent.endGroup();
	}
	else
	{
		QMessageBox::warning(this,tr("更新待检的钢管编号"),tr("更新失败!输入的编号不在1-") + QString::number(m_ORDER_PARAMETER.nSteelCount) + tr("范围之内"));
	}
}

void GuanTan::FormItemTestRankUpdate()//检测级别更新
{
	QSettings setting(m_strFormItem, QSettings::IniFormat); //设置文件路径
	QString strStandard = m_FormItem.ui.comboBoxTestStandard->currentText();
	int nTempRank = m_FormItem.ui.comboBoxTestRank->count();//获取检测级别控件的内容数量
	//检测级别的初始化
	for (int i = 0;i < nTempRank;i++)
	{
		m_FormItem.ui.comboBoxTestRank->removeItem(0);
	}
	for (int i = 1;i < 30;i++)
	{
		if (setting.value(strStandard + tr("/") + QString::number(i)).toString() != NULL)
		{
			m_FormItem.ui.comboBoxTestRank->addItem(setting.value(strStandard + tr("/") + QString::number(i)).toString());
		}
	}
	m_FormItem.ui.comboBoxTestRank->setCurrentIndex(setting.value(strStandard + tr("/cur")).toInt() - 1);
}

void GuanTan::FormItemPrintScreen()//屏幕打印
{
	;
}

void GuanTan::InitVectorLabel()
{
	vecLabelDefect.clear();
	vecLabelDefect.push_back(labelDefect1);
	vecLabelDefect.push_back(labelDefect2);
	vecLabelDefect.push_back(labelDefect3);
	vecLabelDefect.push_back(labelDefect4);
	vecLabelDefect.push_back(labelDefect5);
	vecLabelDefect.push_back(labelDefect6);
	vecLabelDefect.push_back(labelDefect7);
	vecLabelDefect.push_back(labelDefect8);
	vecLabelDefect.push_back(labelDefect9);
	vecLabelDefect.push_back(labelDefect10);
	vecLabelDefect.push_back(labelDefect11);
	vecLabelDefect.push_back(labelDefect12);
	vecLabelDefect.push_back(labelDefect13);
	vecLabelDefect.push_back(labelDefect14);
	vecLabelDefect.push_back(labelDefect15);
	vecLabelDefect.push_back(labelDefect16);
	vecLabelDefect.push_back(labelDefect17);
	vecLabelDefect.push_back(labelDefect18);
	vecLabelDefect.push_back(labelDefect19);
	vecLabelDefect.push_back(labelDefect20);
	vecLabelDefect.push_back(labelDefect21);
	vecLabelDefect.push_back(labelDefect22);
	vecLabelDefect.push_back(labelDefect23);
	vecLabelDefect.push_back(labelDefect24);
	vecLabelDefect.push_back(labelDefect25);
	vecLabelDefect.push_back(labelDefect26);
	vecLabelDefect.push_back(labelDefect27);
	vecLabelDefect.push_back(labelDefect28);
	vecLabelDefect.push_back(labelDefect29);
	vecLabelDefect.push_back(labelDefect30);
	vecLabelDefect.push_back(labelDefect31);
	vecLabelDefect.push_back(labelDefect32);
	vecLabelDefect.push_back(labelDefect33);
	vecLabelDefect.push_back(labelDefect34);
	vecLabelDefect.push_back(labelDefect35);
	vecLabelDefect.push_back(labelDefect36);

	vecLabelCouple.clear();
	vecLabelCouple.push_back(labelCoupling1);
	vecLabelCouple.push_back(labelCoupling2);
	vecLabelCouple.push_back(labelCoupling3);
	vecLabelCouple.push_back(labelCoupling4);
	vecLabelCouple.push_back(labelCoupling5);
	vecLabelCouple.push_back(labelCoupling6);
	vecLabelCouple.push_back(labelCoupling7);
	vecLabelCouple.push_back(labelCoupling8);
	vecLabelCouple.push_back(labelCoupling9);
	vecLabelCouple.push_back(labelCoupling10);
	vecLabelCouple.push_back(labelCoupling11);
	vecLabelCouple.push_back(labelCoupling12);
	vecLabelCouple.push_back(labelCoupling13);
	vecLabelCouple.push_back(labelCoupling14);
	vecLabelCouple.push_back(labelCoupling15);
	vecLabelCouple.push_back(labelCoupling16);
	vecLabelCouple.push_back(labelCoupling17);
	vecLabelCouple.push_back(labelCoupling18);
	vecLabelCouple.push_back(labelCoupling19);
	vecLabelCouple.push_back(labelCoupling20);
	vecLabelCouple.push_back(labelCoupling21);
	vecLabelCouple.push_back(labelCoupling22);
	vecLabelCouple.push_back(labelCoupling23);
	vecLabelCouple.push_back(labelCoupling24);
	vecLabelCouple.push_back(labelCoupling25);
	vecLabelCouple.push_back(labelCoupling26);
	vecLabelCouple.push_back(labelCoupling27);
	vecLabelCouple.push_back(labelCoupling28);
	vecLabelCouple.push_back(labelCoupling29);
	vecLabelCouple.push_back(labelCoupling30);
	vecLabelCouple.push_back(labelCoupling31);
	vecLabelCouple.push_back(labelCoupling32);
	vecLabelCouple.push_back(labelCoupling33);
	vecLabelCouple.push_back(labelCoupling34);
	vecLabelCouple.push_back(labelCoupling35);
	vecLabelCouple.push_back(labelCoupling36);
}

void GuanTan::ReadOPCItem(OPCHANDLE *phServer,int nItemCount)
{
	// 读PLC2WSCommand值  0---无效	1---探伤 2---自动标定
	IUnknown *pIunknown;

	HRESULT hr = m_OPCComponent.GetIO2Interface(IID_IOPCAsyncIO2, (IUnknown**)&pIunknown);
	if (FAILED(hr))
	{
		return;
	}

	IOPCAsyncIO2* m_IOPCAsyncIO2 = NULL;
	hr = pIunknown->QueryInterface(IID_IOPCAsyncIO2, (void**)&m_IOPCAsyncIO2);
	if (FAILED(hr))
	{
		pIunknown->Release();
		return;
	}

	DWORD dwCancelID;
	HRESULT *pErrors;
	HRESULT r1;

// 	if (m_OPCComponent.m_pErrors[4] != S_OK) // //Item 不可用
// 	{
// 		QMessageBox::information(NULL, "Error", tr("OPC Item 不可用，不能用异步读功能!"), QMessageBox::Yes, QMessageBox::Yes);
// 		m_IOPCAsyncIO2->Release();
// 		pIunknown->Release();
// 		return;
// 	}

	r1 = m_IOPCAsyncIO2->Read(nItemCount, // [in]读 1 个 Item
		phServer, // [in] 定义的Item
		1, // [out] 客户Transaction ID
		&dwCancelID, // [out] 服务器Cancel ID
		&pErrors // [out] 服务器返回的错误码
		);
	//delete[] phServer;

	if (r1 == S_FALSE)
	{
		QMessageBox::warning(NULL, "Error", tr("Read()错误"), QMessageBox::Yes, QMessageBox::Yes);
		m_IOPCAsyncIO2->Release();
		pIunknown->Release();
		return;
	}
	if (FAILED(r1))
	{
		QMessageBox::warning(NULL, "Error", tr("异步读失败!"), QMessageBox::Yes, QMessageBox::Yes);
	}
	else
	{
		//释放内存，如果操作成功
		CoTaskMemFree(pErrors);
	}
	m_IOPCAsyncIO2->Release();
	pIunknown->Release();
	DWORD ret = ::WaitForSingleObject(hOPCReadEvent,INFINITE);

	ResetEvent(hOPCReadEvent);
}
BOOL GuanTan::WriteOPCItem(OPCHANDLE* phServer, VARIANT* itemArray,  const unsigned long & ulSize)
{
	IUnknown *pIunknown;
	HRESULT hr = m_OPCComponent.GetIO2Interface(IID_IOPCAsyncIO2, (IUnknown**)&pIunknown);
	if (FAILED(hr))
	{
		return FALSE;
	}

	IOPCAsyncIO2* m_IOPCAsyncIO2 = NULL;
	hr = pIunknown->QueryInterface(IID_IOPCAsyncIO2, (void**)&m_IOPCAsyncIO2);
	if (FAILED(hr))
	{
		pIunknown->Release();
		return FALSE;
	}	

	DWORD dwCancelID;
	// 钢板参数			
	// 探伤模式
	HRESULT *pErrors;
	HRESULT r1;
	LPWSTR ErrorStr;

	if (m_OPCComponent.m_pErrors[2] != S_OK) // Item not available
	{
		QMessageBox::warning(NULL, "Error", tr("OPC Item SysSelfTestResult不可用，不能用异步读功能!"), QMessageBox::Yes, QMessageBox::Yes);

		m_IOPCAsyncIO2->Release();
		pIunknown->Release();
		return FALSE;
	}

	r1 = m_IOPCAsyncIO2->Write( ulSize, // [in] 写 1 Item
		phServer, // [in] 定义的Item
		itemArray, // [in] 定义的值
		2, // [in] 客户 transaction ID
		&dwCancelID,// [out] 服务器 Cancel ID
		&pErrors // [out] 服务器返回的错误码
		);

	if (r1 == S_FALSE)
	{
		m_OPCComponent.m_IOPCServer->GetErrorString(pErrors[0], LOCALE_ID,
			&ErrorStr);
	}
	if (FAILED(r1))
	{
		QMessageBox::warning(NULL, "Error", tr("异步写Item 错误"), QMessageBox::Yes, QMessageBox::Yes);
	}
	else
	{ // release [out] parameter in case of not failed
		CoTaskMemFree(pErrors);
	}
	m_IOPCAsyncIO2->Release();
	pIunknown->Release();

	DWORD ret = ::WaitForSingleObject(hOPCWriteEvent,INFINITE);

	ResetEvent(hOPCWriteEvent);

	return TRUE;
}

void GuanTan::ResetAlarm()
{
	memset(m_bDefectAlarm,1,sizeof(m_bDefectAlarm));//报警初始化
	memset(m_bCouplingAlarm,1,sizeof(m_bCouplingAlarm));
	ClearAlarm();
}

void GuanTan::ZeroEncipheror()
{
#if HAVE_OPC
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0xB0, 0x0);// 实际PLC
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0xB8, 0x0);
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0xB8, 0xFF40);
	P9054_WriteWord(m_stThreadParam[1].hDev, P9054_ADDR_SPACE0, 0x28, 0x1);
#else
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0xB0, 0x1);  // 模拟PLC
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0xB8, 0x0);
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0xB8, 0xFF40);
	P9054_WriteWord(m_stThreadParam[1].hDev, P9054_ADDR_SPACE0, 0x26, 0x1);
#endif
}

void GuanTan::SaveData(QString fileName,VectorPoint ptVector)
{
	QFile file(fileName);
	if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
		return;
    QTextStream out(&file);
	VectorPoint::iterator it;
	out << "cm,"<<tr("幅值") << "\n";
	for (it = ptVector.begin();it != ptVector.end();it++) 
	{
		QString str = QString::number(it->ry(),'f',2);
		out << it->rx()<<","<<str<< "\n";
	}
	file.close();
}

void GuanTan::LastPipeData()
{
	if (m_strCurrentDataPath.size() == 0 )
	{
		QMessageBox::information(NULL, tr("提示"), tr("请先选择数据文件！")); 
		return;
	}
	int nCurDataNum = m_DataList.indexOf( m_strCurrentDataPath);
	if (nCurDataNum == 0)
	{
		QMessageBox::information(NULL, tr("提示"), tr("已经是第一条数据了！")); 
		return;
	}
	m_strCurrentDataPath = m_DataList.at(nCurDataNum - 1);
	QFile file(m_strCurrentDataPath); 
	BOOL tempb = file.exists(m_strCurrentDataPath);
	if(!file.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		qDebug()<<"Can't open the file!"<<endl;  
	} 
	ClearScreen();
	ResetAlarm();
	ReadDataFile(m_strCurrentDataPath);
	update();
}

void GuanTan::OpenPipeData()
{
	m_strCurrentDataPath = QFileDialog::getOpenFileName(this, tr("打开数据文件"), "D:/Data/",tr("数据文件(*.dt)")); //"D:/Data/"换成"."则选文件时为当前路径

	if(m_strCurrentDataPath.length() == 0) 
	{ 
		QMessageBox::information(NULL, tr("提示"), tr("没有选择任何数据文件")); 
		return;
	} 

	if(m_strCurrentDataPath.length() != 0) 
	{
		QFile file(m_strCurrentDataPath); 
		BOOL tempb = file.exists(m_strCurrentDataPath);
		if(!file.open(QIODevice::ReadOnly | QIODevice::Text)) 
		{  
			qDebug()<<"Can't open the file!"<<endl;  
		} 
		ClearScreen();
		ResetAlarm();
		ReadDataFile(m_strCurrentDataPath);
	}
	update();
}

void GuanTan::NextPipeData()
{
	if (m_strCurrentDataPath.size() == 0 )
	{
		QMessageBox::information(NULL, tr("提示"), tr("请先选择数据文件！")); 
		return;
	}
	int nCurDataNum = m_DataList.indexOf( m_strCurrentDataPath);
	if (nCurDataNum == m_DataList.size() - 1)
	{
		QMessageBox::information(NULL, tr("提示"), tr("已经是最后一条数据了！")); 
		return;
	}
	m_strCurrentDataPath = m_DataList.at(nCurDataNum + 1);
	QFile file(m_strCurrentDataPath); 
	BOOL tempb = file.exists(m_strCurrentDataPath);
	if(!file.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		qDebug()<<"Can't open the file!"<<endl;  
	} 
	ClearScreen();
	ResetAlarm();
	ReadDataFile(m_strCurrentDataPath);
	update();
}

void GuanTan::ReadDataFile(QString& strDataFile)
{
	QRect rectVFeature(widgetOne->rect().left() + 289,
		widgetOne->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + 2,
		widgetOne->rect().width() - 35,
		widgetOne->rect().height());
	QRect rectHFeature(widgetTwo->rect().left() + 289,
		widgetTwo->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + 5,
		widgetHRuler->rect().width() - 35,
		widgetTwo->rect().height());
	QRect rectThickFeature(widgetThree->rect().left() + 289,
		widgetThree->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + widgetTwo->rect().height() + 8,
		widgetHRuler->rect().width() - 35,
		widgetThree->rect().height());
	QRect rectLayerFeature(widgetFour->rect().left()+289,
		widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height() + 11,
		widgetFour->rect().width() - 35,
		widgetFour->rect().height());
	QRect rectBadCoupleFeature(widgetFive->rect().left()+289,
		widgetFive->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height() + 14,
		widgetFive->rect().width() - 35,
		widgetFive->rect().height());

	QFile file(strDataFile); 
	if(!file.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		qDebug()<<"Can't open the file!"<<endl;
		return;
	}  

	while(!file.atEnd()) 
	{  
		QByteArray line = file.readLine();  
		QString strTemp(tr(line));  
		QString str = strTemp.left(strTemp.size() - 1);
		QString strShow;
		int nFirst;
		if (str.indexOf(QRegExp("OutVFeatureFlawNum"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nOutVFeatureFlawNum = strShow.toInt();
		}
		else if (str.indexOf(QRegExp("InVFeatureFlawNum"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nInVFeatureFlawNum = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("OutHFeatureFlawNum"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nOutHFeatureFlawNum = strShow.toInt();
		}
		else if (str.indexOf(QRegExp("InHFeatureFlawNum"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nInHFeatureFlawNum = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureFlawNumAdd2"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureFlawNumAdd2 = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureFlawNumCut2"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureFlawNumCut2 = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureFlawNumAdd"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureFlawNumAdd = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureFlawNumCut"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureFlawNumCut = strShow.toInt();	
		}	
		else if (str.indexOf(QRegExp("LayerFeatureFlawNum"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nLayerFeatureFlawNum = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("BadCoupleFeatureFlawNum"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nBadCoupleFeatureFlawNum = strShow.toInt();	
		}

		else if (str.indexOf(QRegExp("OutVFeatureMaxFlawSize"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nOutVFeatureMaxFlawSize = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("InVFeatureMaxFlawSize"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nInVFeatureMaxFlawSize = strShow.toInt();
		}
		else if (str.indexOf(QRegExp("OutHFeatureMaxFlawSize"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nOutHFeatureMaxFlawSize = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("InHFeatureMaxFlawSize"),0) != -1)						//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nInHFeatureMaxFlawSize = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMaxFlawSizeAdd2"),0) != -1)				//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureMaxFlawSizeAdd2 = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMaxFlawSizeCut2"),0) != -1)				//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureMaxFlawSizeCut2 = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMaxFlawSizeAdd"),0) != -1)				//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureMaxFlawSizeAdd = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMaxFlawSizeCut"),0) != -1)				//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nThickFeatureMaxFlawSizeCut = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("LayerFeatureMaxFlawSize"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nLayerFeatureMaxFlawSize = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("BadCoupleFeatureMaxFlawSize"),0) != -1)				//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nBadCoupleFeatureMaxFlawSize = strShow.toInt();
		}

		else if (str.indexOf(QRegExp("OutVFeatureMaxFlawGain"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fOutVFeatureMaxFlawGain = strShow.toFloat();
		}
		else if (str.indexOf(QRegExp("InVFeatureMaxFlawGain"),0) != -1)						//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fInVFeatureMaxFlawGain = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("OutHFeatureMaxFlawGain"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fOutHFeatureMaxFlawGain = strShow.toFloat();
		}
		else if (str.indexOf(QRegExp("InHFeatureMaxFlawGain"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fInHFeatureMaxFlawGain = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMaxFlawGain2"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fThickFeatureMaxFlawGain2 = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMinFlawGain2"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fThickFeatureMinFlawGain2 = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMaxFlawGain"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fThickFeatureMaxFlawGain = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("ThickFeatureMinFlawGain"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fThickFeatureMinFlawGain = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("LayerFeatureMax"),0) != -1)					//
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fLayerFeatureMax = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("m_nRealSteelL"),0) != -1) //wangwei add on 2013-12-14
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nRealSteelL = strShow.toInt();	
		}
		update();

		if (str.indexOf(QRegExp("OutVFeature"),0) != -1)
		{
			m_strSingleReport1 = str;
			ReadDataFileAndDraw_V(str,rectVFeature,bmpVFeature,Qt::red);
		}
		else if (str.indexOf(QRegExp("InVFeature"),0) != -1)
		{
			m_strSingleReport2 = str;
			ReadDataFileAndDraw_V(str,rectVFeature,bmpVFeature,Qt::green);
		}
		else if (str.indexOf(QRegExp("OutHFeature"),0) != -1)
		{
			m_strSingleReport3 = str;
			ReadDataFileAndDraw(str,rectHFeature,bmpHFeature,Qt::red);
		}
		else if (str.indexOf(QRegExp("InHFeature"),0) != -1)
		{
			m_strSingleReport4 = str;
			ReadDataFileAndDraw(str,rectHFeature,bmpHFeature,Qt::green);
		}
		else if (str.indexOf(QRegExp("LayerFeature"),0) != -1)
		{
			m_strSingleReport7 = str;
			ReadDataFileAndDraw(str,rectLayerFeature,bmpLayerFeature,Qt::red);
		}
		else if (str.indexOf(QRegExp("MaxShow"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fPIPE_LENGTH = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("LeftShow"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			spinBoxLeftPart->setRange(0,m_fPIPE_LENGTH-PIPE_MIN_SHOW_LENGTH);
			spinBoxLeftPart->setValue(strShow.toInt());
		}
		else if (str.indexOf(QRegExp("RightShow"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			spinBoxRightPart->setRange(PIPE_MIN_SHOW_LENGTH,m_fPIPE_LENGTH);
			spinBoxRightPart->setValue(strShow.toInt());	
		}
		else if (str.indexOf(QRegExp("WholeParams"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelWholeParams->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("TestStandard"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelTestStandard->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("TestLevel"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelTestLevel->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("OrderNumber"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelOrderNumber->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("SteelTubeLevel"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelSteelTubeLevel->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("SteelTubeCount"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelSteelTubeCount->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("TestSteelNumber"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelTestSteelNumber->setText(QString(strShow));	
			m_ParameterSetting.m_OrderParameter.ui.lineEditSteelName->setText(QString(strShow));
		}
		else if (str.indexOf(QRegExp("Diameter"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelDiameter->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("Thickness"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelThickness->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("Length"),0) != -1)				//最大显示长度读取
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			labelLength->setText(QString(strShow));	
		}
		else if (str.indexOf(QRegExp("m_strOperator"),0) != -1)			//钢管检测操作工读取
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_strOperator = strShow;
		}
		else if (str.indexOf(QRegExp("m_strSteelTestDate"),0) != -1)	//钢管检测日期读取
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_strSteelTestDate = strShow;
		}
		else if (str.indexOf(QRegExp("m_strSteelTestTime"),0) != -1)	//钢管检测时间读取
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_strSteelTestTime = strShow;
			pushButton_18->setText(tr("当前文件：") + m_strSteelTestDate + tr("  ") + m_strSteelTestTime);//wangwei add on 2014-2-22
		}
		else if (str.indexOf(QRegExp("m_fThickMaxTolerance"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fThickMaxTolerance = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("m_fThickMinTolerance"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fThickMinTolerance = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("m_fRangeMax"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fRangeMax = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("m_fRangeMin"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fRangeMin = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("m_fCurThick"),0) != -1)
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_fCurThick = strShow.toFloat();	
		}
		else if (str.indexOf(QRegExp("m_nStartDeadZone"),0) != -1)//wangwei add on 2013-12-14
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nStartDeadZone = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("m_nEndDeadZone"),0) != -1)//wangwei add on 2013-12-14
		{
			nFirst = str.lastIndexOf(QRegExp(QString(",")),str.size()-1);
			strShow = str.right(str.size()-1-nFirst);
			m_nEndDeadZone = strShow.toInt();	
		}
		else if (str.indexOf(QRegExp("ThickHighFeature2"),0) != -1)
		{
			if (m_nThickDrawType == 1 || m_nThickDrawType == 0) // 2: 旧   1：新
			{
				continue;
			}

			m_strSingleReport5 = str;
			QFile fileFeature(str); 
			if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
			{  
				qDebug()<<"Can't open the file!"<<endl;  
			}
			QPainter painterFeature(&bmpThickFeature);
			float x1 = 0.0;
			float y1 = 0.0;
			int nTempNumber = 0;
			while(!fileFeature.atEnd()) 
			{  
				nTempNumber++;
				if (nTempNumber > 1)
				{
					if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
					{
						painterFeature.setPen(QColor(255, 0, 255));
					}
					else
					{
						painterFeature.setPen(Qt::blue);
					}
					QByteArray line = fileFeature.readLine();  
					QString strFeatureData(line); 
					float fTempX;
					float fTempY;
					int temp = strFeatureData.indexOf(QRegExp(","),0);
					QString strX = strFeatureData.left(temp);
					QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
					fTempX = strX.toFloat();
					fTempY = strY.toFloat();
					float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
					float y2 = rectThickFeature.height() - float(fTempY - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height();
					painterFeature.drawLine(QPointF(x1,y1 - 1),QPointF(x2,y2 - 1));
					x1 = x2;
					y1 = y2;
				}
			}
		}
		else if (str.indexOf(QRegExp("ThickLowFeature2"),0) != -1)	// 旧算法绘图
		{
			if (m_nThickDrawType == 1 || m_nThickDrawType == 0) // 2: 旧   1：新
			{
				continue;
			}

			m_strSingleReport6 = str;
			QFile fileFeature(str); 
			if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
			{  
				qDebug()<<"Can't open the file!"<<endl;  
			}
			QPainter painterFeature(&bmpThickFeature);
			float x1 = 0.0;
			float y1 = 0.0;
			int nTempNumber = 0;
			while(!fileFeature.atEnd()) 
			{  
				nTempNumber++;
				if (nTempNumber > 1)
				{
					if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
					{
						painterFeature.setPen(QColor(0, 255, 255));
					}
					else
					{
						painterFeature.setPen(Qt::blue);
					}
					QByteArray line = fileFeature.readLine();  
					QString strFeatureData(line); 
					float fTempX;
					float fTempY;
					int temp = strFeatureData.indexOf(QRegExp(","),0);
					QString strX = strFeatureData.left(temp);
					QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
					fTempX = strX.toFloat();
					fTempY = strY.toFloat();
					float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
					float y2 = rectThickFeature.height() - float(fTempY - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height();
					painterFeature.drawLine(QPointF(x1,y1 - 1),QPointF(x2,y2 - 1));
					x1 = x2;
					y1 = y2;
				}
			}
		}
		else if (str.indexOf(QRegExp("ThickHighFeature"),0) != -1)
		{
			if (m_nThickDrawType == 2 || m_nThickDrawType == 0) // 2: 旧   1：新
			{
				continue;
			}

			m_strSingleReport10 = str;
			QFile fileFeature(str); 
			if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
			{  
				qDebug()<<"Can't open the file!"<<endl;  
			}
			QPainter painterFeature(&bmpThickFeature);
			float x1 = 0.0;
			float y1 = 0.0;
			int nTempNumber = 0;
			while(!fileFeature.atEnd()) 
			{  
				nTempNumber++;
				if (nTempNumber > 1)
				{
					if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
					{
						painterFeature.setPen(QColor(255, 0, 0));
					}
					else
					{
						painterFeature.setPen(Qt::blue);
					}
					QByteArray line = fileFeature.readLine();  
					QString strFeatureData(line); 
					float fTempX;
					float fTempY;
					int temp = strFeatureData.indexOf(QRegExp(","),0);
					QString strX = strFeatureData.left(temp);
					QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
					fTempX = strX.toFloat();
					fTempY = strY.toFloat();
					float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
					float y2 = rectThickFeature.height() - float(fTempY - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height();
					painterFeature.drawLine(QPointF(x1,y1 - 1),QPointF(x2,y2 - 1));
					x1 = x2;
					y1 = y2;
				}
			}
		}
		else if (str.indexOf(QRegExp("ThickLowFeature"),0) != -1)
		{
			if (m_nThickDrawType == 2 || m_nThickDrawType == 0) // 0: 旧   1：新
			{
				continue;
			}

			m_strSingleReport11 = str;
			QFile fileFeature(str); 
			if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
			{  
				qDebug()<<"Can't open the file!"<<endl;  
			}
			QPainter painterFeature(&bmpThickFeature);
			float x1 = 0.0;
			float y1 = 0.0;
			int nTempNumber = 0;
			while(!fileFeature.atEnd()) 
			{  
				nTempNumber++;
				if (nTempNumber > 1)
				{
					if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
					{
						painterFeature.setPen(QColor(0, 255, 0));
					}
					else
					{
						painterFeature.setPen(Qt::blue);
					}
					QByteArray line = fileFeature.readLine();  
					QString strFeatureData(line); 
					float fTempX;
					float fTempY;
					int temp = strFeatureData.indexOf(QRegExp(","),0);
					QString strX = strFeatureData.left(temp);
					QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
					fTempX = strX.toFloat();
					fTempY = strY.toFloat();
					float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
					float y2 = rectThickFeature.height() - float(fTempY - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height();
					painterFeature.drawLine(QPointF(x1,y1 - 1),QPointF(x2,y2 - 1));
					x1 = x2;
					y1 = y2;
				}
			}
		}
		else if (str.indexOf(QRegExp("BadCoupleFeature"),0) != -1)
		{
			m_strSingleReport8 = str;
			m_nBadCoupleNum = 0;
			QFile fileFeature(str); 
			if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
			{  
				qDebug()<<"Can't open the file!"<<endl;  
			}
			QPainter painterFeature(&bmpBadCoupleFeature);
			float x1 = 0.0;
			float y1 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
			int nTempNumber = 0;
			while(!fileFeature.atEnd()) 
			{  
				nTempNumber++;
				if (nTempNumber > 1)
				{
					QByteArray line = fileFeature.readLine();  
					QString strFeatureData(line); 
					float fTempX;
					float fTempY;
					int temp = strFeatureData.indexOf(QRegExp(","),0);
					QString strX = strFeatureData.left(temp);
					QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
					fTempX = strX.toFloat();
					fTempY = strY.toFloat();
					float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
					float y2 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
					if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
					{
						painterFeature.setPen(Qt::green);
						painterFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
						if (fTempY < BADCOUPLE_RANK)
						{
							m_nBadCoupleNum++;
							if (m_nBadCoupleNum > m_nBadCoupleBoxNum)
							{
								painterFeature.setPen(Qt::red);
								painterFeature.drawRect(x2,rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 10,1,10);
							}
						}
						else
						{
							m_nBadCoupleNum = 0;
						}
						x1 = x2;
						y1 = y2;
					}
					else
					{
						painterFeature.setPen(Qt::blue);
						painterFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
						if (fTempY < BADCOUPLE_RANK)
						{
							m_nBadCoupleNum++;
							if (m_nBadCoupleNum > m_nBadCoupleBoxNum)
							{
								painterFeature.setPen(Qt::blue);
								painterFeature.drawRect(x2,rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 10,1,10);
							}
						}
						else
						{
							m_nBadCoupleNum = 0;
						}
						x1 = x2;
						y1 = y2;
					}
				}
			}
		}
	}
	DataJudge();
}

void GuanTan::ReadDataFileAndDraw(QString strDataFile,QRect rectFeature,QPixmap& bmpFeature,QColor clrFeature)
{
	QFile fileFeature(strDataFile); 
	BOOL tempB = fileFeature.exists(strDataFile);
	if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		qDebug()<<"Can't open the file!"<<endl;  
		return;
	}
	QPainter painterFeature(&bmpFeature);
	painterFeature.setPen(clrFeature);
	float x1 = 0.0;
	float y1 = 0.0;
	int nTempNumber = 0;
	while(!fileFeature.atEnd()) 
	{  
		nTempNumber++;
		if (nTempNumber > 1)
		{
			if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
			{
				painterFeature.setPen(clrFeature);
			}
			else
			{
				painterFeature.setPen(Qt::blue);
			}
			QByteArray line = fileFeature.readLine();  
			QString strFeatureData(line); 
			float fTempX;
			float fTempY;
			int temp = strFeatureData.indexOf(QRegExp(","),0);
			QString strX = strFeatureData.left(temp);
			QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
			fTempX = strX.toFloat();
			fTempY = strY.toFloat();
			float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectFeature.width();
			float y2 = rectFeature.height() - float(fTempY)/512.0 * rectFeature.height();
			painterFeature.drawLine(QPointF(x1,y1 - 1),QPointF(x2,y2 - 1));
			x1 = x2;
			y1 = y2;
		}
	}
}

void GuanTan::ReadDataFileAndDraw_V(QString strDataFile,QRect rectFeature,QPixmap& bmpFeature,QColor clrFeature)//读取并画图纵向缺陷
{
	QFile fileFeature(strDataFile); 
	BOOL tempB = fileFeature.exists(strDataFile);
	if(!fileFeature.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		qDebug()<<"Can't open the file!"<<endl;  
		return;
	}
	QPainter painterFeature(&bmpFeature);
	painterFeature.setPen(clrFeature);
	float x1 = 0.0;
	float y1 = 0.0;
	int nTempNumber = 0;
	while(!fileFeature.atEnd()) 
	{  
		nTempNumber++;
		if (nTempNumber > 1)
		{
			if ( (nTempNumber > m_nStartDeadZone) && (nTempNumber < m_nRealSteelL -m_nEndDeadZone))
			{
				painterFeature.setPen(clrFeature);
			}
			else
			{
				painterFeature.setPen(Qt::blue);
			}
			QByteArray line = fileFeature.readLine();  
			QString strFeatureData(line); 
			float fTempX;
			float fTempY;
			int temp = strFeatureData.indexOf(QRegExp(","),0);
			QString strX = strFeatureData.left(temp);
			QString strY = strFeatureData.right(strFeatureData.size() - temp - 1);
			fTempX = strX.toFloat();
			fTempY = strY.toFloat();
			float x2 = fTempX * GRID_WIDTH/ m_fPIPE_LENGTH * rectFeature.width();
			float y2 = rectFeature.height() - float(fTempY)/512.0 * rectFeature.height();
			painterFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
			x1 = x2;
			y1 = y2;
		}
	}
}

void GuanTan::ClearScreen()
{
	QRect rectVFeature(widgetOne->rect().left() + 289,widgetOne->rect().top() + widget->rect().height() + widget_2->rect().height() + 35 + 3,widgetOne->rect().width() - 35,widgetOne->rect().height());
	QRect rectHFeature(widgetTwo->rect().left() + 289,widgetTwo->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + 6,widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QRect rectThickFeature(widgetThree->rect().left() + 289,widgetThree->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + widgetTwo->rect().height() + 9,widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QRect rectLayerFeature(widgetFour->rect().left()+289,widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+12,widgetFour->rect().width()-35,widgetFour->rect().height());
	QRect rectBadCoupleFeature(widgetFive->rect().left()+289,widgetFive->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height()+15,widgetFive->rect().width()-35,widgetFive->rect().height());

	bmpVFeature = QPixmap(rectVFeature.size()); 
	bmpVFeature.fill(Qt::transparent);
	bmpHFeature = QPixmap(rectHFeature.size()); 
	bmpHFeature.fill(Qt::transparent);
	bmpThickFeature = QPixmap(rectThickFeature.size()); 
	bmpThickFeature.fill(Qt::transparent);
	bmpLayerFeature = QPixmap(rectLayerFeature.size());
	bmpLayerFeature.fill(Qt::transparent);
	bmpBadCoupleFeature = QPixmap(rectBadCoupleFeature.size());
	bmpBadCoupleFeature.fill(Qt::transparent);

	m_vectorOutVFeature.clear();//纵向缺陷曲线点集
	m_vectorInVFeature.clear();//纵向缺陷曲线点集
	m_vectorOutHFeature.clear();//横向缺陷曲线点集
	m_vectorInHFeature.clear();//横向缺陷曲线点集
	m_vectorThickHighFeature.clear();//测厚缺陷厚面曲线点集
	m_vectorThickLowFeature.clear();//测厚缺陷厚面曲线点集
	m_vectorThickHighFeature2.clear();//测厚缺陷厚面曲线点集
	m_vectorThickLowFeature2.clear();//测厚缺陷厚面曲线点集
	m_vectorLayerFeature.clear();//分层缺陷曲线点集
	m_vectorBadCoupleFeature.clear();//耦合不良曲线点集
	m_featureMap.clear();
	m_InHMap.clear();
	m_InVMap.clear();
	m_OutHMap.clear();
	m_OutVMap.clear();
	m_vectorThickFeature1.clear();
	m_vectorThickFeature2.clear(); 
	m_vectorThickFeature3.clear();
	m_vectorThickFeature4.clear();
	m_vectorThickFeature5.clear();
	m_vectorThickFeature6.clear();
	m_vectorThickTempFeature1.clear();
	m_vectorThickTempFeature2.clear();
	m_vectorThickTempFeature3.clear();
	m_vectorThickTempFeature4.clear();
	m_vectorThickTempFeature5.clear();
	m_vectorThickTempFeature6.clear();

#if SAVE_BOX_THICK
	m_vectorFeature1.clear();
	m_vectorFeature2.clear();
	m_vectorFeature3.clear();
	m_vectorFeature4.clear();
	m_vectorFeature5.clear();
	m_vectorFeature6.clear();
#endif

#if SAVE_PROBE_FEATURE
	m_vectorProbe1.clear();
	m_vectorProbe2.clear();
	m_vectorProbe3.clear();
	m_vectorProbe4.clear();
	m_vectorProbe5.clear();
	m_vectorProbe6.clear();
	m_vectorProbe7.clear();
	m_vectorProbe8.clear();
	m_vectorProbe9.clear();
	m_vectorProbe10.clear();
	m_vectorProbe11.clear();
	m_vectorProbe12.clear();
	m_vectorProbe13.clear();
	m_vectorProbe14.clear();
	m_vectorProbe15.clear();
	m_vectorProbe16.clear();
	m_vectorProbe17.clear();
	m_vectorProbe18.clear();
	m_vectorProbe19.clear();
	m_vectorProbe20.clear();
	m_vectorProbe21.clear();
	m_vectorProbe22.clear();
	m_vectorProbe23.clear();
	m_vectorProbe24.clear();
#endif

#if SAVE_BOX_COUPLE
	m_vecBadCoupleBox1.clear();
	m_vecBadCoupleBox2.clear();
	m_vecBadCoupleBox3.clear();
	m_vecBadCoupleBox4.clear();
	m_vecBadCoupleBox5.clear();
	m_vecBadCoupleBox6.clear();
#endif

	m_nOutVFeatureFlawNum = 0;
	m_nInVFeatureFlawNum = 0;
	m_nOutHFeatureFlawNum = 0;
	m_nInHFeatureFlawNum = 0;
	m_nThickFeatureFlawNumAdd = 0;
	m_nThickFeatureFlawNumCut = 0;
	m_nThickFeatureFlawNumAdd2 = 0;
	m_nThickFeatureFlawNumCut2 = 0;
	m_nLayerFeatureFlawNum = 0;
	m_nBadCoupleFeatureFlawNum = 0;
	m_nOutVFeatureMaxFlawSize = 0;
	m_nInVFeatureMaxFlawSize = 0;
	m_nOutHFeatureMaxFlawSize = 0;
	m_nInHFeatureMaxFlawSize = 0;
	m_nThickFeatureMaxFlawSizeAdd = 0;
	m_nThickFeatureMaxFlawSizeCut = 0;
	m_nThickFeatureMaxFlawSizeAdd2 = 0;
	m_nThickFeatureMaxFlawSizeCut2 = 0;
	m_nLayerFeatureMaxFlawSize = 0;
	m_nBadCoupleFeatureMaxFlawSize = 0;
	m_fOutVFeatureMaxFlawGain = 0.0f;
	m_fInVFeatureMaxFlawGain = 0.0f;
	m_fOutHFeatureMaxFlawGain = 0.0f;
	m_fInHFeatureMaxFlawGain = 0.0f;
	m_fThickFeatureMaxFlawGain = 0.0f;
	m_fThickFeatureMinFlawGain = 0.0f;
	m_fThickFeatureMaxFlawGain2 = 0.0f;
	m_fThickFeatureMinFlawGain2 = 0.0f;
	m_fLayerFeatureMax = 0.0f;
	m_bEncipherorChange2 = FALSE;
	m_bEncipherorChange3 = FALSE;
	m_bEncipherorChange4 = FALSE;
	m_bEncipherorChange5 = FALSE;
	m_bEncipherorChange6 = FALSE;
	update();
}
void GuanTan::BurstDelay()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe1->setText(QString(setting.value("BurstDelay/Probe1").toString()));//读取脉冲延迟
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe2->setText(QString(setting.value("BurstDelay/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe3->setText(QString(setting.value("BurstDelay/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe4->setText(QString(setting.value("BurstDelay/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe5->setText(QString(setting.value("BurstDelay/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe6->setText(QString(setting.value("BurstDelay/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe7->setText(QString(setting.value("BurstDelay/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe8->setText(QString(setting.value("BurstDelay/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe9->setText(QString(setting.value("BurstDelay/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe10->setText(QString(setting.value("BurstDelay/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe11->setText(QString(setting.value("BurstDelay/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe12->setText(QString(setting.value("BurstDelay/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe13->setText(QString(setting.value("BurstDelay/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe14->setText(QString(setting.value("BurstDelay/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe15->setText(QString(setting.value("BurstDelay/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe16->setText(QString(setting.value("BurstDelay/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe17->setText(QString(setting.value("BurstDelay/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe18->setText(QString(setting.value("BurstDelay/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe19->setText(QString(setting.value("BurstDelay/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe20->setText(QString(setting.value("BurstDelay/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe21->setText(QString(setting.value("BurstDelay/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe22->setText(QString(setting.value("BurstDelay/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe23->setText(QString(setting.value("BurstDelay/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe24->setText(QString(setting.value("BurstDelay/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe25->setText(QString(setting.value("BurstDelay/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe26->setText(QString(setting.value("BurstDelay/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe27->setText(QString(setting.value("BurstDelay/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe28->setText(QString(setting.value("BurstDelay/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe29->setText(QString(setting.value("BurstDelay/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe30->setText(QString(setting.value("BurstDelay/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe31->setText(QString(setting.value("BurstDelay/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe32->setText(QString(setting.value("BurstDelay/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe33->setText(QString(setting.value("BurstDelay/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe34->setText(QString(setting.value("BurstDelay/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe35->setText(QString(setting.value("BurstDelay/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_BurstDelay.ui.lineEditProbe36->setText(QString(setting.value("BurstDelay/Probe36").toString()));
}
void GuanTan::CGain()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe1->setText(QString(setting.value("CGain/Probe1").toString()));//读取参考增益
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe2->setText(QString(setting.value("CGain/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe3->setText(QString(setting.value("CGain/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe4->setText(QString(setting.value("CGain/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe5->setText(QString(setting.value("CGain/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe6->setText(QString(setting.value("CGain/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe7->setText(QString(setting.value("CGain/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe8->setText(QString(setting.value("CGain/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe9->setText(QString(setting.value("CGain/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe10->setText(QString(setting.value("CGain/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe11->setText(QString(setting.value("CGain/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe12->setText(QString(setting.value("CGain/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe13->setText(QString(setting.value("CGain/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe14->setText(QString(setting.value("CGain/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe15->setText(QString(setting.value("CGain/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe16->setText(QString(setting.value("CGain/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe17->setText(QString(setting.value("CGain/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe18->setText(QString(setting.value("CGain/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe19->setText(QString(setting.value("CGain/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe20->setText(QString(setting.value("CGain/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe21->setText(QString(setting.value("CGain/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe22->setText(QString(setting.value("CGain/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe23->setText(QString(setting.value("CGain/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe24->setText(QString(setting.value("CGain/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe25->setText(QString(setting.value("CGain/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe26->setText(QString(setting.value("CGain/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe27->setText(QString(setting.value("CGain/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe28->setText(QString(setting.value("CGain/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe29->setText(QString(setting.value("CGain/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe30->setText(QString(setting.value("CGain/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe31->setText(QString(setting.value("CGain/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe32->setText(QString(setting.value("CGain/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe33->setText(QString(setting.value("CGain/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe34->setText(QString(setting.value("CGain/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe35->setText(QString(setting.value("CGain/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_CGain.ui.lineEditProbe36->setText(QString(setting.value("CGain/Probe36").toString()));
}
void GuanTan::Gain()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe1->setText(QString(setting.value("Gain/Probe1").toString()));//读取增益
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe2->setText(QString(setting.value("Gain/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe3->setText(QString(setting.value("Gain/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe4->setText(QString(setting.value("Gain/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe5->setText(QString(setting.value("Gain/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe6->setText(QString(setting.value("Gain/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe7->setText(QString(setting.value("Gain/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe8->setText(QString(setting.value("Gain/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe9->setText(QString(setting.value("Gain/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe10->setText(QString(setting.value("Gain/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe11->setText(QString(setting.value("Gain/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe12->setText(QString(setting.value("Gain/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe13->setText(QString(setting.value("Gain/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe14->setText(QString(setting.value("Gain/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe15->setText(QString(setting.value("Gain/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe16->setText(QString(setting.value("Gain/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe17->setText(QString(setting.value("Gain/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe18->setText(QString(setting.value("Gain/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe19->setText(QString(setting.value("Gain/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe20->setText(QString(setting.value("Gain/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe21->setText(QString(setting.value("Gain/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe22->setText(QString(setting.value("Gain/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe23->setText(QString(setting.value("Gain/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe24->setText(QString(setting.value("Gain/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe25->setText(QString(setting.value("Gain/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe26->setText(QString(setting.value("Gain/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe27->setText(QString(setting.value("Gain/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe28->setText(QString(setting.value("Gain/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe29->setText(QString(setting.value("Gain/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe30->setText(QString(setting.value("Gain/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe31->setText(QString(setting.value("Gain/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe32->setText(QString(setting.value("Gain/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe33->setText(QString(setting.value("Gain/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe34->setText(QString(setting.value("Gain/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe35->setText(QString(setting.value("Gain/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Gain.ui.lineEditProbe36->setText(QString(setting.value("Gain/Probe36").toString()));
}
void GuanTan::ProbeSet()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro1Hz->setText(QString(setting.value("ProbeSet/Probe1Hz").toString()));//读取探头设置
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro2Hz->setText(QString(setting.value("ProbeSet/Probe2Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro3Hz->setText(QString(setting.value("ProbeSet/Probe3Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro4Hz->setText(QString(setting.value("ProbeSet/Probe4Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro5Hz->setText(QString(setting.value("ProbeSet/Probe5Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro6Hz->setText(QString(setting.value("ProbeSet/Probe6Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro7Hz->setText(QString(setting.value("ProbeSet/Probe7Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro8Hz->setText(QString(setting.value("ProbeSet/Probe8Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro9Hz->setText(QString(setting.value("ProbeSet/Probe9Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro10Hz->setText(QString(setting.value("ProbeSet/Probe10Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro11Hz->setText(QString(setting.value("ProbeSet/Probe11Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro12Hz->setText(QString(setting.value("ProbeSet/Probe12Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro13Hz->setText(QString(setting.value("ProbeSet/Probe13Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro14Hz->setText(QString(setting.value("ProbeSet/Probe14Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro15Hz->setText(QString(setting.value("ProbeSet/Probe15Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro16Hz->setText(QString(setting.value("ProbeSet/Probe16Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro17Hz->setText(QString(setting.value("ProbeSet/Probe17Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro18Hz->setText(QString(setting.value("ProbeSet/Probe18Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro19Hz->setText(QString(setting.value("ProbeSet/Probe19Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro20Hz->setText(QString(setting.value("ProbeSet/Probe20Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro21Hz->setText(QString(setting.value("ProbeSet/Probe21Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro22Hz->setText(QString(setting.value("ProbeSet/Probe22Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro23Hz->setText(QString(setting.value("ProbeSet/Probe23Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro24Hz->setText(QString(setting.value("ProbeSet/Probe24Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro25Hz->setText(QString(setting.value("ProbeSet/Probe25Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro26Hz->setText(QString(setting.value("ProbeSet/Probe26Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro27Hz->setText(QString(setting.value("ProbeSet/Probe27Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro28Hz->setText(QString(setting.value("ProbeSet/Probe28Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro29Hz->setText(QString(setting.value("ProbeSet/Probe29Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro30Hz->setText(QString(setting.value("ProbeSet/Probe30Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro31Hz->setText(QString(setting.value("ProbeSet/Probe31Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro32Hz->setText(QString(setting.value("ProbeSet/Probe32Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro33Hz->setText(QString(setting.value("ProbeSet/Probe33Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro34Hz->setText(QString(setting.value("ProbeSet/Probe34Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro35Hz->setText(QString(setting.value("ProbeSet/Probe35Hz").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro36Hz->setText(QString(setting.value("ProbeSet/Probe36Hz").toString()));

	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro1Cor->setText(QString(setting.value("ProbeSet/Probe1Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro2Cor->setText(QString(setting.value("ProbeSet/Probe2Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro3Cor->setText(QString(setting.value("ProbeSet/Probe3Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro4Cor->setText(QString(setting.value("ProbeSet/Probe4Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro5Cor->setText(QString(setting.value("ProbeSet/Probe5Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro6Cor->setText(QString(setting.value("ProbeSet/Probe6Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro7Cor->setText(QString(setting.value("ProbeSet/Probe7Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro8Cor->setText(QString(setting.value("ProbeSet/Probe8Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro9Cor->setText(QString(setting.value("ProbeSet/Probe9Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro10Cor->setText(QString(setting.value("ProbeSet/Probe10Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro11Cor->setText(QString(setting.value("ProbeSet/Probe11Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro12Cor->setText(QString(setting.value("ProbeSet/Probe12Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro13Cor->setText(QString(setting.value("ProbeSet/Probe13Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro14Cor->setText(QString(setting.value("ProbeSet/Probe14Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro15Cor->setText(QString(setting.value("ProbeSet/Probe15Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro16Cor->setText(QString(setting.value("ProbeSet/Probe16Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro17Cor->setText(QString(setting.value("ProbeSet/Probe17Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro18Cor->setText(QString(setting.value("ProbeSet/Probe18Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro19Cor->setText(QString(setting.value("ProbeSet/Probe19Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro20Cor->setText(QString(setting.value("ProbeSet/Probe20Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro21Cor->setText(QString(setting.value("ProbeSet/Probe21Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro22Cor->setText(QString(setting.value("ProbeSet/Probe22Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro23Cor->setText(QString(setting.value("ProbeSet/Probe23Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro24Cor->setText(QString(setting.value("ProbeSet/Probe24Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro25Cor->setText(QString(setting.value("ProbeSet/Probe25Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro26Cor->setText(QString(setting.value("ProbeSet/Probe26Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro27Cor->setText(QString(setting.value("ProbeSet/Probe27Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro28Cor->setText(QString(setting.value("ProbeSet/Probe28Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro29Cor->setText(QString(setting.value("ProbeSet/Probe29Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro30Cor->setText(QString(setting.value("ProbeSet/Probe30Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro31Cor->setText(QString(setting.value("ProbeSet/Probe31Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro32Cor->setText(QString(setting.value("ProbeSet/Probe32Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro33Cor->setText(QString(setting.value("ProbeSet/Probe33Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro34Cor->setText(QString(setting.value("ProbeSet/Probe34Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro35Cor->setText(QString(setting.value("ProbeSet/Probe35Cor").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditPro36Cor->setText(QString(setting.value("ProbeSet/Probe36Cor").toString()));

	//读取探头校准数据 wangwei add on 2014-5-19
	m_fProbeCorrect[0]=setting.value("ProbeSet/Probe1").toFloat();
	m_fProbeCorrect[1]=setting.value("ProbeSet/Probe2").toFloat();
	m_fProbeCorrect[2]=setting.value("ProbeSet/Probe3").toFloat();
	m_fProbeCorrect[3]=setting.value("ProbeSet/Probe4").toFloat();
	m_fProbeCorrect[4]=setting.value("ProbeSet/Probe5").toFloat();
	m_fProbeCorrect[5]=setting.value("ProbeSet/Probe6").toFloat();

	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe1->setText(QString::number(m_fProbeCorrect[0]));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe2->setText(QString::number(m_fProbeCorrect[1]));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe3->setText(QString::number(m_fProbeCorrect[2]));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe4->setText(QString::number(m_fProbeCorrect[3]));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe5->setText(QString::number(m_fProbeCorrect[4]));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditProbe6->setText(QString::number(m_fProbeCorrect[5]));

	m_nfeatureAverageHighCount = setting.value("ProbeSet/m_nfeatureAverageHighCount").toFloat();
	m_nfeatureAverageLowCount = setting.value("ProbeSet/m_nfeatureAverageLowCount").toFloat();
	m_fHighCorrect = setting.value("ProbeSet/m_fHighCorrect").toFloat();
	m_fLowCorrect = setting.value("ProbeSet/m_fLowCorrect").toFloat();
	m_fHighCorrect2 = setting.value("ProbeSet/m_fHighCorrect2").toFloat();
	m_fLowCorrect2 = setting.value("ProbeSet/m_fLowCorrect2").toFloat();

	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageHigh->setText(QString::number(m_nfeatureAverageHighCount));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditAverageLow->setText(QString::number(m_nfeatureAverageLowCount));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh->setText(QString::number(m_fHighCorrect));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow->setText(QString::number(m_fLowCorrect));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditHigh_2->setText(QString::number(m_fHighCorrect2));
	m_ParameterSetting.m_UltrasoundParameter.m_ProbeSet.ui.lineEditLow_2->setText(QString::number(m_fLowCorrect2));
}
void GuanTan::ReFreq()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe1->setText(QString(setting.value("ReFreq/Probe1").toString()));//读取重复频率
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe2->setText(QString(setting.value("ReFreq/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe3->setText(QString(setting.value("ReFreq/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe4->setText(QString(setting.value("ReFreq/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe5->setText(QString(setting.value("ReFreq/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe6->setText(QString(setting.value("ReFreq/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe7->setText(QString(setting.value("ReFreq/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe8->setText(QString(setting.value("ReFreq/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe9->setText(QString(setting.value("ReFreq/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe10->setText(QString(setting.value("ReFreq/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe11->setText(QString(setting.value("ReFreq/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe12->setText(QString(setting.value("ReFreq/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe13->setText(QString(setting.value("ReFreq/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe14->setText(QString(setting.value("ReFreq/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe15->setText(QString(setting.value("ReFreq/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe16->setText(QString(setting.value("ReFreq/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe17->setText(QString(setting.value("ReFreq/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe18->setText(QString(setting.value("ReFreq/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe19->setText(QString(setting.value("ReFreq/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe20->setText(QString(setting.value("ReFreq/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe21->setText(QString(setting.value("ReFreq/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe22->setText(QString(setting.value("ReFreq/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe23->setText(QString(setting.value("ReFreq/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe24->setText(QString(setting.value("ReFreq/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe25->setText(QString(setting.value("ReFreq/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe26->setText(QString(setting.value("ReFreq/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe27->setText(QString(setting.value("ReFreq/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe28->setText(QString(setting.value("ReFreq/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe29->setText(QString(setting.value("ReFreq/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe30->setText(QString(setting.value("ReFreq/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe31->setText(QString(setting.value("ReFreq/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe32->setText(QString(setting.value("ReFreq/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe33->setText(QString(setting.value("ReFreq/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe34->setText(QString(setting.value("ReFreq/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe35->setText(QString(setting.value("ReFreq/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_ReFreq.ui.lineEditProbe36->setText(QString(setting.value("ReFreq/Probe36").toString()));
}
void GuanTan::SoundSpeed()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe1->setText(QString(setting.value("SoundSpeed/Probe1").toString()));//读取声速
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe2->setText(QString(setting.value("SoundSpeed/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe3->setText(QString(setting.value("SoundSpeed/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe4->setText(QString(setting.value("SoundSpeed/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe5->setText(QString(setting.value("SoundSpeed/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe6->setText(QString(setting.value("SoundSpeed/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe7->setText(QString(setting.value("SoundSpeed/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe8->setText(QString(setting.value("SoundSpeed/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe9->setText(QString(setting.value("SoundSpeed/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe10->setText(QString(setting.value("SoundSpeed/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe11->setText(QString(setting.value("SoundSpeed/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe12->setText(QString(setting.value("SoundSpeed/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe13->setText(QString(setting.value("SoundSpeed/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe14->setText(QString(setting.value("SoundSpeed/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe15->setText(QString(setting.value("SoundSpeed/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe16->setText(QString(setting.value("SoundSpeed/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe17->setText(QString(setting.value("SoundSpeed/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe18->setText(QString(setting.value("SoundSpeed/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe19->setText(QString(setting.value("SoundSpeed/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe20->setText(QString(setting.value("SoundSpeed/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe21->setText(QString(setting.value("SoundSpeed/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe22->setText(QString(setting.value("SoundSpeed/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe23->setText(QString(setting.value("SoundSpeed/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe24->setText(QString(setting.value("SoundSpeed/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe25->setText(QString(setting.value("SoundSpeed/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe26->setText(QString(setting.value("SoundSpeed/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe27->setText(QString(setting.value("SoundSpeed/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe28->setText(QString(setting.value("SoundSpeed/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe29->setText(QString(setting.value("SoundSpeed/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe30->setText(QString(setting.value("SoundSpeed/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe31->setText(QString(setting.value("SoundSpeed/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe32->setText(QString(setting.value("SoundSpeed/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe33->setText(QString(setting.value("SoundSpeed/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe34->setText(QString(setting.value("SoundSpeed/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe35->setText(QString(setting.value("SoundSpeed/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditProbe36->setText(QString(setting.value("SoundSpeed/Probe36").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_SoundSpeed.ui.lineEditSpeed->setText(QString(setting.value("SoundSpeed/Speed").toString()));
}
void GuanTan::Width()
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe1->setText(QString(setting.value("Width/Probe1").toString()));//读取带宽
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe2->setText(QString(setting.value("Width/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe3->setText(QString(setting.value("Width/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe4->setText(QString(setting.value("Width/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe5->setText(QString(setting.value("Width/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe6->setText(QString(setting.value("Width/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe7->setText(QString(setting.value("Width/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe8->setText(QString(setting.value("Width/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe9->setText(QString(setting.value("Width/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe10->setText(QString(setting.value("Width/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe11->setText(QString(setting.value("Width/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe12->setText(QString(setting.value("Width/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe13->setText(QString(setting.value("Width/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe14->setText(QString(setting.value("Width/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe15->setText(QString(setting.value("Width/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe16->setText(QString(setting.value("Width/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe17->setText(QString(setting.value("Width/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe18->setText(QString(setting.value("Width/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe19->setText(QString(setting.value("Width/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe20->setText(QString(setting.value("Width/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe21->setText(QString(setting.value("Width/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe22->setText(QString(setting.value("Width/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe23->setText(QString(setting.value("Width/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe24->setText(QString(setting.value("Width/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe25->setText(QString(setting.value("Width/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe26->setText(QString(setting.value("Width/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe27->setText(QString(setting.value("Width/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe28->setText(QString(setting.value("Width/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe29->setText(QString(setting.value("Width/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe30->setText(QString(setting.value("Width/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe31->setText(QString(setting.value("Width/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe32->setText(QString(setting.value("Width/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe33->setText(QString(setting.value("Width/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe34->setText(QString(setting.value("Width/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe35->setText(QString(setting.value("Width/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe36->setText(QString(setting.value("Width/Probe36").toString()));
}

void GuanTan::ImpedanceSet()
{
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe1->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe2->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe3->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe4->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe5->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe6->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe7->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe8->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe9->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe10->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe11->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe12->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe13->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe14->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe15->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe16->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe17->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe18->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe19->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe20->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe21->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe22->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe23->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe24->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe25->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe26->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe27->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe28->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe29->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe30->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe31->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe32->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe33->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe34->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe35->setText(tr("高"));
	m_ParameterSetting.m_UltrasoundParameter.m_ImpedanceSet.ui.lineEditProbe36->setText(tr("高"));
}

void GuanTan::DeadZoneSet()			//从文件更新盲区参数到UI wangwei add on 2013-12-14
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.ui.lineEditStart->setText(QString(setting.value("DeadZone/m_nStartDeadZone").toString()));//盲区起始端
	m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.ui.lineEditEnd->setText(QString(setting.value("DeadZone/m_nEndDeadZone").toString()));//盲区末端
}

void GuanTan::Suppression()			//从文件更新抑制参数到UI wangwei add on 2013-12-14
{
	QSettings setting(m_ParameterSetting.m_qsUltrasoundparameter,QSettings::IniFormat);//读配置文件
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe1->setText(QString(setting.value("Suppression/Probe1").toString()));//读取抑制，由带宽改为抑制
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe2->setText(QString(setting.value("Suppression/Probe2").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe3->setText(QString(setting.value("Suppression/Probe3").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe4->setText(QString(setting.value("Suppression/Probe4").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe5->setText(QString(setting.value("Suppression/Probe5").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe6->setText(QString(setting.value("Suppression/Probe6").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe7->setText(QString(setting.value("Suppression/Probe7").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe8->setText(QString(setting.value("Suppression/Probe8").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe9->setText(QString(setting.value("Suppression/Probe9").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe10->setText(QString(setting.value("Suppression/Probe10").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe11->setText(QString(setting.value("Suppression/Probe11").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe12->setText(QString(setting.value("Suppression/Probe12").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe13->setText(QString(setting.value("Suppression/Probe13").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe14->setText(QString(setting.value("Suppression/Probe14").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe15->setText(QString(setting.value("Suppression/Probe15").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe16->setText(QString(setting.value("Suppression/Probe16").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe17->setText(QString(setting.value("Suppression/Probe17").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe18->setText(QString(setting.value("Suppression/Probe18").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe19->setText(QString(setting.value("Suppression/Probe19").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe20->setText(QString(setting.value("Suppression/Probe20").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe21->setText(QString(setting.value("Suppression/Probe21").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe22->setText(QString(setting.value("Suppression/Probe22").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe23->setText(QString(setting.value("Suppression/Probe23").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe24->setText(QString(setting.value("Suppression/Probe24").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe25->setText(QString(setting.value("Suppression/Probe25").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe26->setText(QString(setting.value("Suppression/Probe26").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe27->setText(QString(setting.value("Suppression/Probe27").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe28->setText(QString(setting.value("Suppression/Probe28").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe29->setText(QString(setting.value("Suppression/Probe29").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe30->setText(QString(setting.value("Suppression/Probe30").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe31->setText(QString(setting.value("Suppression/Probe31").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe32->setText(QString(setting.value("Suppression/Probe32").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe33->setText(QString(setting.value("Suppression/Probe33").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe34->setText(QString(setting.value("Suppression/Probe34").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe35->setText(QString(setting.value("Suppression/Probe35").toString()));
	m_ParameterSetting.m_UltrasoundParameter.m_Width.ui.lineEditProbe36->setText(QString(setting.value("Suppression/Probe36").toString()));
}

void GuanTan::DeadZoneShow()//盲区设置界面显示
{
	m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.show();
}

void GuanTan::DeadZoneYes()//盲区确定
{
	m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.close();
	m_bDeadZone = TRUE;
}

void GuanTan::DeadZoneNo()//盲区取消
{
	m_ParameterSetting.m_UltrasoundParameter.m_DeadZone.close();
	m_bDeadZone = FALSE;
}

void GuanTan::PrintScreen()//拷屏
{
	QPrinter printer(QPrinter::ScreenResolution);
	printer.setOrientation(QPrinter::Landscape);
	QPrintPreviewDialog preview(&printer,this);
	preview.setWindowTitle(tr("界面打印预览"));
	preview.resize(printer.width(),printer.height());
	PaintScreen(&printer);
// 	connect(&preview, SIGNAL(paintRequested(QPrinter *)),this,SLOT(PaintScreen(QPrinter *)));
// 	preview.exec();
}
void GuanTan::PaintScreen(QPrinter *printer)	//界面打印绘制
{
	QPainter p(printer);
	QPixmap pixmap = QPixmap::grabWidget(this);
	pixmap.save("D:/a.bmp","bmp");
	float fWidth = 1.82;								//默认分辨率 1920*1080
	float fHeight = 1.6;
	float fLeft = 60;
	float fTop = 100;
	if (m_nActScreenX == 1600 && m_nActScreenY == 900)	//如果是1600*900的分辨率
	{
		fWidth = 1.52;
		fHeight = 1.3;
		fLeft = 55;
		fTop = 80;
	}
	p.begin(printer);
	p.setViewport(0,0,printer->pageRect().width()/fWidth,printer->pageRect().height()/fHeight);	//调整比例
	p.drawPixmap(QPoint(fLeft,fTop),pixmap);	//打印截图
}
void GuanTan::UserManagementShow()//用户管理显示
{
	QString strUser = "./Login.ini";
	QSettings setting(strUser,QSettings::IniFormat);//读配置文件
	int nTemp = m_UserManagement.ui.comboBoxUser->count();
	//操作工的初始化
	for (int i = 0;i < nTemp;i++)
	{
		m_UserManagement.ui.comboBoxUser->removeItem(0);
	}
	for (int i = 1;i < 20;i++)
	{
		if (setting.value("admin/" + QString::number(i)).toString() != NULL)
		{
			m_UserManagement.ui.comboBoxUser->addItem(setting.value("admin/" + QString::number(i)).toString());
		}
	}
	m_UserManagement.ui.comboBoxUser->setCurrentIndex(0);
	m_UserManagement.Lock();
	m_UserManagement.show();	
}
void GuanTan::WriteEddyCurrent()
{
	QString	strPath = "./Order/" + m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text() + ".ini";
	QSettings settingsEddyCurrent(strPath, QSettings::IniFormat);
	settingsEddyCurrent.beginGroup(m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text());
	if (settingsEddyCurrent.value("strEddyCurrent").toString() == NULL)//为空则说明文件中没有记录,可以新建
	{
		QDateTime dt;  
		QTime time;  
		QDate date;  
		dt.setTime(time.currentTime());  
		dt.setDate(date.currentDate());  
		QString currentDate = dt.toString("yyyy-MM-dd-hh-mm");
		QDir *temp = new QDir;
		strEddyCurrent = "//192.168.1.112/RECORDER//" + currentDate;
		QString strFile = "//192.168.1.112/RECORDER/" + currentDate + "/info.txt";
		bool exist = temp->exists(strEddyCurrent);
		if(exist)
			QMessageBox::information(this,tr("发送"),tr("数据已发送到已有文件夹") + QString(currentDate) + tr("下的info.txt中" ));
		else
		{
			bool ok = temp->mkdir(strEddyCurrent);
			if( ok )
				QMessageBox::information(this,tr("发送"),tr("数据已发送到新建文件夹") + QString(currentDate) + tr("下的info.txt中" ));
			else
				QMessageBox::warning(this,tr("发送"),tr("当前设备还没有与涡流设备取得连接!请检查网线是否连接正常,涡流设备的IP地址是否为:192.168.1.112"));
		}
		QFile file(strFile);
		if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		QTextStream out(&file);
		out << m_ParameterSetting.m_OrderParameter.ui.lineEditOrderNumber->text() << "\n";
		out << m_ParameterSetting.m_OrderParameter.ui.lineEditSteelNumber->text() << "\n";
		out << m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelDia->currentText() << "\n";
		out << m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelLength->currentText() << "\n";
		out << m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelPly->currentText() << "\n";
		out << m_ParameterSetting.m_OrderParameter.ui.comboBoxSteelRank->currentText() << "\n";
		//写入当前订单涡流文件夹路径
		settingsEddyCurrent.setValue("strEddyCurrent",strEddyCurrent);
		settingsEddyCurrent.endGroup();
	}
	else
	{
		QMessageBox::information(this,tr("发送"),tr("此订单对应的涡流文件已经存在,路径为:") + settingsEddyCurrent.value("strEddyCurrent").toString());
		settingsEddyCurrent.endGroup();
	}
}
void GuanTan::ReadEddyCurrent()
{
	QFile file(strEddyCurrent + "/PIECES.txt"); 
	QTextStream out(&file);
	if(!file.open(QIODevice::ReadOnly | QIODevice::Text)) 
	{  
		QMessageBox::warning(this,tr("读取涡流数据"),tr("文件不存在！请检查与涡流设备的链接是否正常或者涡流设备的检测是否完成！"));
	}
	else
	{
		while(!file.atEnd())
		{
			QByteArray line = file.readLine();  
			QString strTemp(tr(line));  
			QString str = strTemp.left(strTemp.size() - 1);
			QString strShow;
			int nFirst;
			if (str.indexOf(QRegExp("TOTAL"),0) != -1)					//
			{
				nFirst = str.lastIndexOf(QRegExp(QString(":")),str.size()-1);
				strShow = str.right(str.size()-1-nFirst);
				m_nTOTAL = strShow.toInt();
			}
			else if (str.indexOf(QRegExp("ACCEPTS"),0) != -1)					//
			{
				nFirst = str.lastIndexOf(QRegExp(QString(":")),str.size()-1);
				strShow = str.right(str.size()-1-nFirst);
				QString strRight = strShow.right(5);
				m_strACCEPTS_PERSENT = strRight;
				strRight = strRight.left(4);
				QString strLeft = strShow.left(6);
				m_nACCEPTS_CONT = strLeft.toInt();
				m_fACCEPTS_PERSENT = ((float)strRight.toFloat() / 100.00);
			}
			else if (str.indexOf(QRegExp("REJECTS"),0) != -1)					//
			{
				nFirst = str.lastIndexOf(QRegExp(QString(":")),str.size()-1);
				strShow = str.right(str.size()-1-nFirst);
				QString strRight = strShow.right(5);
				m_strREJECTS_PERSENT = strRight;
				strRight = strRight.left(4);
				QString strLeft = strShow.left(6);
				m_nREJECTS_CONT = strLeft.toInt();
				m_fREJECTS_PERSENT = ((float)strRight.toFloat() / 100.00);
			}
		}
		QMessageBox::information(this,tr("读取涡流数据"),tr("涡流数据读取成功！"));
	}
}

void GuanTan::keyPressEvent(QKeyEvent *event)
{
	if (event->key() == Qt::Key_Escape) 
	{  
	}
}

void GuanTan::DrawInVFeature(int i)
{
	QRect rectVFeature(widgetOne->rect().left() + 289,widgetOne->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + 3,
		widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QPainter painterVFeature(&bmpVFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex ;

	if (wSoftChannelIndex == 0 || wSoftChannelIndex == 2)
	{
		QPointF pt[6];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[2].setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt[3].setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt[4].setX(m_fEncipheror - PROBEBOX_DISTANCE5);
		pt[5].setX(m_fEncipheror - PROBEBOX_DISTANCE6);

		pt[0].setY(g_stFeatrueInfo[i].stData1To6[0].stGateFeature[1].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData1To6[1].stGateFeature[1].wFlawHeight);
		pt[2].setY(g_stFeatrueInfo[i].stData1To6[2].stGateFeature[1].wFlawHeight);
		pt[3].setY(g_stFeatrueInfo[i].stData1To6[3].stGateFeature[1].wFlawHeight);
		pt[4].setY(g_stFeatrueInfo[i].stData1To6[4].stGateFeature[1].wFlawHeight);
		pt[5].setY(g_stFeatrueInfo[i].stData1To6[5].stGateFeature[1].wFlawHeight);

		for (int j = 0;j < 6;j++)			// 1盒没有探伤探头
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

#if SAVE_PROBE_FEATURE
			if (j == 0)
			{
				m_vectorProbe1.push_back(pt[j]);
			}
			else if (j == 1)
			{
				m_vectorProbe2.push_back(pt[j]);
			}
			else if (j == 2)
			{
				m_vectorProbe3.push_back(pt[j]);
			}
			else if (j == 3)
			{
				m_vectorProbe4.push_back(pt[j]);
			}
			else if (j == 4)
			{
				m_vectorProbe5.push_back(pt[j]);
			}
			else if (j == 5)
			{
				m_vectorProbe6.push_back(pt[j]);
			}
#endif

			///////////////////////////////////

			int index = 6 * wSoftChannelIndex + j;	// 0 1 2 3 4 5; 12 13 14 15 16 17
			if (m_InVMap.contains(index))					
			{
				m_InVMap[index].push_back(pt[j]);

				if (m_InVMap[index].size() >= m_nCutNoise2)
				{
					double sub = 0.0;
					VectorPoint vectortemp = m_InVMap.value(index);

					for (int i = 0; i < m_nCutNoise2; ++i)
					{
						sub += vectortemp.value(i).y();
					}

					sub = sub / static_cast<double>(m_nCutNoise2);
					pt[j].setY(sub);
					vectortemp.erase(vectortemp.begin());
					m_InVMap.insert(index, vectortemp);
				}
			}
			else
			{		
				VectorPoint vector;
				vector.push_back(pt[j]);
				m_InVMap.insert(index, vector);
			}
			
			//////////////////////////////////

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}						
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - 1 - m_nEndDeadZone))
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}

			if (nGridNum > m_vectorInVFeature.size())
			{
				while(nGridNum > m_vectorInVFeature.size())
				{
					m_vectorInVFeature.push_back(pt[j]);
				}
				
				if ( nGridNum > DRAW_BSCAN_DELAY_3 && j == 0) 
				{
					if (nGridNum - DRAW_BSCAN_DELAY_2 < m_nStartDeadZone)
					{
						painterVFeature.setPen(Qt::blue);
						float x1 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y1 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
						float x2 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y2 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
						painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
					}
					else if(m_dwProbeBoxUpDown == 1)
					{
						if ((nGridNum - DRAW_BSCAN_DELAY_2) > (m_nRealSteelL - m_nEndDeadZone))
						{
							painterVFeature.setPen(Qt::blue);
							float x1 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y1 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
							float x2 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y2 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
							painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
						}
						else
						{
							painterVFeature.setPen(Qt::green);
							float x1 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y1 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
							float x2 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y2 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
							painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
							if (m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
							{
								m_bInFeacher = TRUE;
							}
						}
					}
					else
					{
						painterVFeature.setPen(Qt::green);
						float x1 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y1 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
						float x2 = m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y2 = rectVFeature.height() - float(m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
						painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
						if (m_vectorInVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
						{
							m_bInFeacher = TRUE;
						}
					}
				}
			} 
			else
			{
				if (pt[j].y() > m_vectorInVFeature[nGridNum - 1].y())
				{                 
					m_vectorInVFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}
}

void GuanTan::DrawOutVFeature(int i)
{
	QRect rectVFeature(widgetOne->rect().left() + 289,widgetOne->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + 3,
		widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QPainter painterVFeature(&bmpVFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex ;
	if (wSoftChannelIndex == 0 || wSoftChannelIndex == 2)
	{
		QPointF pt[6];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[2].setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt[3].setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt[4].setX(m_fEncipheror - PROBEBOX_DISTANCE5);
		pt[5].setX(m_fEncipheror - PROBEBOX_DISTANCE6);

		pt[0].setY(g_stFeatrueInfo[i].stData1To6[0].stGateFeature[2].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData1To6[1].stGateFeature[2].wFlawHeight);
		pt[2].setY(g_stFeatrueInfo[i].stData1To6[2].stGateFeature[2].wFlawHeight);
		pt[3].setY(g_stFeatrueInfo[i].stData1To6[3].stGateFeature[2].wFlawHeight);
		pt[4].setY(g_stFeatrueInfo[i].stData1To6[4].stGateFeature[2].wFlawHeight); 
		pt[5].setY(g_stFeatrueInfo[i].stData1To6[5].stGateFeature[2].wFlawHeight);

		for (int j = 0;j < 6;j++)
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

#if SAVE_PROBE_FEATURE
			if (j == 0)
			{
				m_vectorProbe7.push_back(pt[j]);
			}
			else if (j == 1)
			{
				m_vectorProbe8.push_back(pt[j]);
			}
			else if (j == 2)
			{
				m_vectorProbe9.push_back(pt[j]);
			}
			else if (j == 3)
			{
				m_vectorProbe10.push_back(pt[j]);
			}
			else if (j == 4)
			{
				m_vectorProbe11.push_back(pt[j]);
			}
			else if (j == 5)
			{
				m_vectorProbe12.push_back(pt[j]);
			}
#endif

			int index = 6 * wSoftChannelIndex + j;
			if (m_OutVMap.contains(index))					
			{
				m_OutVMap[index].push_back(pt[j]);

				if (m_OutVMap[index].size() >= m_nCutNoise2)
				{
					double sub = 0.0;
					VectorPoint vectortemp = m_OutVMap.value(index);

					for (int i = 0; i < m_nCutNoise2; ++i)
					{
						sub += vectortemp.value(i).y();
					}

					sub = sub / static_cast<double>(m_nCutNoise2);
					pt[j].setY(sub);
					vectortemp.erase(vectortemp.begin());
					m_OutVMap.insert(index, vectortemp);
				}
			}
			else
			{		
				VectorPoint vector;
				vector.push_back(pt[j]);
				m_OutVMap.insert(index, vector);
			}
			//////////////////////////////////

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}

			if (nGridNum > m_vectorOutVFeature.size())
			{
				while(nGridNum > m_vectorOutVFeature.size())
				{
					m_vectorOutVFeature.push_back(pt[j]);
				}
				
				if ( nGridNum > DRAW_BSCAN_DELAY_3 && j == 0) 
				{ 
					if (nGridNum - DRAW_BSCAN_DELAY_2 < m_nStartDeadZone)
					{
						painterVFeature.setPen(Qt::blue);
						float x1 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y1 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
						float x2 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y2 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
						painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
					}
					else if(m_dwProbeBoxUpDown == 1)
					{
						if ((nGridNum - DRAW_BSCAN_DELAY_2) > (m_nRealSteelL - m_nEndDeadZone))
						{
							painterVFeature.setPen(Qt::blue);
							float x1 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y1 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
							float x2 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y2 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
							painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
						}
						else
						{
							painterVFeature.setPen(Qt::red);
							float x1 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y1 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
							float x2 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
							float y2 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
							painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
							if (m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
							{
								m_bOutFeacher = TRUE;
							}
						}
					}
					else
					{
						painterVFeature.setPen(Qt::red);
						float x1 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y1 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectVFeature.height();
						float x2 = m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectVFeature.width();
						float y2 = rectVFeature.height() - float(m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectVFeature.height();
						painterVFeature.drawLine(QPointF(x1,y1 - 5),QPointF(x2,y2 - 5));
						if (m_vectorOutVFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
						{
							m_bOutFeacher = TRUE;
						}
					}
				}
			}
			else
			{
				if (pt[j].y() > m_vectorOutVFeature[nGridNum - 1].y())
				{                 
					m_vectorOutVFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}
}

void GuanTan::DrawInHFearure(int i)		//内部横向
{
	QRect rectHFeature(widgetTwo->rect().left() + 289,widgetTwo->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + 6,widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QPainter painterHFeature(&bmpHFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex;

	if (wSoftChannelIndex == 1 || wSoftChannelIndex == 3)
	{
		QPointF pt[6];
		painterHFeature.setPen(Qt::green);
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[2].setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt[3].setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt[4].setX(m_fEncipheror - PROBEBOX_DISTANCE5);
		pt[5].setX(m_fEncipheror - PROBEBOX_DISTANCE6);

		pt[0].setY(g_stFeatrueInfo[i].stData1To6[0].stGateFeature[1].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData1To6[1].stGateFeature[1].wFlawHeight);
		pt[2].setY(g_stFeatrueInfo[i].stData1To6[2].stGateFeature[1].wFlawHeight);
		pt[3].setY(g_stFeatrueInfo[i].stData1To6[3].stGateFeature[1].wFlawHeight);
		pt[4].setY(g_stFeatrueInfo[i].stData1To6[4].stGateFeature[1].wFlawHeight);
		pt[5].setY(g_stFeatrueInfo[i].stData1To6[5].stGateFeature[1].wFlawHeight);

		for (int j = 0;j < 6;j++)
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

#if SAVE_PROBE_FEATURE
			if (j == 0)
			{
				m_vectorProbe13.push_back(pt[j]);
			}
			else if (j == 1)
			{
				m_vectorProbe14.push_back(pt[j]);
			}
			else if (j == 2)
			{
				m_vectorProbe15.push_back(pt[j]);
			}
			else if (j == 3)
			{
				m_vectorProbe16.push_back(pt[j]);
			}
			else if (j == 4)
			{
				m_vectorProbe17.push_back(pt[j]);
			}
			else if (j == 5)
			{
				m_vectorProbe18.push_back(pt[j]);
			}
#endif

			int index = 6 * wSoftChannelIndex + j;
			if (m_InHMap.contains(index))					
			{
				m_InHMap[index].push_back(pt[j]);

				if (m_InHMap[index].size() >= m_nCutNoise)
				{
					double sub = 0.0;
					VectorPoint vectortemp = m_InHMap.value(index);

					for (int i = 0; i < m_nCutNoise; ++i)
					{
						sub += vectortemp[i].y();
					}

					sub = sub / static_cast<double>(m_nCutNoise);
					pt[j].setY(sub);
					vectortemp.erase(vectortemp.begin());
					m_InHMap.insert(index, vectortemp);
				}
			}
			else
			{		
				VectorPoint vector;
				vector.push_back(pt[j]);
				m_InHMap.insert(index, vector);
			}

			//////////////////////////////////

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}

			if (nGridNum > m_vectorInHFeature.size())
			{
				while (nGridNum > m_vectorInHFeature.size())
				{
					m_vectorInHFeature.push_back(pt[j]);
				}
				
				if ( nGridNum > DRAW_BSCAN_DELAY_3 && j == 0) 
				{
					if (nGridNum - DRAW_BSCAN_DELAY_2 < m_nStartDeadZone)
					{
						painterHFeature.setPen(Qt::blue);
						float x1 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y1 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height() - 2;
						float x2 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y2 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height() - 2;
						painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
					}
					else if(m_dwProbeBoxUpDown == 1)
					{
						if ((nGridNum - DRAW_BSCAN_DELAY_2) > (m_nRealSteelL - m_nEndDeadZone))
						{
							painterHFeature.setPen(Qt::blue);
							float x1 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y1 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height() - 2;
							float x2 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y2 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height() - 2;
							painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
						}
						else
						{
							painterHFeature.setPen(Qt::green);
							float x1 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y1 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height() - 2;
							float x2 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y2 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height() - 2;
							painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
							if (m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
							{
								m_bInFeacher = TRUE;
							}
						}
					}
					else
					{
						painterHFeature.setPen(Qt::green);
						float x1 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y1 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height() - 2;
						float x2 = m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y2 = rectHFeature.height() - float(m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height() - 2;
						painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
						if (m_vectorInHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
						{
							m_bInFeacher = TRUE;
						}
					}
				}
			}
			else
			{
				if (pt[j].y() > m_vectorInHFeature[nGridNum - 1].y())
				{                 
					m_vectorInHFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}
}

void GuanTan::DrawOutHFearure(int i)		//外部横向
{
	QRect rectHFeature(widgetTwo->rect().left() + 289,widgetTwo->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + 6,widgetHRuler->rect().width() - 35,widgetOne->rect().height());
	QPainter painterHFeature(&bmpHFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex ;
	if (wSoftChannelIndex == 1 || wSoftChannelIndex == 3)
	{
		QPointF pt[6];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[2].setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt[3].setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt[4].setX(m_fEncipheror - PROBEBOX_DISTANCE5);
		pt[5].setX(m_fEncipheror - PROBEBOX_DISTANCE6);

		pt[0].setY(g_stFeatrueInfo[i].stData1To6[0].stGateFeature[2].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData1To6[1].stGateFeature[2].wFlawHeight);
		pt[2].setY(g_stFeatrueInfo[i].stData1To6[2].stGateFeature[2].wFlawHeight);
		pt[3].setY(g_stFeatrueInfo[i].stData1To6[3].stGateFeature[2].wFlawHeight);
		pt[4].setY(g_stFeatrueInfo[i].stData1To6[4].stGateFeature[2].wFlawHeight);
		pt[5].setY(g_stFeatrueInfo[i].stData1To6[5].stGateFeature[2].wFlawHeight);

		for (int j = 0;j < 6;j++)
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

#if SAVE_PROBE_FEATURE
			if (j == 0)
			{
				m_vectorProbe19.push_back(pt[j]);
			}
			else if (j == 1)
			{
				m_vectorProbe20.push_back(pt[j]);
			}
			else if (j == 2)
			{
				m_vectorProbe21.push_back(pt[j]);
			}
			else if (j == 3)
			{
				m_vectorProbe22.push_back(pt[j]);
			}
			else if (j == 4)
			{
				m_vectorProbe23.push_back(pt[j]);
			}
			else if (j == 5)
			{
				m_vectorProbe24.push_back(pt[j]);
			}
#endif

			int index = 6 * wSoftChannelIndex + j;
			if (m_OutHMap.contains(index))					
			{
				m_OutHMap[index].push_back(pt[j]);

				if (m_OutHMap[index].size() >= m_nCutNoise)
				{
					double sub = 0.0;
					VectorPoint vectortemp = m_OutHMap.value(index);

					for (int i = 0; i < m_nCutNoise; ++i)
					{
						sub += vectortemp[i].y();
					}

					sub = sub / static_cast<double>(m_nCutNoise);
					pt[j].setY(sub);
					vectortemp.erase(vectortemp.begin());
					m_OutHMap.insert(index, vectortemp);
				}
			}
			else
			{		
				VectorPoint vector;
				vector.push_back(pt[j]);
				m_OutHMap.insert(index, vector);
			}

			//////////////////////////////////

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + wSoftChannelIndex;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}

			if (nGridNum > m_vectorOutHFeature.size())
			{
				while(nGridNum > m_vectorOutHFeature.size())
				{
					m_vectorOutHFeature.push_back(pt[j]);
				}

				if ( nGridNum > DRAW_BSCAN_DELAY_3 && j == 0) 
				{
					if (nGridNum - DRAW_BSCAN_DELAY_2 < m_nStartDeadZone)
					{
						painterHFeature.setPen(Qt::blue);
						float x1 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y1 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height();
						float x2 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y2 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height();
						painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
					}
					else if(m_dwProbeBoxUpDown == 1)
					{
						if ((nGridNum - DRAW_BSCAN_DELAY_2) > (m_nRealSteelL - m_nEndDeadZone))
						{
							painterHFeature.setPen(Qt::blue);
							float x1 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y1 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height();
							float x2 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y2 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height();
							painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
						}
						else
						{
							painterHFeature.setPen(Qt::red);
							float x1 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y1 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height();
							float x2 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
							float y2 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height();
							painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
							if (m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
							{
								m_bOutFeacher = TRUE;
							}
						}
					}
					else
					{
						painterHFeature.setPen(Qt::red);
						float x1 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y1 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectHFeature.height();
						float x2 = m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectHFeature.width();
						float y2 = rectHFeature.height() - float(m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectHFeature.height();
						painterHFeature.drawLine(QPointF(x1,y1 - 2),QPointF(x2,y2 - 2));
						if (m_vectorOutHFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
						{
							m_bOutFeacher = TRUE;
						}
					}
				}
			}
			else
			{
				if (pt[j].y() > m_vectorOutHFeature[nGridNum - 1].y())
				{                 
					m_vectorOutHFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}
}

void GuanTan::DrawBadCoupleFeature(int i)//画耦合缺陷图
{
	QRect rectBadCoupleFeature(widgetFive->rect().left()+289,widgetFive->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+widgetFour->rect().height()+15,
		widgetFive->rect().width()-35,widgetFive->rect().height());
	QPainter painterBadCoupleFeature(&bmpBadCoupleFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex ;

	if (wSoftChannelIndex == 0)
	{	
		QPointF pt[2];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE5);
		pt[0].setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[3].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData7To8[1].stFlawFeature.stGateFeature[3].wFlawHeight);

		for (int j = 0;j < 2;j++)
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

#if SAVE_BOX_COUPLE
			if (j == 0) {
				m_vecBadCoupleBox1.push_back(pt[0]);
			} else {
				m_vecBadCoupleBox5.push_back(pt[1]);
			}
#endif

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() < BADCOUPLE_RANK)
					{//>>wangwei modify on 2014-04-28添加耦合不良优化功能
						if (j == 0)
						{
							m_nBadCoupleBox[0]++;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[4]++;
						}

						if (m_nBadCoupleBox[0] > m_nBadCoupleBoxNum)
						{	
							if (!m_bCouplingAlarm[30])
							{
								CouplingAlarm(0, 1);//耦合报警
								CouplingAlarm(1, 1);
								CouplingAlarm(2, 1);
								CouplingAlarm(3, 1);
								CouplingAlarm(24, 1);
								CouplingAlarm(30, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
						else if (m_nBadCoupleBox[4] > m_nBadCoupleBoxNum)
						{
							if (!m_bCouplingAlarm[34])
							{
								CouplingAlarm(16, 1);//耦合报警
								CouplingAlarm(17, 1);
								CouplingAlarm(18, 1);
								CouplingAlarm(19, 1);
								CouplingAlarm(28, 1);
								CouplingAlarm(34, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
					}
					else
					{
						if (j == 0)
						{
							m_nBadCoupleBox[0] = 0;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[4] = 0;
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() < BADCOUPLE_RANK)
					{
						if (j == 0)
						{
							m_nBadCoupleBox[0]++;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[4]++;
						}

						if (m_nBadCoupleBox[0] > m_nBadCoupleBoxNum)
						{			
							if (!m_bCouplingAlarm[30])
							{
								CouplingAlarm(0, 1);//耦合报警
								CouplingAlarm(1, 1);
								CouplingAlarm(2, 1);
								CouplingAlarm(3, 1);
								CouplingAlarm(24, 1);
								CouplingAlarm(30, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
						if (m_nBadCoupleBox[4] > m_nBadCoupleBoxNum)
						{					
							if (!m_bCouplingAlarm[34])
							{
								CouplingAlarm(16, 1);//耦合报警
								CouplingAlarm(17, 1);
								CouplingAlarm(18, 1);
								CouplingAlarm(19, 1);
								CouplingAlarm(28, 1);
								CouplingAlarm(34, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
					}
					else
					{
						if (j == 0)
						{
							m_nBadCoupleBox[0] = 0;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[4] = 0;
						}
					}
				}
			}

			if (nGridNum > m_vectorBadCoupleFeature.size())
			{				
				while(nGridNum > m_vectorBadCoupleFeature.size())
				{
					m_vectorBadCoupleFeature.push_back(pt[j]);
				}

				if (j == 0)
				{
					if (nGridNum > DRAW_BSCAN_DELAY_2) 
					{
						float x1 = m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
						float y1 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
						float x2 = m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
						float y2 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;

						if ((m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y() < BADCOUPLE_RANK)
							&&(m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() < BADCOUPLE_RANK)
							&&(m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y() < BADCOUPLE_RANK)) //耦合不良的画图判断
						{
							if (nGridNum - DRAW_BSCAN_DELAY_1 < m_nStartDeadZone)
							{
								float x1 = m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
								float y1 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
								float x2 = m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
								float y2 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
								painterBadCoupleFeature.setPen(Qt::blue);
								painterBadCoupleFeature.drawRect(x1,rectBadCoupleFeature.height()/2 - 5 ,1,10);
							}
							else if(m_dwProbeBoxUpDown == 1)
							{
								if ((nGridNum - DRAW_BSCAN_DELAY_1) > (m_nRealSteelL - m_nEndDeadZone))
								{
									float x1 = m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
									float y1 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
									float x2 = m_vectorBadCoupleFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectBadCoupleFeature.width();
									float y2 = rectBadCoupleFeature.height() - rectBadCoupleFeature.height()/2 - 5;
									painterBadCoupleFeature.setPen(Qt::blue);
									painterBadCoupleFeature.drawRect(x1,rectBadCoupleFeature.height()/2 - 5 ,1,10);
								}
								else
								{
									painterBadCoupleFeature.setPen(Qt::red);
									painterBadCoupleFeature.drawRect(x1,rectBadCoupleFeature.height()/2 - 5 ,1,10);
								}
							}
							else
							{
								painterBadCoupleFeature.setPen(Qt::red);
								painterBadCoupleFeature.drawRect(x1,rectBadCoupleFeature.height()/2 - 5 ,1,10);
							}
						}

						if (nGridNum - DRAW_BSCAN_DELAY_1 < m_nStartDeadZone)//耦合良好的判断
						{
							painterBadCoupleFeature.setPen(Qt::blue);
							painterBadCoupleFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
						}
						else if(m_dwProbeBoxUpDown == 1)
						{
							if ((nGridNum - DRAW_BSCAN_DELAY_1) > (m_nRealSteelL - m_nEndDeadZone))
							{
								painterBadCoupleFeature.setPen(Qt::blue);
								painterBadCoupleFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
							}
							else
							{
								painterBadCoupleFeature.setPen(Qt::green);
								painterBadCoupleFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
							}
						}
						else
						{
							painterBadCoupleFeature.setPen(Qt::green);
							painterBadCoupleFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
						}
					}
				}
			}
			else
			{
				if (pt[j].y() < m_vectorBadCoupleFeature[nGridNum - 1].y())
				{                 
					m_vectorBadCoupleFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}

	if (wSoftChannelIndex == 1)
	{	
		QPointF pt[2];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE6);
		pt[0].setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[3].wFlawHeight);	
		pt[1].setY(g_stFeatrueInfo[i].stData7To8[1].stFlawFeature.stGateFeature[3].wFlawHeight);

		for (int j = 0; j < 2; j++)	// fpga 屏蔽6盒j=1,否则j=2	
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

#if SAVE_BOX_COUPLE
			if (j == 0) {
				m_vecBadCoupleBox2.push_back(pt[0]);
			} else {
				m_vecBadCoupleBox6.push_back(pt[1]);
			}
#endif

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() < BADCOUPLE_RANK)
					{
						if (j == 0)
						{
							m_nBadCoupleBox[1]++;
						}
						else
						{
							m_nBadCoupleBox[5]++;
						}
						
						if (m_nBadCoupleBox[1] > m_nBadCoupleBoxNum)
						{			
							if (!m_bCouplingAlarm[31])
							{
								CouplingAlarm(4, 1);//耦合报警
								CouplingAlarm(5, 1);
								CouplingAlarm(6, 1);
								CouplingAlarm(7, 1);
								CouplingAlarm(25, 1);
								CouplingAlarm(31, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
						else if (m_nBadCoupleBox[5] > m_nBadCoupleBoxNum)
						{
							if (!m_bCouplingAlarm[35])
							{
								CouplingAlarm(20, 1);//耦合报警
								CouplingAlarm(21, 1);
								CouplingAlarm(22, 1);
								CouplingAlarm(23, 1);
								CouplingAlarm(29, 1);
								CouplingAlarm(35, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
					}
					else
					{
						if (j == 0)
						{
							m_nBadCoupleBox[1] = 0;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[5] = 0;
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() < BADCOUPLE_RANK)
					{
						if (j == 0)
						{
							m_nBadCoupleBox[1]++;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[5]++;
						}
						
						if (m_nBadCoupleBox[1] > m_nBadCoupleBoxNum)
						{			
							if (!m_bCouplingAlarm[31])
							{
								CouplingAlarm(4, 1);//耦合报警
								CouplingAlarm(5, 1);
								CouplingAlarm(6, 1);
								CouplingAlarm(7, 1);
								CouplingAlarm(25, 1);
								CouplingAlarm(31, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
						else if (m_nBadCoupleBox[5] > m_nBadCoupleBoxNum)
						{
							if (!m_bCouplingAlarm[35])
							{
								CouplingAlarm(20, 1);//耦合报警
								CouplingAlarm(21, 1);
								CouplingAlarm(22, 1);
								CouplingAlarm(23, 1);
								CouplingAlarm(29, 1);
								CouplingAlarm(35, 1);
							}
							
							m_bBadCoupleOrNo = 1;
						}
					}
					else
					{
						if (j == 0)
						{
							m_nBadCoupleBox[1] = 0;
						}
						else if (j == 1)
						{
							m_nBadCoupleBox[5] = 0;
						}
					}
				}
			}

			if (nGridNum > m_vectorBadCoupleFeature.size())
			{
				m_vectorBadCoupleFeature.push_back(pt[j]);
			}
			else
			{
				if (pt[j].y() < m_vectorBadCoupleFeature[nGridNum - 1].y())
				{                 
					m_vectorBadCoupleFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}

	if (wSoftChannelIndex == 2) // 三盒
	{
		QPointF pt;
		pt.setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt.setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[3].wFlawHeight);

		if (pt.x() <= 0)
		{
			return;
		}

		int nGridNum = pt.x() / GRID_WIDTH + 1;
		pt.setX(nGridNum);

#if SAVE_BOX_COUPLE
		m_vecBadCoupleBox3.push_back(pt);
#endif

		if (!m_bSteelLengthIsValue)
		{
			if (pt.x() > m_nStartDeadZone)
			{
				if (pt.y() < BADCOUPLE_RANK)
				{
					m_nBadCoupleBox[2]++;

					if (m_nBadCoupleBox[2] > m_nBadCoupleBoxNum)
					{		
						if (!m_bCouplingAlarm[32])
						{
							CouplingAlarm(8, 1);//耦合报警
							CouplingAlarm(9, 1);
							CouplingAlarm(10, 1);
							CouplingAlarm(11, 1);
							CouplingAlarm(26, 1);
							CouplingAlarm(32, 1);
						}
						
						m_bBadCoupleOrNo = 1;
					}
				}
				else
				{
					m_nBadCoupleBox[2] = 0;
				}
			}
		}
		else //wangwei add on 2013-12-21 探头盒抬起后停止检测当前盒子的耦合不良
		{
			if (pt.x() < (m_nRealSteelL - m_nEndDeadZone))
			{
				if (pt.y() < BADCOUPLE_RANK)
				{
					m_nBadCoupleBox[2]++;

					if (m_nBadCoupleBox[2] > m_nBadCoupleBoxNum)
					{
						if (!m_bCouplingAlarm[32])
						{
							CouplingAlarm(8, 1);//耦合报警
							CouplingAlarm(9, 1);
							CouplingAlarm(10, 1);
							CouplingAlarm(11, 1);
							CouplingAlarm(26, 1);
							CouplingAlarm(32, 1);
						}
						
						m_bBadCoupleOrNo = 1;
					}
				}
				else
				{
					m_nBadCoupleBox[2] = 0;
				}
			}
		}

		if (nGridNum > m_vectorBadCoupleFeature.size())
		{
			m_vectorBadCoupleFeature.push_back(pt);
		}
		else
		{
			if (pt.y() < m_vectorBadCoupleFeature[nGridNum - 1].y())
			{                 
				m_vectorBadCoupleFeature[nGridNum - 1].setY(pt.y());
			}
		}

	}

	if (wSoftChannelIndex == 3)
	{
		QPointF pt;
		pt.setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt.setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[3].wFlawHeight);

		if (pt.x() <= 0)
		{
			return;
		}

		int nGridNum = pt.x() / GRID_WIDTH + 1;
		pt.setX(nGridNum);

#if SAVE_BOX_COUPLE
		m_vecBadCoupleBox4.push_back(pt);
#endif

		if (!m_bSteelLengthIsValue)
		{
			if (pt.x() > m_nStartDeadZone)
			{
				if (pt.y() < BADCOUPLE_RANK)
				{
					m_nBadCoupleBox[3]++;

					if (m_nBadCoupleBox[3] > m_nBadCoupleBoxNum)
					{
						if (!m_bCouplingAlarm[33])
						{
							CouplingAlarm(12, 1);//耦合报警
							CouplingAlarm(13, 1);
							CouplingAlarm(14, 1);
							CouplingAlarm(15, 1);
							CouplingAlarm(27, 1);
							CouplingAlarm(33, 1);
						}
						
						m_bBadCoupleOrNo = 1;
					}
				}
				else
				{
					m_nBadCoupleBox[3] = 0;
				}
			}
		}
		else
		{
			if (pt.x() < (m_nRealSteelL - m_nEndDeadZone))
			{
				if (pt.y() < BADCOUPLE_RANK)
				{
					m_nBadCoupleBox[3]++;
					if (m_nBadCoupleBox[3] > m_nBadCoupleBoxNum)
					{
						if (!m_bCouplingAlarm[33])
						{
							CouplingAlarm(12, 1);//耦合报警
							CouplingAlarm(13, 1);
							CouplingAlarm(14, 1);
							CouplingAlarm(15, 1);
							CouplingAlarm(27, 1);
							CouplingAlarm(33, 1);
						}
						
						m_bBadCoupleOrNo = 1;
					}
				}
				else
				{
					m_nBadCoupleBox[3] = 0;
				}
			}
		}

		if (nGridNum > m_vectorBadCoupleFeature.size())
		{
			m_vectorBadCoupleFeature.push_back(pt);
		}
		else
		{
			if (pt.y() < m_vectorBadCoupleFeature[nGridNum - 1].y())
			{                 
				m_vectorBadCoupleFeature[nGridNum - 1].setY(pt.y());
			}
		}
	}
}

void GuanTan::DrawThickFeature(int i)
{
	QRect rectThickFeature(widgetThree->rect().left() + 289,
		widgetThree->rect().top() + widget->rect().height() + widget_2->rect().height() + widgetHRuler->rect().height() + widgetOne->rect().height() + widgetTwo->rect().height() + 9,
		widgetHRuler->rect().width() - 35,
		widgetOne->rect().height());
	QPainter painterThickFeature(&bmpThickFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex;

	if (wSoftChannelIndex == 0)
	{	
		QPointF pt[2];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE5);

		pt[0].setY((Dot2MicroSecond(g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[2].wFlawTime - g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[1].wFlawTime) 
			* m_Ascan.m_ChannelInfo[20].m_nWaveSpeed * 0.5) * 0.001);
		pt[1].setY((Dot2MicroSecond(g_stFeatrueInfo[i].stData7To8[1].stBeFeature.stGateFeature[2].wFlawTime - g_stFeatrueInfo[i].stData7To8[1].stBeFeature.stGateFeature[1].wFlawTime) 
			* m_Ascan.m_ChannelInfo[20].m_nWaveSpeed * 0.5) * 0.001);

		for (int index = 0; index < 2; ++index)
		{
			if (pt[index].x() > 0)
			{
#if SAVE_BOX_THICK
				if (index == 0)								// 保存原始数据闸门B-A差值
				{
					m_vectorFeature1.push_back(pt[0]);
				}
				else
				{
					m_vectorFeature5.push_back(pt[1]);	
				}
#endif
				
				if ((m_bBadCoupleOrNo == 1) || (pt[index].y() == 0))	//耦合不良则赋值为标准值 wangwei 2013-12-13
				{
					pt[index].setY(m_fCurThick);
				}

				int nGridNum = pt[index].x() / GRID_WIDTH + 1;
				pt[index].setX(nGridNum);

				if (index == 0)	// 1盒子
				{
					pt[index].setY(pt[index].y() * cos(m_fProbeCorrect[0] * PI / 180.0));	// 探头校准

					////////////////////////////// 旧测厚算法

					if (nGridNum > m_vectorThickHighFeature2.size())
					{
						if ((m_fEncipheror - PROBEBOX_DISTANCE2)/GRID_WIDTH > 1)
						{
							m_bEncipherorChange2 = TRUE;
						}

						if ((m_fEncipheror - PROBEBOX_DISTANCE3)/GRID_WIDTH > 1)
						{
							m_bEncipherorChange3 = TRUE;
						}

						if ((m_fEncipheror - PROBEBOX_DISTANCE4)/GRID_WIDTH > 1)
						{
							m_bEncipherorChange4 = TRUE;
						}

						if ((m_fEncipheror - PROBEBOX_DISTANCE5)/GRID_WIDTH > 1)
						{
							m_bEncipherorChange5 = TRUE;
						}

						if ((m_fEncipheror - PROBEBOX_DISTANCE6)/GRID_WIDTH > 1)
						{
							m_bEncipherorChange6 = TRUE;
						}

						m_vectorThickHighFeature2.push_back(pt[index]);
						m_vectorThickLowFeature2.push_back(pt[index]);
						m_vectorThickTempFeature1.push_back(pt[index]);

						float fTemp = 0;
						QPointF pTemp;

						for (int i = 0;i<m_vectorThickTempFeature1.size();i++)
						{
							fTemp += m_vectorThickTempFeature1[i].y();
						}

						fTemp = fTemp/m_vectorThickTempFeature1.size();
						pTemp.setX(nGridNum-1);
						pTemp.setY(fTemp);

						while(nGridNum > m_vectorThickFeature1.size())
						{
							m_vectorThickFeature1.push_back(pTemp);
						}
						
						m_vectorThickTempFeature1.clear();

						if (m_vectorThickFeature1.size() >= 3)
						{
							int midlle = m_vectorThickFeature1.size() - 2;
							if (fabs(m_vectorThickFeature1[midlle - 1].y() - m_vectorThickFeature1[midlle].y()) > THICK_CUT_BADPOINT 
								&& fabs(m_vectorThickFeature1[midlle].y() - m_vectorThickFeature1[midlle + 1].y()) > THICK_CUT_BADPOINT)
							{
								m_vectorThickFeature1[midlle].setY(m_vectorThickFeature1[midlle - 1].y());
							}
						}
					}
					else
					{
						if (m_vectorThickTempFeature1.size() < TEMP_DATA_COUNT)
						{
							m_vectorThickTempFeature1.push_back(pt[0]);
						}
					}

					///////////////////////////////// 新测厚算法
					if (m_featureMap.contains(nGridNum))					
					{
						m_featureMap[nGridNum].push_back(pt[index]);
					}
					else
					{		
						VectorPoint vector;
						vector.push_back(pt[index]);
						m_featureMap.insert(nGridNum, vector);
					}

					if (nGridNum > DRAW_BSCAN_BEGIN)
					{
						int key = nGridNum - DRAW_BSCAN_BEGIN;

						if (key > m_vectorThickHighFeature.size())
						{
							if (m_featureMap.contains(key))
							{
								VectorPoint vectorPt = m_featureMap.value(key);
								vector<float> vectorY;
								int count = vectorPt.size();

								if (count >= m_nfeatureAverageHighCount)
								{
									for (int index = 0; index < count - m_nfeatureAverageHighCount + 1; ++index)
									{
										float sub = 0.0f;

										for (int i = index; i < index + m_nfeatureAverageHighCount; ++i)
										{
											sub += vectorPt[i].y();
										}

										sub = sub / static_cast<float>(m_nfeatureAverageHighCount);

										if (sub > (m_fCurThick * (1.0 + m_fThickPercent)))
										{
											sub = m_fCurThick * (1.0 + m_fThickPercent);
										}

										sub = sub + m_fHighCorrect;
										vectorY.push_back(sub);
									}
								}
								else
								{
									float sub = 0.0f;

									for (int i = 0; i < count; ++i)
									{
										sub += vectorPt[i].y();
									}

									sub = sub / static_cast<float>(count);

									if (sub > (m_fCurThick * (1.0 + m_fThickPercent)))
									{
										sub = m_fCurThick * (1.0 + m_fThickPercent);
									}

									sub = sub + m_fHighCorrect;
									vectorY.push_back(sub);
								}	

								count = vectorY.size(); 
								QPointF ptTamp;

								for (int index = 0; index < count; ++index)
								{
									if (m_vectorThickHighFeature.size() < key)
									{
										ptTamp.setX(key);
										ptTamp.setY(vectorY[index]);
										m_vectorThickHighFeature.push_back(ptTamp);
									}
									else
									{
										if (m_vectorThickHighFeature[key - 1].y() < vectorY[index])
										{
											m_vectorThickHighFeature[key - 1].setY(vectorY[index]);
										}
									}
								}
							}
							else
							{
								QPointF ptTamp(key, m_fCurThick);
								m_vectorThickHighFeature.push_back(ptTamp);
							}
						}

						if (key > m_vectorThickLowFeature.size())
						{
							if (m_featureMap.contains(key))
							{
								VectorPoint vectorPt = m_featureMap.value(key);
								vector<float> vectorY;
								int count = vectorPt.size();

								if (count >= m_nfeatureAverageLowCount)
								{
									for (int index = 0; index < count - m_nfeatureAverageLowCount + 1; ++index)
									{
										float sub = 0.0f;

										for (int i = index; i < index + m_nfeatureAverageLowCount; ++i)
										{
											sub += vectorPt[i].y();
										}

										sub = sub / static_cast<float>(m_nfeatureAverageLowCount);

										if (sub < (m_fCurThick * (1.0 - m_fThickPercent)))
										{
											sub = m_fCurThick * (1.0 - m_fThickPercent);
										}

										sub = sub + m_fLowCorrect;
										vectorY.push_back(sub);
									}
								}
								else
								{
									float sub = 0.0f;

									for (int i = 0; i < count; ++i)
									{
										sub += vectorPt[i].y();
									}

									sub = sub / static_cast<float>(count);

									if (sub < (m_fCurThick * (1.0 - m_fThickPercent)))
									{
										sub = m_fCurThick * (1.0 - m_fThickPercent);
									}

									sub = sub + m_fLowCorrect;
									vectorY.push_back(sub);
								}	

								count = vectorY.size(); 
								QPointF ptTamp;

								for (int index = 0; index < count; ++index)
								{
									if (m_vectorThickLowFeature.size() < key)
									{
										ptTamp.setX(key);
										ptTamp.setY(vectorY[index]);
										m_vectorThickLowFeature.push_back(ptTamp);
									}
									else
									{
										if (m_vectorThickLowFeature[key - 1].y() > vectorY[index])
										{
											m_vectorThickLowFeature[key - 1].setY(vectorY[index]);
										}
									}
								}

								m_featureMap.remove(key);
							}
							else
							{
								QPointF ptTamp(key, m_fCurThick);
								m_vectorThickLowFeature.push_back(ptTamp);
							}
						}
					}

					///////////////////////// 壁厚最大值绘图
					if (nGridNum > DRAW_BSCAN_DELAY_2) 
					{
						if (m_nThickDrawType == 1 || m_nThickDrawType == 3)
						{
							if (nGridNum - DRAW_BSCAN_DELAY_1 < m_nStartDeadZone)
							{
								painterThickFeature.setPen(Qt::blue);
								float x1 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x2 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
							}
							else if(m_dwProbeBoxUpDown == 1)
							{
								if ((nGridNum - DRAW_BSCAN_DELAY_1) > (m_nRealSteelL - m_nEndDeadZone))
								{
									painterThickFeature.setPen(Qt::blue);
									float x1 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x2 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
								}
								else
								{
									painterThickFeature.setPen(Qt::red);
									float x1 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x2 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
									if (m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y() > m_fCurThick + m_fThickMaxTolerance)
									{
										m_bThickFeacher = TRUE;
									}
								}
							}
							else
							{
								painterThickFeature.setPen(Qt::red);
								float x1 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x2 = m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
								if (m_vectorThickHighFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y() > m_fCurThick + m_fThickMaxTolerance)
								{
									m_bThickFeacher = TRUE;
								}
							}
						}

						if (m_nThickDrawType == 2 || m_nThickDrawType == 3)
						{
							if (nGridNum - DRAW_BSCAN_DELAY_1 < m_nStartDeadZone)
							{
								painterThickFeature.setPen(Qt::blue);
								float x1 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x2 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
							}
							else if(m_dwProbeBoxUpDown == 1)
							{
								if ((nGridNum - DRAW_BSCAN_DELAY_1) > (m_nRealSteelL - m_nEndDeadZone))
								{
									painterThickFeature.setPen(Qt::blue);
									float x1 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x2 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
								}
								else
								{
									painterThickFeature.setPen(QColor(255, 0, 255));
									float x1 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x2 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
									if (m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y() > m_fCurThick + m_fThickMaxTolerance)
									{
										m_bThickFeacher = TRUE;
									}
								}
							}
							else
							{
								painterThickFeature.setPen(QColor(255, 0, 255));
								float x1 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y1 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x2 = m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y2 = rectThickFeature.height() - float(m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y() - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
								if (m_vectorThickHighFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y() > m_fCurThick + m_fThickMaxTolerance)
								{
									m_bThickFeacher = TRUE;
								}
							}	
						}		
					}

					// 壁厚最小值绘图
					if ( nGridNum > DRAW_BSCAN_DELAY_2) 
					{
						if (m_nThickDrawType == 1 || m_nThickDrawType == 3)
						{
							if (nGridNum - DRAW_BSCAN_DELAY_1 < m_nStartDeadZone)
							{
								painterThickFeature.setPen(Qt::blue);
								float x3 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x4 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
							}
							else if(m_dwProbeBoxUpDown == 1)
							{
								if ((nGridNum - DRAW_BSCAN_DELAY_1) > (m_nRealSteelL - m_nEndDeadZone))
								{
									painterThickFeature.setPen(Qt::blue);
									float x3 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x4 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
								}
								else
								{
									painterThickFeature.setPen(Qt::green);
									float x3 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x4 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
									if (m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y() < m_fCurThick + m_fThickMinTolerance)
									{
										m_bThickFeacher = TRUE;
									}
								}
							}
							else
							{
								painterThickFeature.setPen(Qt::green);
								float x3 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x4 = m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
								if (m_vectorThickLowFeature.value(nGridNum - DRAW_BSCAN_DELAY_1).y() < m_fCurThick + m_fThickMinTolerance)
								{
									m_bThickFeacher = TRUE;
								}
							}
						}

						if (m_nThickDrawType == 2 || m_nThickDrawType == 3)
						{
							if (nGridNum - DRAW_BSCAN_DELAY_1 < m_nStartDeadZone)
							{
								painterThickFeature.setPen(Qt::blue);
								float x3 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x4 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
							}
							else if(m_dwProbeBoxUpDown == 1)
							{
								if ((nGridNum - DRAW_BSCAN_DELAY_1) > (m_nRealSteelL - m_nEndDeadZone))
								{
									painterThickFeature.setPen(Qt::blue);
									float x3 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x4 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
								}
								else
								{
									painterThickFeature.setPen(QColor(0, 255, 255));
									float x3 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									float x4 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
									float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
									painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
									if (m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y() < m_fCurThick + m_fThickMinTolerance)
									{
										m_bThickFeacher = TRUE;
									}
								}
							}
							else
							{
								painterThickFeature.setPen(QColor(0, 255, 255));
								float x3 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y3 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								float x4 = m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectThickFeature.width();
								float y4 = rectThickFeature.height() - float(m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_2).y()  - m_fRangeMin - m_fCurThick)/(m_fRangeMax - m_fRangeMin) * rectThickFeature.height() - 3;
								painterThickFeature.drawLine(QPointF(x3,y3),QPointF(x4,y4));
								if (m_vectorThickLowFeature2.value(nGridNum - DRAW_BSCAN_DELAY_1).y() < m_fCurThick + m_fThickMinTolerance)
								{
									m_bThickFeacher = TRUE;
								}
							}
						}	
					}
				}
				else	///////////////////// 5 盒子
				{
					pt[index].setY(pt[index].y() * cos(m_fProbeCorrect[4] * PI / 180.0));	// 探头校准

					if (m_bEncipherorChange5)
					{
						m_vectorThickTempFeature5.push_back(pt[1]);
						float fTemp = 0;
						QPointF pTemp;

						for (int i = 0;i<m_vectorThickTempFeature5.size();i++)
						{
							fTemp += m_vectorThickTempFeature5[i].y();
						}

						fTemp = fTemp/m_vectorThickTempFeature5.size();
						pTemp.setX(nGridNum-1);
						pTemp.setY(fTemp);
						
						while(nGridNum > m_vectorThickFeature5.size())
						{
							m_vectorThickFeature5.push_back(pTemp);
						}

						m_vectorThickTempFeature5.clear();
						m_bEncipherorChange5 = FALSE;

						if (m_vectorThickFeature5.size() >= 3)
						{
							int midlle = m_vectorThickFeature5.size() - 2;
							if (fabs(m_vectorThickFeature5[midlle - 1].y() - m_vectorThickFeature5[midlle].y()) > THICK_CUT_BADPOINT 
								&& fabs(m_vectorThickFeature5[midlle].y() - m_vectorThickFeature5[midlle + 1].y()) > THICK_CUT_BADPOINT)
							{
								m_vectorThickFeature5[midlle].setY(m_vectorThickFeature5[midlle - 1].y());
							}
						}
					}
					else
					{
						if (m_vectorThickTempFeature5.size() < TEMP_DATA_COUNT)
						{
							m_vectorThickTempFeature5.push_back(pt[1]);
						}
					}

					///////////////////////////////// 新测厚算法
					if (m_featureMap.contains(nGridNum))					
					{
						m_featureMap[nGridNum].push_back(pt[index]);
					}
					else
					{		
						VectorPoint vector;
						vector.push_back(pt[index]);
						m_featureMap.insert(nGridNum, vector);
					}
				}
			}
		}	
	}

	if (wSoftChannelIndex == 1)
	{	 
		QPointF pt[2];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE6);
		pt[0].setY((Dot2MicroSecond(g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[2].wFlawTime - g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[1].wFlawTime) 
			* m_Ascan.m_ChannelInfo[20].m_nWaveSpeed * 0.5) * 0.001);
		pt[1].setY((Dot2MicroSecond(g_stFeatrueInfo[i].stData7To8[1].stBeFeature.stGateFeature[2].wFlawTime - g_stFeatrueInfo[i].stData7To8[1].stBeFeature.stGateFeature[1].wFlawTime) 
			* m_Ascan.m_ChannelInfo[20].m_nWaveSpeed * 0.5) * 0.001);

		for (int j = 0; j < 2; j++)
		{
			if (pt[j].x() > 0)
			{
				
#if SAVE_BOX_THICK
				if (j == 0)
				{
					m_vectorFeature2.push_back(pt[j]);		// 保存原始数据闸门B-A差值
				} else {
					m_vectorFeature6.push_back(pt[j]);		// 保存原始数据闸门B-A差值
				}
#endif
				
				if ((m_bBadCoupleOrNo == 1) || (pt[j].y() == 0))
				{
					pt[j].setY(m_fCurThick);
				}

				int nGridNum = pt[j].x() / GRID_WIDTH + 1;
				pt[j].setX(nGridNum);

				if (j == 0)		// 2
				{
					pt[j].setY(pt[j].y() * cos(m_fProbeCorrect[1] * PI / 180.0));	// 探头校准

					// 旧算法
					if (m_bEncipherorChange2)
					{
						m_vectorThickTempFeature2.push_back(pt[j]);
						float fTemp = 0;
						QPointF pTemp;

						for (int i = 0; i < m_vectorThickTempFeature2.size(); i++)
						{
							fTemp += m_vectorThickTempFeature2[i].y();
						}

						fTemp = fTemp/m_vectorThickTempFeature2.size();
						pTemp.setX(nGridNum-1);
						pTemp.setY(fTemp);

						while(nGridNum > m_vectorThickFeature2.size())
						{
							m_vectorThickFeature2.push_back(pTemp);
						}
						
						m_vectorThickTempFeature2.clear();
						m_bEncipherorChange2 = FALSE;

						if (m_vectorThickFeature2.size() >= 3)
						{
							int midlle = m_vectorThickFeature2.size() - 2;
							if (fabs(m_vectorThickFeature2[midlle - 1].y() - m_vectorThickFeature2[midlle].y()) > THICK_CUT_BADPOINT 
								&& fabs(m_vectorThickFeature2[midlle].y() - m_vectorThickFeature2[midlle + 1].y()) > THICK_CUT_BADPOINT)
							{
								m_vectorThickFeature2[midlle].setY(m_vectorThickFeature2[midlle - 1].y());
							}
						}
					}
					else
					{
						if (m_vectorThickTempFeature2.size() < TEMP_DATA_COUNT)
						{
							m_vectorThickTempFeature2.push_back(pt[j]);
						}
					}

					// 新算法
					if (m_featureMap.contains(nGridNum))					
					{
						m_featureMap[nGridNum].push_back(pt[j]);
					}
					else
					{
						VectorPoint vector;
						vector.push_back(pt[j]);
						m_featureMap.insert(nGridNum, vector);
					}
				}
				else			// 6盒子
				{
					pt[j].setY(pt[j].y() * cos(m_fProbeCorrect[5] * PI / 180.0));	// 探头校准

					// 旧算法
					if (m_bEncipherorChange6)
					{
						m_vectorThickTempFeature6.push_back(pt[j]);
						float fTemp = 0;
						QPointF pTemp;

						for (int i = 0; i < m_vectorThickTempFeature6.size(); i++)
						{
							fTemp += m_vectorThickTempFeature6[i].y();
						}

						fTemp = fTemp/m_vectorThickTempFeature6.size();
						pTemp.setX(nGridNum-1);
						pTemp.setY(fTemp);
						
						while(nGridNum > m_vectorThickFeature6.size())
						{
							m_vectorThickFeature6.push_back(pTemp);
						}

						m_vectorThickTempFeature6.clear();
						m_bEncipherorChange6 = FALSE;

						if (m_vectorThickFeature6.size() >= 3)
						{
							int midlle = m_vectorThickFeature6.size() - 2;
							if (fabs(m_vectorThickFeature6[midlle - 1].y() - m_vectorThickFeature6[midlle].y()) > THICK_CUT_BADPOINT 
								&& fabs(m_vectorThickFeature6[midlle].y() - m_vectorThickFeature6[midlle + 1].y()) > THICK_CUT_BADPOINT)
							{
								m_vectorThickFeature6[midlle].setY(m_vectorThickFeature6[midlle - 1].y());
							}
						}

						// 汇总取值
						if (nGridNum >= 5)
						{
							fTemp = m_vectorThickFeature1.value(nGridNum - 5).y();

							if (fTemp < m_vectorThickFeature2.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature2.value(nGridNum - 5).y();
							}

							if (fTemp < m_vectorThickFeature3.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature3.value(nGridNum - 5).y();
							}

							if (fTemp < m_vectorThickFeature4.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature4.value(nGridNum - 5).y();
							}

							if (fTemp < m_vectorThickFeature5.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature5.value(nGridNum - 5).y();
							}

							if (fTemp < m_vectorThickFeature6.value(nGridNum - 5).y())	// fpga 屏蔽6盒 
							{
								fTemp = m_vectorThickFeature6.value(nGridNum - 5).y();
							}

							QPointF ptReplace;
							ptReplace.setX(m_vectorThickHighFeature2.value(nGridNum - 5).x());
							ptReplace.setY(fTemp + m_fHighCorrect2);							// 增厚校准
							m_vectorThickHighFeature2.replace(nGridNum - 5, ptReplace);

							fTemp = m_vectorThickFeature1.value(nGridNum - 5).y();

							if (fTemp > m_vectorThickFeature2.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature2.value(nGridNum - 5).y();
							}

							if (fTemp > m_vectorThickFeature3.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature3.value(nGridNum - 5).y();
							}

							if (fTemp > m_vectorThickFeature4.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature4.value(nGridNum - 5).y();
							}

							if (fTemp > m_vectorThickFeature5.value(nGridNum - 5).y())
							{
								fTemp = m_vectorThickFeature5.value(nGridNum - 5).y();
							}

							if (fTemp > m_vectorThickFeature6.value(nGridNum - 5).y())	// fpga 屏蔽6盒	
							{
								fTemp = m_vectorThickFeature6.value(nGridNum - 5).y();
							}

							ptReplace.setX(m_vectorThickLowFeature2.value(nGridNum - 5).x());
							ptReplace.setY(fTemp+ m_fLowCorrect2);
							m_vectorThickLowFeature2.replace(nGridNum - 5, ptReplace);
						}
					}
					else
					{
						if (m_vectorThickTempFeature6.size() < TEMP_DATA_COUNT)
						{
							m_vectorThickTempFeature6.push_back(pt[j]);
						}
					}

					// 新算法
					if (m_featureMap.contains(nGridNum))			// fpga 屏蔽6盒			
					{
						m_featureMap[nGridNum].push_back(pt[j]);
					}
					else
					{
						VectorPoint vector;
						vector.push_back(pt[j]);
						m_featureMap.insert(nGridNum, vector);
					}
				}
			}
		}
	}

	if (wSoftChannelIndex == 2)	// 3
	{	 
		QPointF pt;
		pt.setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt.setY((Dot2MicroSecond(g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[2].wFlawTime - g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[1].wFlawTime) 
			* m_Ascan.m_ChannelInfo[20].m_nWaveSpeed * 0.5) * 0.001);

		if (pt.x() > 0)
		{
#if SAVE_BOX_THICK
 			m_vectorFeature3.push_back(pt);		// 保存原始数据闸门B-A差值
#endif

			if (m_bBadCoupleOrNo || pt.y() == 0)
			{
				pt.setY(m_fCurThick);
			}

			int nGridNum = pt.x() / GRID_WIDTH + 1;
			pt.setX(nGridNum);
			pt.setY(pt.y() * cos(m_fProbeCorrect[2] * PI / 180.0));	// 探头校准

			// 旧算法
			if (m_bEncipherorChange3)
			{
				m_vectorThickTempFeature3.push_back(pt);
				float fTemp = 0;
				QPointF pTemp;

				for (int i = 0;i<m_vectorThickTempFeature3.size();i++)
				{
					fTemp += m_vectorThickTempFeature3[i].y();
				}

				fTemp = fTemp/m_vectorThickTempFeature3.size();
				pTemp.setX(nGridNum-1);
				pTemp.setY(fTemp);

				while(nGridNum > m_vectorThickFeature3.size())
				{
					m_vectorThickFeature3.push_back(pTemp);
				}

				m_vectorThickTempFeature3.clear();
				m_bEncipherorChange3 = FALSE;

				if (m_vectorThickFeature3.size() >= 3)
				{
					int midlle = m_vectorThickFeature3.size() - 2;
					if (fabs(m_vectorThickFeature3[midlle - 1].y() - m_vectorThickFeature3[midlle].y()) > THICK_CUT_BADPOINT 
						&& fabs(m_vectorThickFeature3[midlle].y() - m_vectorThickFeature3[midlle + 1].y()) > THICK_CUT_BADPOINT)
					{
						m_vectorThickFeature3[midlle].setY(m_vectorThickFeature3[midlle - 1].y());
					}
				}
			}
			else
			{
				if (m_vectorThickTempFeature3.size() < TEMP_DATA_COUNT)
				{
					m_vectorThickTempFeature3.push_back(pt);
				}
			}

			// 新算法
			if (m_featureMap.contains(nGridNum))					
			{
				m_featureMap[nGridNum].push_back(pt);
			}
			else
			{
				VectorPoint vector;
				vector.push_back(pt);
				m_featureMap.insert(nGridNum, vector);
			}
		}
	}

	if (wSoftChannelIndex == 3)	// 4
	{	 
		QPointF pt;
		pt.setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt.setY((Dot2MicroSecond(g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[2].wFlawTime - g_stFeatrueInfo[i].stData7To8[0].stBeFeature.stGateFeature[1].wFlawTime) 
			* m_Ascan.m_ChannelInfo[20].m_nWaveSpeed * 0.5) * 0.001);

		if (pt.x() > 0)
		{
#if SAVE_BOX_THICK
 			m_vectorFeature4.push_back(pt);		// 保存原始数据闸门B-A差值
#endif

			if (m_bBadCoupleOrNo || pt.y() == 0)
			{
				pt.setY(m_fCurThick);
			}

			int nGridNum = pt.x() / GRID_WIDTH + 1;
			pt.setX(nGridNum);
			pt.setY(pt.y() * cos(m_fProbeCorrect[3] * PI / 180.0));	// 探头校准

			// 旧算法
			if (m_bEncipherorChange4)
			{
				m_vectorThickTempFeature4.push_back(pt);
				float fTemp = 0;
				QPointF pTemp;

				for (int i = 0;i<m_vectorThickTempFeature4.size();i++)
				{
					fTemp += m_vectorThickTempFeature4[i].y();
				}

				fTemp = fTemp/m_vectorThickTempFeature4.size();
				pTemp.setX(nGridNum-1);
				pTemp.setY(fTemp);
				
				while(nGridNum > m_vectorThickFeature4.size())
				{
					m_vectorThickFeature4.push_back(pTemp);
				}

				m_vectorThickTempFeature4.clear();
				m_bEncipherorChange4 = FALSE;

				if (m_vectorThickFeature4.size() >= 3)
				{
					int midlle = m_vectorThickFeature4.size() - 2;
					if (fabs(m_vectorThickFeature4[midlle - 1].y() - m_vectorThickFeature4[midlle].y()) > THICK_CUT_BADPOINT 
						&& fabs(m_vectorThickFeature4[midlle].y() - m_vectorThickFeature4[midlle + 1].y()) > THICK_CUT_BADPOINT)
					{
						m_vectorThickFeature4[midlle].setY(m_vectorThickFeature4[midlle - 1].y());
					}
				}
			}
			else
			{
				if (m_vectorThickTempFeature4.size() < TEMP_DATA_COUNT)
				{
					m_vectorThickTempFeature4.push_back(pt);
				}	
			}

			// 新算法
			if (m_featureMap.contains(nGridNum))					
			{
				m_featureMap[nGridNum].push_back(pt);
			}
			else
			{
				VectorPoint vector;
				vector.push_back(pt);
				m_featureMap.insert(nGridNum, vector);
			}
		}
	}

	m_bBadCoupleOrNo = 0;
}

void GuanTan::DrawLayerFeature(int i)
{
	QRect rectLayerFeature(widgetFour->rect().left()+289,widgetFour->rect().top()+widget->rect().height()+widget_2->rect().height()+widgetHRuler->rect().height()+widgetOne->rect().height()+widgetTwo->rect().height()+widgetThree->rect().height()+12,
		widgetFour->rect().width()-35,widgetFour->rect().height());
	QPainter painterLayerFeature(&bmpLayerFeature);
	WORD wSoftChannelIndex = g_stFeatrueInfo[i].wSoftChannelIndex ;
	if (wSoftChannelIndex == 0)
	{	
		QPointF pt[2];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE1);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE5);
		pt[0].setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[1].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData7To8[1].stFlawFeature.stGateFeature[1].wFlawHeight);

		for (int j = 0;j < 2;j++)
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + 24;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + 24;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}

			if (nGridNum > m_vectorLayerFeature.size())
			{
				while(nGridNum > m_vectorLayerFeature.size())
				{
					m_vectorLayerFeature.push_back(pt[j]);
				}
				
				if ( nGridNum > DRAW_BSCAN_DELAY_3 && j == 0) 
				{
					if (nGridNum - DRAW_BSCAN_DELAY_2 < m_nStartDeadZone)
					{
						painterLayerFeature.setPen(Qt::blue);
						float x1 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
						float y1 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectLayerFeature.height() - 2;
						float x2 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
						float y2 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectLayerFeature.height() - 2;
						painterLayerFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
					}
					else if(m_dwProbeBoxUpDown == 1)
					{
						if ((nGridNum - DRAW_BSCAN_DELAY_2) > (m_nRealSteelL - m_nEndDeadZone))
						{
							painterLayerFeature.setPen(Qt::blue);
							float x1 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
							float y1 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectLayerFeature.height() - 2;
							float x2 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
							float y2 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectLayerFeature.height() - 2;
							painterLayerFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
						}
						else
						{
							painterLayerFeature.setPen(Qt::red);
							float x1 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
							float y1 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectLayerFeature.height() - 2;
							float x2 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
							float y2 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectLayerFeature.height() - 2;
							painterLayerFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
							if (m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
							{
								m_bThickFeacher = TRUE;
							}
						}
					}
					else
					{
						painterLayerFeature.setPen(Qt::red);
						float x1 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
						float y1 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y())/512.0 * rectLayerFeature.height() - 2;
						float x2 = m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).x() * GRID_WIDTH/ m_fPIPE_LENGTH * rectLayerFeature.width();
						float y2 = rectLayerFeature.height() - float(m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_3).y())/512.0 * rectLayerFeature.height() - 2;
						painterLayerFeature.drawLine(QPointF(x1,y1),QPointF(x2,y2));
						if (m_vectorLayerFeature.value(nGridNum - DRAW_BSCAN_DELAY_2).y() > 256)
						{
							m_bThickFeacher = TRUE;
						}
					}
				}
			}
			else
			{
				if (pt[j].y() > m_vectorLayerFeature[nGridNum - 1].y())
				{                 
					m_vectorLayerFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}

	if (wSoftChannelIndex == 1)
	{	 
		QPointF pt[2];
		pt[0].setX(m_fEncipheror - PROBEBOX_DISTANCE2);
		pt[1].setX(m_fEncipheror - PROBEBOX_DISTANCE6);
		pt[0].setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[1].wFlawHeight);
		pt[1].setY(g_stFeatrueInfo[i].stData7To8[1].stFlawFeature.stGateFeature[1].wFlawHeight);

		for (int j = 0; j < 2; j++)
		{
			if (pt[j].x() <= 0)
			{
				continue;
			}

			int nGridNum = pt[j].x() / GRID_WIDTH + 1;
			pt[j].setX(nGridNum);

			if (!m_bSteelLengthIsValue)
			{
				if (pt[j].x() > m_nStartDeadZone)
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + 25;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}
			else
			{
				if (pt[j].x() < (m_nRealSteelL - m_nEndDeadZone))
				{
					if (pt[j].y() > 256)
					{
						int temp = j * 4 + 25;
						if (!m_bDefectAlarm[temp])
						{
							DefectAlarm(temp, 1);//内部缺陷报警
						}
					}
				}
			}

			if (nGridNum > m_vectorLayerFeature.size())
			{
				m_vectorLayerFeature.push_back(pt[j]);
			}
			else
			{
				if (pt[j].y() > m_vectorLayerFeature[nGridNum - 1].y())
				{                 
					m_vectorLayerFeature[nGridNum - 1].setY(pt[j].y());
				}
			}
		}
	}

	if (wSoftChannelIndex == 2)
	{	 
		QPointF pt;
		pt.setX(m_fEncipheror - PROBEBOX_DISTANCE3);
		pt.setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[1].wFlawHeight);

		if (pt.x() <= 0)
		{
			return;
		}

		int nGridNum = pt.x() / GRID_WIDTH + 1;
		pt.setX(nGridNum);

		if (!m_bSteelLengthIsValue)
		{
			if (pt.x() > m_nStartDeadZone)
			{
				if (pt.y() > 256)
				{
					if (!m_bDefectAlarm[26])
					{
						DefectAlarm(26, 1);//内部缺陷报警
					}
				}
			}
		}
		else
		{
			if (pt.x() < (m_nRealSteelL - m_nEndDeadZone))
			{
				if (pt.y() > 256)
				{
					if (!m_bDefectAlarm[26])
					{
						DefectAlarm(26, 1);//内部缺陷报警
					}
				}
			}
		}

		if (nGridNum > m_vectorLayerFeature.size())
		{
			m_vectorLayerFeature.push_back(pt);
		}
		else
		{
			if (pt.y() > m_vectorLayerFeature[nGridNum - 1].y())
			{                 
				m_vectorLayerFeature[nGridNum - 1].setY(pt.y());
			}
		}	
	}

	if (wSoftChannelIndex == 3)
	{	 
		QPointF pt;
		pt.setX(m_fEncipheror - PROBEBOX_DISTANCE4);
		pt.setY(g_stFeatrueInfo[i].stData7To8[0].stFlawFeature.stGateFeature[1].wFlawHeight);

		if (pt.x() <= 0)
		{
			return;
		}
		int nGridNum = pt.x() / GRID_WIDTH + 1;
		pt.setX(nGridNum);

		if (!m_bSteelLengthIsValue)
		{
			if (pt.x() > m_nStartDeadZone)
			{
				if (pt.y() > 256)
				{
					if (!m_bDefectAlarm[27])
					{
						DefectAlarm(27, 1);//内部缺陷报警
					}
				}
			}
		}
		else
		{
			if (pt.x() < (m_nRealSteelL - m_nEndDeadZone))
			{
				if (pt.y() > 256)
				{
					if (!m_bDefectAlarm[27])
					{
						DefectAlarm(27, 1);//内部缺陷报警
					}
				}
			}
		}

		if (nGridNum > m_vectorLayerFeature.size())
		{
			m_vectorLayerFeature.push_back(pt);
		}
		else
		{
			if (pt.y() > m_vectorLayerFeature[nGridNum - 1].y())
			{                 
				m_vectorLayerFeature[nGridNum - 1].setY(pt.y());
			}
		}
	}
}

// 多功能目前只针对10-100-100-10000定档位的更改重复频率
void GuanTan::WriteReFreq()
{
	WORD wReFreq = 33000000/m_Ascan.m_fReFreq;
    #if _PLX
	P9054_WriteWord(m_stThreadParam[0].hDev, P9054_ADDR_SPACE0, 0x4, wReFreq);	// 多功能卡地址
    #endif
}