DS_APP_NAME = WaferScan
DS_APP_DISPLAY_NAME = WaferScan
DS_APP_IDENTIFIER = cn.com.allrising.dolphinsense

# Version: always "major.minor.patch". Build (revision) number will be appended by app.
DS_VERSION = 1.5.0
DS_COMPAT_VERSION = 1.5.0

# Resolve compile date.
win32 {
    DS_DATE_STR = $$system("WMIC OS Get LocalDateTime /Value")
    DS_DATE_STR = $$find(DS_DATE_STR, LocalDateTime)
    DS_DATE_STR = $$split(DS_DATE_STR, =)
    DS_DATE_STR = $$last(DS_DATE_STR)
    DS_DATE = $$str_member($$DS_DATE_STR, 0, 3)-$$str_member($$DS_DATE_STR, 4, 5)-$$str_member($$DS_DATE_STR, 6, 7)
} else: unix {
    DS_DATE = $$system("date +%Y-%m-%d")
}

DS_YEAR = $$section(DS_DATE, -, 0, 0)
DS_ORGANIZATION_DOMAIN = cn.com.allrising
DS_AUTHOR = Allrising
DS_AUTHOR_LONG = Allrising (Beijing) Technology
DS_YEAR_START = 2014
DS_COPYRIGHT = Copyright (c) $$DS_YEAR_START - $$DS_YEAR $$DS_AUTHOR_LONG. All rights reserved.

exists($$PWD/config.pri): include($$PWD/config.pri)

# Specify build path
DS_BUILD_PATH = $$clean_path($$shadowed($$PWD))
DS_SRC_PATH = $$PWD
DS_SRC_PLUGIN_DIRS = $$DS_SRC_PATH/plugins
DS_PACKAGE_PATH = $$DS_BUILD_PATH/package
DS_PACKAGE_DATA = $$DS_PACKAGE_PATH/$$DS_APP_IDENTIFIER/data
DS_PACKAGE_META = $$DS_PACKAGE_PATH/$$DS_APP_IDENTIFIER/meta

exists($$DS_BUILD_PATH/build.pri): include($$DS_BUILD_PATH/build.pri)

DS_BIN_PATH = $$DS_BUILD_PATH/bin
DS_APP_PATH = $$DS_BIN_PATH

mac {                                               # Mac OS X
    DS_PLUGIN_PATH = $$DS_BIN_PATH/$${DS_APP_NAME}.app/Contents/PlugIns
    DS_PLUGIN_DLL_PATH = $$DS_PLUGIN_PATH
    DS_LIBRARY_PATH = $$DS_BIN_PATH/$${DS_APP_NAME}.app/Contents/Frameworks
    DS_LIBRARY_DLL_PATH = $$DS_LIBRARY_PATH
    DS_RESOURCE_PATH = $$DS_BIN_PATH/$${DS_APP_NAME}.app/Contents/Resources
} else: win32 {                                     # Windows
    DS_PLUGIN_PATH = $$DS_BUILD_PATH/plugins        # dll, lib, and everything else output path
    DS_PLUGIN_DLL_PATH = $$DS_BIN_PATH/plugins      # dll output path
    DS_LIBRARY_PATH = $$DS_BUILD_PATH/libs
    DS_LIBRARY_DLL_PATH = $$DS_BIN_PATH
    DS_RESOURCE_PATH = $$DS_BIN_PATH/resources
} else {                                            # Linux
    DS_PLUGIN_PATH = $$DS_BIN_PATH/plugins          # dll output path
    DS_PLUGIN_DLL_PATH = $$DS_BIN_PATH/plugins      # dll output path
    DS_LIBRARY_PATH = $$DS_BIN_PATH/libs
    DS_LIBRARY_DLL_PATH = $$DS_BIN_PATH
    DS_RESOURCE_PATH = $$DS_BIN_PATH/resources
}
DS_EXTERNAL_LIBRARY_ROOT = $$clean_path($$PWD/../../Lib)

# Util functions
defineReplace(qtLibraryName) {
   RET = $$qtLibraryTargetName($$1)
#   win32 {
#      VERSION_LIST = $$split(DS_VERSION, .)
#      RET = $$RET$$first(VERSION_LIST)
#   }
   return($$RET)
}

defineReplace(qtLibraryTargetName) {
    unset(LIBRARY_NAME)
    LIBRARY_NAME = $$1
    CONFIG(debug, debug|release) {
        !debug_and_release|build_pass {
            mac:RET = $$member(LIBRARY_NAME, 0)_debug
            else:win32:RET = $$member(LIBRARY_NAME, 0)d
        }
    }
    isEmpty(RET):RET = $$LIBRARY_NAME
    return($$RET)
}

defineTest(minQtVersion) {
    maj = $$1
    min = $$2
    patch = $$3
    isEqual(QT_MAJOR_VERSION, $$maj) {
        isEqual(QT_MINOR_VERSION, $$min) {
            isEqual(QT_PATCH_VERSION, $$patch) {
                return(true)
            }
            greaterThan(QT_PATCH_VERSION, $$patch) {
                return(true)
            }
        }
        greaterThan(QT_MINOR_VERSION, $$min) {
            return(true)
        }
    }
    greaterThan(QT_MAJOR_VERSION, $$maj) {
        return(true)
    }
    return(false)
}
